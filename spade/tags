!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -m64 -march=native -mtune=native -O3 -Wno-unused-result -std=c++11$/;"	m
DEBUG	Makefile	/^DEBUG ?= 1$/;"	m
ELLR	Makefile	/^ELLR ?= 0$/;"	m
EMCCFLAGS	Makefile	/^EMCCFLAGS = -m64 -O3 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=6 -s WASM=1 -s TOTAL_MEMORY=1GB -s  ALLOW_MEMORY_GROWTH=1 --no-heap-copy -s WASM_MEM_MAX=1GB -s NO_EXIT_RUNTIME=0 --preload-file $(FILE)$/;"	m
FORMAT	spmv.h	11;"	d
INCLUDES	Makefile	/^INCLUDES = -I.\/include$/;"	m
Index	spmv.h	9;"	d
LIBS	Makefile	/^LIBS = -L\/scratch\/seth.k\/tools\/papi\/lib -lm -lrt -lpthread -lpapi -lpfm$/;"	m
MM_ARRAY_STR	mmio.h	105;"	d
MM_COMPLEX_STR	mmio.h	109;"	d
MM_COORDINATE_STR	mmio.h	107;"	d
MM_COULD_NOT_READ_FILE	mmio.h	79;"	d
MM_COULD_NOT_WRITE_FILE	mmio.h	85;"	d
MM_DENSE_STR	mmio.h	106;"	d
MM_GENERAL_STR	mmio.h	112;"	d
MM_HERM_STR	mmio.h	114;"	d
MM_INT_STR	mmio.h	111;"	d
MM_IO_H	mmio.h	10;"	d
MM_LINE_TOO_LONG	mmio.h	84;"	d
MM_MAX_LINE_LENGTH	mmio.h	12;"	d
MM_MAX_TOKEN_LENGTH	mmio.h	14;"	d
MM_MTX_STR	mmio.h	104;"	d
MM_NOT_MTX	mmio.h	81;"	d
MM_NO_HEADER	mmio.h	82;"	d
MM_PATTERN_STR	mmio.h	116;"	d
MM_PREMATURE_EOF	mmio.h	80;"	d
MM_REAL_STR	mmio.h	110;"	d
MM_SKEW_STR	mmio.h	115;"	d
MM_SPARSE_STR	mmio.h	108;"	d
MM_SYMM_STR	mmio.h	113;"	d
MM_UNSUPPORTED_TYPE	mmio.h	83;"	d
MM_typecode	mmio.h	/^typedef char MM_typecode[4];$/;"	t
MYEPSILON	spmv.h	12;"	d
MYTYPE	spmv.h	8;"	d
MatrixMarketBanner	mmio.h	13;"	d
N	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ell_struct	access:public
N	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ellii_struct	access:public
N	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
N	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
N	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_coo_struct	access:public
N	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_csr_struct	access:public
OBJS	Makefile	/^OBJS = $(SRCS:.cc=.o)$/;"	m
OUTER_MAX	main.cc	16;"	d	file:
SHELL	Makefile	/^SHELL := '\/bin\/bash'$/;"	m
SPMV_H_	spmv.h	2;"	d
SRCS	Makefile	/^SRCS = main.cc spmv.cc utils.cc mmio.cc$/;"	m
Value	spmv.h	10;"	d
_GNU_SOURCE	main.cc	17;"	d	file:
cmp	spmv.h	/^void cmp(MYTYPE *y, MYTYPE *y1, int N);$/;"	p	signature:(MYTYPE *y, MYTYPE *y1, int N)
cmp	utils.cc	/^void cmp(MYTYPE *y, MYTYPE *y1, int N)$/;"	f	signature:(MYTYPE *y, MYTYPE *y1, int N)
col	spmv.h	/^  int *row, *col;$/;"	m	struct:spmv_coo_struct	access:public
col	spmv.h	/^  int *rowptr, *col;$/;"	m	struct:spmv_csr_struct	access:public
coo_csr	spmv.h	/^void coo_csr(int nz, int N, int *row, int *col, MYTYPE *coo_val, int *row_ptr, int *colind, MYTYPE *csr_val);$/;"	p	signature:(int nz, int N, int *row, int *col, MYTYPE *coo_val, int *row_ptr, int *colind, MYTYPE *csr_val)
coo_csr	utils.cc	/^void coo_csr(int nz, int N, int *row, int *col, MYTYPE *coo_val, int *row_ptr, int *colind, MYTYPE *val)$/;"	f	signature:(int nz, int N, int *row, int *col, MYTYPE *coo_val, int *row_ptr, int *colind, MYTYPE *val)
count_diag_elems	utils.cc	/^long long count_diag_elems(int *row, int *col, MYTYPE *val, int nnz, int N, int *nd)$/;"	f	signature:(int *row, int *col, MYTYPE *val, int nnz, int N, int *nd)
csr_custom	spmv.h	/^void csr_custom(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int* nd, int **ptr);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int* nd, int **ptr)
csr_custom	utils.cc	/^void csr_custom(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int **ptr)$/;"	f	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int **ptr)
csr_dia	spmv.h	/^void csr_dia(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int* nd, int *stride, int nnz);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int* nd, int *stride, int nnz)
csr_dia	utils.cc	/^void csr_dia(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz)$/;"	f	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz)
csr_diaii	spmv.h	/^void csr_diaii(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz)
csr_diaii	utils.cc	/^void csr_diaii(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz)$/;"	f	signature:(int *row_ptr, int *colind, MYTYPE *val, int **offset, MYTYPE **data, int N, int *nd, int *stride, int nnz)
csr_ell	spmv.h	/^void csr_ell(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* nc, int nnz);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* nc, int nnz)
csr_ell	utils.cc	/^void csr_ell(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* num_cols, int nnz)$/;"	f	signature:(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* num_cols, int nnz)
csr_ellii	spmv.h	/^void csr_ellii(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* nc, int nnz);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* nc, int nnz)
csr_ellii	utils.cc	/^void csr_ellii(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* num_cols, int nnz)$/;"	f	signature:(int *row_ptr, int *colind, MYTYPE *val, int **indices, MYTYPE **data, int N, int* num_cols, int nnz)
data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_dia_struct	access:public
end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_diaii_struct	access:public
end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ell_struct	access:public
end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ellii_struct	access:public
fletcher_sum	spmv.h	/^int fletcher_sum(MYTYPE *a, int size);$/;"	p	signature:(MYTYPE *a, int size)
fletcher_sum	utils.cc	/^int fletcher_sum(MYTYPE *a, int size) {$/;"	f	signature:(MYTYPE *a, int size)
fletcher_sum_1d_array_int	spmv.h	/^int fletcher_sum_1d_array_int(int *a, int size);$/;"	p	signature:(int *a, int size)
fletcher_sum_1d_array_int	utils.cc	/^int fletcher_sum_1d_array_int(int *a, int size) {$/;"	f	signature:(int *a, int size)
geo_mean	utils.cc	/^float geo_mean(float *arr, int n){$/;"	f	signature:(float *arr, int n)
indices	spmv.h	/^  int *indices;$/;"	m	struct:spmv_ell_struct	access:public
indices	spmv.h	/^  int *indices;$/;"	m	struct:spmv_ellii_struct	access:public
init_arr	spmv.h	/^void init_arr(int N, MYTYPE* a);$/;"	p	signature:(int N, MYTYPE* a)
init_arr	utils.cc	/^void init_arr(int N, MYTYPE* a)$/;"	f	signature:(int N, MYTYPE* a)
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_coo_struct	access:public
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_csr_struct	access:public
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_dia_struct	access:public
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_diaii_struct	access:public
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_ell_struct	access:public
inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_ellii_struct	access:public
len	spmv.h	/^  int len;$/;"	m	struct:spmv_coo_struct	access:public
len	spmv.h	/^  int len;$/;"	m	struct:spmv_csr_struct	access:public
len	spmv.h	/^  int len;$/;"	m	struct:spmv_dia_struct	access:public
len	spmv.h	/^  int len;$/;"	m	struct:spmv_diaii_struct	access:public
main	main.cc	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
matlab_modulo	utils.cc	/^double matlab_modulo(double x, double y) {$/;"	f	signature:(double x, double y)
mean_f	utils.cc	/^float mean_f(float *arr, int n)$/;"	f	signature:(float *arr, int n)
mean_i	utils.cc	/^float mean_i(int *arr, int n)$/;"	f	signature:(int *arr, int n)
median	utils.cc	/^int median(int *arr, int n)$/;"	f	signature:(int *arr, int n)
mm_clear_typecode	mmio.h	70;"	d
mm_initialize_typecode	mmio.h	73;"	d
mm_is_array	mmio.h	36;"	d
mm_is_complex	mmio.h	38;"	d
mm_is_coordinate	mmio.h	34;"	d
mm_is_dense	mmio.h	35;"	d
mm_is_general	mmio.h	44;"	d
mm_is_hermitian	mmio.h	46;"	d
mm_is_integer	mmio.h	41;"	d
mm_is_matrix	mmio.h	31;"	d
mm_is_pattern	mmio.h	40;"	d
mm_is_real	mmio.h	39;"	d
mm_is_skew	mmio.h	45;"	d
mm_is_sparse	mmio.h	33;"	d
mm_is_symmetric	mmio.h	43;"	d
mm_is_valid	mmio.cc	/^int mm_is_valid(MM_typecode matcode)$/;"	f	signature:(MM_typecode matcode)
mm_is_valid	mmio.h	/^int mm_is_valid(MM_typecode matcode);		\/* too complex for a macro *\/$/;"	p	signature:(MM_typecode matcode)
mm_read_banner	mmio.cc	/^int mm_read_banner(FILE *f, MM_typecode *matcode)$/;"	f	signature:(FILE *f, MM_typecode *matcode)
mm_read_banner	mmio.h	/^int mm_read_banner(FILE *f, MM_typecode *matcode);$/;"	p	signature:(FILE *f, MM_typecode *matcode)
mm_read_mtx_array_size	mmio.cc	/^int mm_read_mtx_array_size(FILE *f, int *M, int *N)$/;"	f	signature:(FILE *f, int *M, int *N)
mm_read_mtx_array_size	mmio.h	/^int mm_read_mtx_array_size(FILE *f, int *M, int *N);$/;"	p	signature:(FILE *f, int *M, int *N)
mm_read_mtx_crd	mmio.cc	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J, $/;"	f	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, MM_typecode *matcode)
mm_read_mtx_crd_data	mmio.cc	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	f	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_read_mtx_crd_data	mmio.h	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	p	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_read_mtx_crd_entry	mmio.cc	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J,$/;"	f	signature:(FILE *f, int *I, int *J, double *real, double *imag, MM_typecode matcode)
mm_read_mtx_crd_entry	mmio.h	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J, double *real, double *img,$/;"	p	signature:(FILE *f, int *I, int *J, double *real, double *img, MM_typecode matcode)
mm_read_mtx_crd_size	mmio.cc	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz )$/;"	f	signature:(FILE *f, int *M, int *N, int *nz )
mm_read_mtx_crd_size	mmio.h	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz);$/;"	p	signature:(FILE *f, int *M, int *N, int *nz)
mm_read_unsymmetric_sparse	mmio.cc	/^int mm_read_unsymmetric_sparse(const char *fname, int *M_, int *N_, int *nz_,$/;"	f	signature:(const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_)
mm_read_unsymmetric_sparse	mmio.h	/^int mm_read_unsymmetric_sparse(const char *fname, int *M_, int *N_, int *nz_,$/;"	p	signature:(const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_)
mm_set_array	mmio.h	55;"	d
mm_set_complex	mmio.h	59;"	d
mm_set_coordinate	mmio.h	54;"	d
mm_set_dense	mmio.h	56;"	d
mm_set_general	mmio.h	66;"	d
mm_set_hermitian	mmio.h	68;"	d
mm_set_integer	mmio.h	62;"	d
mm_set_matrix	mmio.h	53;"	d
mm_set_pattern	mmio.h	61;"	d
mm_set_real	mmio.h	60;"	d
mm_set_skew	mmio.h	67;"	d
mm_set_sparse	mmio.h	57;"	d
mm_set_symmetric	mmio.h	65;"	d
mm_strdup	mmio.cc	/^char *mm_strdup(const char *s)$/;"	f	signature:(const char *s)
mm_typecode_to_str	mmio.cc	/^char  *mm_typecode_to_str(MM_typecode matcode)$/;"	f	signature:(MM_typecode matcode)
mm_typecode_to_str	mmio.h	/^char *mm_typecode_to_str(MM_typecode matcode);$/;"	p	signature:(MM_typecode matcode)
mm_write_banner	mmio.cc	/^int mm_write_banner(FILE *f, MM_typecode matcode)$/;"	f	signature:(FILE *f, MM_typecode matcode)
mm_write_banner	mmio.h	/^int mm_write_banner(FILE *f, MM_typecode matcode);$/;"	p	signature:(FILE *f, MM_typecode matcode)
mm_write_mtx_array_size	mmio.cc	/^int mm_write_mtx_array_size(FILE *f, int M, int N)$/;"	f	signature:(FILE *f, int M, int N)
mm_write_mtx_array_size	mmio.h	/^int mm_write_mtx_array_size(FILE *f, int M, int N);$/;"	p	signature:(FILE *f, int M, int N)
mm_write_mtx_crd	mmio.cc	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	f	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_write_mtx_crd	mmio.h	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	p	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_write_mtx_crd_size	mmio.cc	/^int mm_write_mtx_crd_size(FILE *f, int M, int N, int nz)$/;"	f	signature:(FILE *f, int M, int N, int nz)
mm_write_mtx_crd_size	mmio.h	/^int mm_write_mtx_crd_size(FILE *f, int M, int N, int nz);$/;"	p	signature:(FILE *f, int M, int N, int nz)
my_quickSort	utils.cc	/^void my_quickSort(int arr[], int low, int high) $/;"	f	signature:(int arr[], int low, int high)
my_swap	utils.cc	/^void my_swap(int* a, int* b)$/;"	f	signature:(int* a, int* b)
nc	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ell_struct	access:public
nc	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ellii_struct	access:public
nd	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
nd	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
nz	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_coo_struct	access:public
nz	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_csr_struct	access:public
offset	spmv.h	/^  int *offset;$/;"	m	struct:spmv_dia_struct	access:public
offset	spmv.h	/^  int *offset;$/;"	m	struct:spmv_diaii_struct	access:public
partition	utils.cc	/^int partition (int arr[], int low, int high) $/;"	f	signature:(int arr[], int low, int high)
print_arr	spmv.h	/^void print_arr(int N, char * name, double* array);$/;"	p	signature:(int N, char * name, double* array)
print_arr	utils.cc	/^void print_arr(int N, char * name, double* array)$/;"	f	signature:(int N, char * name, double* array)
quickSort	spmv.h	/^void quickSort(int arr[], int arr2[], MYTYPE arr3[], int low, int high);$/;"	p	signature:(int arr[], int arr2[], MYTYPE arr3[], int low, int high)
quickSort	utils.cc	/^void quickSort(int arr[], int arr2[], MYTYPE arr3[], int left, int right)$/;"	f	signature:(int arr[], int arr2[], MYTYPE arr3[], int left, int right)
row	spmv.h	/^  int *row, *col;$/;"	m	struct:spmv_coo_struct	access:public
rowptr	spmv.h	/^  int *rowptr, *col;$/;"	m	struct:spmv_csr_struct	access:public
sd_f	utils.cc	/^float sd_f(float *arr, int n, float mean_i)$/;"	f	signature:(float *arr, int n, float mean_i)
sd_i	utils.cc	/^float sd_i(int *arr, int n, float mean_i)$/;"	f	signature:(int *arr, int n, float mean_i)
sort	spmv.h	/^void sort(int start, int end, int *array1, MYTYPE *array2);$/;"	p	signature:(int start, int end, int *array1, MYTYPE *array2)
sort	utils.cc	/^void sort(int start, int end, int *array1, MYTYPE *array2)$/;"	f	signature:(int start, int end, int *array1, MYTYPE *array2)
sort_coo	spmv.h	/^void sort_coo(int start, int end, int *array1, int *array2, MYTYPE *array3);$/;"	p	signature:(int start, int end, int *array1, int *array2, MYTYPE *array3)
sort_coo	utils.cc	/^void sort_coo(int start, int end, int *array1, int *array2, MYTYPE *array3)$/;"	f	signature:(int start, int end, int *array1, int *array2, MYTYPE *array3)
spmv_coo	spmv.cc	/^void spmv_coo(Index *rowind, Index *colind, Value *val, int nz, Index N, Value *x, Value *y)$/;"	f	signature:(Index *rowind, Index *colind, Value *val, int nz, Index N, Value *x, Value *y)
spmv_coo	spmv.h	/^void spmv_coo(int *rowind, int *colind, MYTYPE *val, int nz, int N, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *rowind, int *colind, MYTYPE *val, int nz, int N, MYTYPE *x, MYTYPE *y)
spmv_coo_struct	spmv.h	/^typedef struct spmv_coo_struct{$/;"	s
spmv_coo_struct	spmv.h	/^}spmv_coo_struct;$/;"	t	typeref:struct:spmv_coo_struct
spmv_coo_struct::N	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::col	spmv.h	/^  int *row, *col;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::len	spmv.h	/^  int len;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::nz	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::row	spmv.h	/^  int *row, *col;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::val	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::x	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_struct::y	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
spmv_coo_wrapper	main.cc	/^void *spmv_coo_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_csr	spmv.cc	/^void spmv_csr(Index *row_ptr, Index *colind, Value *val, Index N, Value *x, Value *y)$/;"	f	signature:(Index *row_ptr, Index *colind, Value *val, Index N, Value *x, Value *y)
spmv_csr	spmv.h	/^void spmv_csr(int *row_ptr, int *colind, MYTYPE *val, int N, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *row_ptr, int *colind, MYTYPE *val, int N, MYTYPE *x, MYTYPE *y)
spmv_csr_struct	spmv.h	/^typedef struct spmv_csr_struct{$/;"	s
spmv_csr_struct	spmv.h	/^}spmv_csr_struct;$/;"	t	typeref:struct:spmv_csr_struct
spmv_csr_struct::N	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::col	spmv.h	/^  int *rowptr, *col;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::len	spmv.h	/^  int len;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::nz	spmv.h	/^  int nz, N;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::rowptr	spmv.h	/^  int *rowptr, *col;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::val	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::x	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_struct::y	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
spmv_csr_wrapper	main.cc	/^void *spmv_csr_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_custom	spmv.cc	/^void spmv_custom(Index *offset, Value *data, Index N, Index nd, Index *ptr, Value *x, Value *y)$/;"	f	signature:(Index *offset, Value *data, Index N, Index nd, Index *ptr, Value *x, Value *y)
spmv_custom	spmv.h	/^void spmv_custom(int *offset, MYTYPE *data, int N, int nd, int *ptr, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *offset, MYTYPE *data, int N, int nd, int *ptr, MYTYPE *x, MYTYPE *y)
spmv_dia	spmv.cc	/^void spmv_dia(Index *offset, Value *data, Index start_row, Index end_row, Index nd, Index N, Index stride, Value *x, Value *y)$/;"	f	signature:(Index *offset, Value *data, Index start_row, Index end_row, Index nd, Index N, Index stride, Value *x, Value *y)
spmv_dia	spmv.h	/^void spmv_dia(int *offset, MYTYPE *data, int start_row, int end_row, int nd, int N, int stride, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *offset, MYTYPE *data, int start_row, int end_row, int nd, int N, int stride, MYTYPE *x, MYTYPE *y)
spmv_dia_struct	spmv.h	/^typedef struct spmv_dia_struct{$/;"	s
spmv_dia_struct	spmv.h	/^}spmv_dia_struct;$/;"	t	typeref:struct:spmv_dia_struct
spmv_dia_struct::N	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::len	spmv.h	/^  int len;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::nd	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::offset	spmv.h	/^  int *offset;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::stride	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_struct::y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
spmv_dia_wrapper	main.cc	/^void *spmv_dia_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_diaii	spmv.cc	/^void spmv_diaii(Index *offset, Value *data, Index start_row, Index end_row, Index nd, Index N, Index stride, Value *x, Value *y)$/;"	f	signature:(Index *offset, Value *data, Index start_row, Index end_row, Index nd, Index N, Index stride, Value *x, Value *y)
spmv_diaii	spmv.h	/^void spmv_diaii(int *offset, MYTYPE *data, int start_row, int end_row, int nd, int N, int stride, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *offset, MYTYPE *data, int start_row, int end_row, int nd, int N, int stride, MYTYPE *x, MYTYPE *y)
spmv_diaii_struct	spmv.h	/^typedef struct spmv_diaii_struct{$/;"	s
spmv_diaii_struct	spmv.h	/^}spmv_diaii_struct;$/;"	t	typeref:struct:spmv_diaii_struct
spmv_diaii_struct::N	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::len	spmv.h	/^  int len;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::nd	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::offset	spmv.h	/^  int *offset;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::stride	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_struct::y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
spmv_diaii_wrapper	main.cc	/^void *spmv_diaii_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_ell	spmv.cc	/^void spmv_ell(Index *indices, Value *data, Index start_row, Index end_row, Index nc, Index N, Value *x, Value *y)$/;"	f	signature:(Index *indices, Value *data, Index start_row, Index end_row, Index nc, Index N, Value *x, Value *y)
spmv_ell	spmv.h	/^void spmv_ell(int *indices, MYTYPE *data, int start_row, int end_row, int nc, int N, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *indices, MYTYPE *data, int start_row, int end_row, int nc, int N, MYTYPE *x, MYTYPE *y)
spmv_ell_struct	spmv.h	/^typedef struct spmv_ell_struct{$/;"	s
spmv_ell_struct	spmv.h	/^}spmv_ell_struct;$/;"	t	typeref:struct:spmv_ell_struct
spmv_ell_struct::N	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::indices	spmv.h	/^  int *indices;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::nc	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_struct::y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
spmv_ell_wrapper	main.cc	/^void *spmv_ell_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_ellii	spmv.cc	/^void spmv_ellii(Index *indices, Value *data, Index start_row, Index end_row, Index nc, Index N, Value *x, Value *y)$/;"	f	signature:(Index *indices, Value *data, Index start_row, Index end_row, Index nc, Index N, Value *x, Value *y)
spmv_ellii	spmv.h	/^void spmv_ellii(int *indices, MYTYPE *data, int start_row, int end_row, int nc, int N, MYTYPE *x, MYTYPE *y);$/;"	p	signature:(int *indices, MYTYPE *data, int start_row, int end_row, int nc, int N, MYTYPE *x, MYTYPE *y)
spmv_ellii_struct	spmv.h	/^typedef struct spmv_ellii_struct{$/;"	s
spmv_ellii_struct	spmv.h	/^}spmv_ellii_struct;$/;"	t	typeref:struct:spmv_ellii_struct
spmv_ellii_struct::N	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::data	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::end_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::indices	spmv.h	/^  int *indices;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::inside_max	spmv.h	/^  int inside_max;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::nc	spmv.h	/^  int nc, N;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_struct::y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
spmv_ellii_wrapper	main.cc	/^void *spmv_ellii_wrapper(void *ptr){$/;"	f	signature:(void *ptr)
spmv_wrapper	main.cc	/^void *spmv_wrapper(void *ptr) {$/;"	f	signature:(void *ptr)
start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_dia_struct	access:public
start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_diaii_struct	access:public
start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ell_struct	access:public
start_row	spmv.h	/^  int start_row, end_row;$/;"	m	struct:spmv_ellii_struct	access:public
stride	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_dia_struct	access:public
stride	spmv.h	/^  int nd, stride, N;$/;"	m	struct:spmv_diaii_struct	access:public
sum_f	utils.cc	/^double sum_f(float *arr, int n)$/;"	f	signature:(float *arr, int n)
sum_i	utils.cc	/^long long sum_i(int *arr, int n)$/;"	f	signature:(int *arr, int n)
swap	utils.cc	/^void swap(int* a, int* b) $/;"	f	signature:(int* a, int* b)
swap_val	utils.cc	/^void swap_val(MYTYPE* a, MYTYPE* b) $/;"	f	signature:(MYTYPE* a, MYTYPE* b)
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_coo_struct	access:public
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_csr_struct	access:public
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_dia_struct	access:public
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_diaii_struct	access:public
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_ell_struct	access:public
tid	spmv.h	/^  int tid;$/;"	m	struct:spmv_ellii_struct	access:public
val	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
val	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
vr_f	utils.cc	/^float vr_f(float *arr, int n, float mean_i)$/;"	f	signature:(float *arr, int n, float mean_i)
vr_i	utils.cc	/^float vr_i(int *arr, int n, float mean_i)$/;"	f	signature:(int *arr, int n, float mean_i)
x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
x	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
x	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
x	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_dia_struct	access:public
y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_diaii_struct	access:public
y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ell_struct	access:public
y	spmv.h	/^  MYTYPE *data, *x, *y;$/;"	m	struct:spmv_ellii_struct	access:public
y	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_coo_struct	access:public
y	spmv.h	/^  MYTYPE *val, *x, *y;$/;"	m	struct:spmv_csr_struct	access:public
zero_arr	spmv.h	/^void zero_arr(int N, MYTYPE* a);$/;"	p	signature:(int N, MYTYPE* a)
zero_arr	utils.cc	/^void zero_arr(int N, MYTYPE* a)$/;"	f	signature:(int N, MYTYPE* a)
