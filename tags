!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#:sp	sparse_matrix_converter/interface.lisp	/^(defpackage #:sp$/;"	f
ABS	matrix_generator/create_rand.c	/^#  undef ABS$/;"	d	file:
ABS	matrix_generator/create_rand.c	/^#define ABS(/;"	d	file:
ABS	sparse_matrix_converter/bcoo_matrix.c	/^#  undef ABS$/;"	d	file:
ABS	sparse_matrix_converter/bcoo_matrix.c	/^#define ABS(/;"	d	file:
ARCHIVER	bebop_util/Makefile	/^ARCHIVER = ar$/;"	m
ARCHIVER	matrix_generator/Makefile	/^ARCHIVER = ar$/;"	m
ARCHIVER	sparse_matrix_converter/Makefile	/^ARCHIVER = ar$/;"	m
ARFLAGS	bebop_util/Makefile	/^ARFLAGS = r$/;"	m
ARFLAGS	matrix_generator/Makefile	/^ARFLAGS = r$/;"	m
ARFLAGS	sparse_matrix_converter/Makefile	/^ARFLAGS = r$/;"	m
ASSIGN	bebop_util/sort_joint_arrays.c	/^#  undef ASSIGN$/;"	d	file:
ASSIGN	bebop_util/sort_joint_arrays.c	/^#define ASSIGN(/;"	d	file:
ASSIGN	sparse_matrix_converter/bcoo_matrix.c	/^#  undef ASSIGN$/;"	d	file:
ASSIGN	sparse_matrix_converter/bcoo_matrix.c	/^#define ASSIGN(/;"	d	file:
ASSIGN	sparse_matrix_converter/coo_matrix.c	/^#  undef ASSIGN$/;"	d	file:
ASSIGN	sparse_matrix_converter/coo_matrix.c	/^#define ASSIGN(/;"	d	file:
BCOO	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
BCOO_ARRAY_INIT_LENGTH	sparse_matrix_converter/bcoo_matrix.c	/^const int BCOO_ARRAY_INIT_LENGTH = 16;$/;"	v
BCSR	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
BENCHMARK_OBJ	spmvbench/Makefile	/^BENCHMARK_OBJ = avltree.o block_smvm_code.o fill_with_random_block.o \\$/;"	m
BENCHMARK_PARAMS	hpcc_spmv_benchmark/benchmark_params.h	/^#define BENCHMARK_PARAMS$/;"	d
BLOCK_SMVM_MAIN	spmvbench/block_smvm_code.c	/^#define BLOCK_SMVM_MAIN /;"	d	file:
CC	bebop_util/Makefile	/^CC = gcc$/;"	m
CC	hpcc_spmv_benchmark/Makefile	/^CC         = gcc$/;"	m
CC	matrix_generator/Makefile	/^CC ?= gcc$/;"	m
CC	sparse_matrix_converter/Makefile	/^CC = gcc$/;"	m
CFLAGS	bebop_util/Makefile	/^CFLAGS = -fPIC -O3 -Wall -std=c99 $/;"	m
CFLAGS	hpcc_spmv_benchmark/Makefile	/^CFLAGS     = -O3 -Wall -std=c99 -I..\/bebop_util -I..\/sparse_matrix_converter -I..\/matrix_generator -I..\/spmvbench$/;"	m
CFLAGS	matrix_generator/Makefile	/^CFLAGS = -O3 -Wall -std=c99 $/;"	m
CFLAGS	sparse_matrix_converter/Makefile	/^CFLAGS = -fPIC -O3 -Wall -std=c99 $/;"	m
CFLAGS	spmvbench/Makefile	/^CFLAGS = $(CCFLAGS) $/;"	m
COMPLEX	bebop_util/enumerations.h	/^  REAL, COMPLEX, PATTERN$/;"	e	enum:value_type_t
CONFIG_H	spmvbench/Makefile	/^CONFIG_H      = config.h$/;"	m
COO	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
CPPFLAGS	bebop_util/Makefile	/^CPPFLAGS = -I.$/;"	m
CPPFLAGS	matrix_generator/Makefile	/^CPPFLAGS = -I..\/sparse_matrix_converter -I..\/bebop_util -I.$/;"	m
CPPFLAGS	sparse_matrix_converter/Makefile	/^CPPFLAGS = -I..\/bebop_util -I. $/;"	m
CPPFLAGS	spmvbench/Makefile	/^CPPFLAGS = -DSPMV_STANDALONE -I..\/matrix_generator -I..\/bebop_util -I..\/sparse_matrix_converter$/;"	m
CSC	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
CSR	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
DICTCOUNT_T_MAX	matrix_generator/dict.h	/^#define DICTCOUNT_T_MAX /;"	d
DICT_DEPTH_MAX	matrix_generator/dict.c	/^#define DICT_DEPTH_MAX /;"	d	file:
DICT_H	matrix_generator/dict.h	/^#define DICT_H$/;"	d
DICT_IMPLEMENTATION	matrix_generator/dict.c	/^#define DICT_IMPLEMENTATION$/;"	d	file:
DMALLOC_PNT	bebop_util/get_options.c	/^#  define DMALLOC_PNT /;"	d	file:
DMALLOC_SIZE	bebop_util/get_options.c	/^#  define DMALLOC_SIZE /;"	d	file:
DMALLOC_VERIFY_ERROR	bebop_util/get_options.c	/^#  define DMALLOC_VERIFY_ERROR	/;"	d	file:
DMALLOC_VERIFY_NOERROR	bebop_util/get_options.c	/^#  define DMALLOC_VERIFY_NOERROR /;"	d	file:
DOUBLEARG	bebop_util/get_options.h	/^typedef enum { NULLARG, INTARG, DOUBLEARG, STRINGARG } arg_type_t;$/;"	e	enum:__anon5
EXEOBJ	sparse_matrix_converter/Makefile	/^EXEOBJ = main.o  $/;"	m
EXEOUT	sparse_matrix_converter/Makefile	/^EXEOUT = sparse_matrix_converter$/;"	m
FREE_DICT	matrix_generator/main.c	/^#define FREE_DICT(/;"	d	file:
GETTIMEOFDAY_IN_SYS_TIME_H	bebop_util/config.h	/^#define GETTIMEOFDAY_IN_SYS_TIME_H /;"	d
GETTIMEOFDAY_IN_SYS_TIME_H	matrix_generator/config.h	/^#define GETTIMEOFDAY_IN_SYS_TIME_H /;"	d
GETTIMEOFDAY_IN_SYS_TIME_H	spmvbench/config.h	/^#  define GETTIMEOFDAY_IN_SYS_TIME_H /;"	d
HARWELL_BOEING	sparse_matrix_converter/sparse_matrix.h	/^  HARWELL_BOEING, MATRIX_MARKET, MATLAB$/;"	e	enum:sparse_matrix_file_format_t
HAVE_COMPLEX_H	bebop_util/config.h	/^#define HAVE_COMPLEX_H /;"	d
HAVE_COMPLEX_H	matrix_generator/config.h	/^#define HAVE_COMPLEX_H /;"	d
HAVE_ERRNO_H	bebop_util/config.h	/^#define HAVE_ERRNO_H /;"	d
HAVE_ERRNO_H	matrix_generator/config.h	/^#define HAVE_ERRNO_H /;"	d
HAVE_INTTYPES_H	bebop_util/config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	matrix_generator/config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_LIBGEN_H	bebop_util/config.h	/^#define HAVE_LIBGEN_H /;"	d
HAVE_MALLOC	bebop_util/config.h	/^#define HAVE_MALLOC /;"	d
HAVE_MALLOC	matrix_generator/config.h	/^#define HAVE_MALLOC /;"	d
HAVE_MATH_H	bebop_util/config.h	/^#define HAVE_MATH_H /;"	d
HAVE_MATH_H	matrix_generator/config.h	/^#define HAVE_MATH_H /;"	d
HAVE_MEMORY_H	bebop_util/config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	matrix_generator/config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_REALLOC	bebop_util/config.h	/^#define HAVE_REALLOC /;"	d
HAVE_REALLOC	matrix_generator/config.h	/^#define HAVE_REALLOC /;"	d
HAVE_STDDEF_H	bebop_util/config.h	/^#define HAVE_STDDEF_H /;"	d
HAVE_STDDEF_H	matrix_generator/config.h	/^#define HAVE_STDDEF_H /;"	d
HAVE_STDINT_H	bebop_util/config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	matrix_generator/config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDIO_H	bebop_util/config.h	/^#define HAVE_STDIO_H /;"	d
HAVE_STDIO_H	matrix_generator/config.h	/^#define HAVE_STDIO_H /;"	d
HAVE_STDLIB_H	bebop_util/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	matrix_generator/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	spmvbench/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRINGS_H	bebop_util/config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	matrix_generator/config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	bebop_util/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	matrix_generator/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	spmvbench/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_STAT_H	bebop_util/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	matrix_generator/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	spmvbench/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TYPES_H	bebop_util/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	matrix_generator/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	spmvbench/config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_UNISTD_H	bebop_util/config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	matrix_generator/config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	spmvbench/config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE__COMPLEX	bebop_util/config.h	/^#define HAVE__COMPLEX /;"	d
HAVE__COMPLEX	matrix_generator/config.h	/^#define HAVE__COMPLEX /;"	d
HERMITIAN	bebop_util/enumerations.h	/^  UNSYMMETRIC = 0, SYMMETRIC, SKEW_SYMMETRIC, HERMITIAN $/;"	e	enum:symmetry_type_t
II	sparse_matrix_converter/bcoo_matrix.h	/^  int *II;$/;"	m	struct:bcoo_matrix_t	access:public
II	sparse_matrix_converter/coo_matrix.h	/^  int* II;$/;"	m	struct:coo_matrix_t	access:public
INCLUDE	hpcc_spmv_benchmark/Makefile	/^INCLUDE    = $/;"	m
INSTALLDIR	hpcc_spmv_benchmark/Makefile	/^INSTALLDIR = .\/bin$/;"	m
INTARG	bebop_util/get_options.h	/^typedef enum { NULLARG, INTARG, DOUBLEARG, STRINGARG } arg_type_t;$/;"	e	enum:__anon5
INVOKER_OBJ	spmvbench/Makefile	/^INVOKER_OBJ = hpcc.o smvm_memory_hierarchy_traits.o smvm_invoker.o \\$/;"	m
IOHBTerminate	sparse_matrix_converter/iohb.c	/^void IOHBTerminate(char* message) $/;"	f	signature:(char* message)
IOHBTerminate	sparse_matrix_converter/iohb.c	/^void IOHBTerminate(char* message);$/;"	p	file:	signature:(char* message)
IOHBTerminate	sparse_matrix_converter/iohb.h	/^void IOHBTerminate(char* message);$/;"	p	signature:(char* message)
IOHB_H	sparse_matrix_converter/iohb.h	/^#define IOHB_H$/;"	d
JAD	sparse_matrix_converter/sparse_matrix.h	/^  COO, CSC, CSR, BCOO, BCSR, JAD$/;"	e	enum:sparse_matrix_storage_format_t
JJ	sparse_matrix_converter/bcoo_matrix.h	/^  int *JJ;$/;"	m	struct:bcoo_matrix_t	access:public
JJ	sparse_matrix_converter/coo_matrix.h	/^  int* JJ;$/;"	m	struct:coo_matrix_t	access:public
LD	hpcc_spmv_benchmark/Makefile	/^LD         = \/usr\/bin\/ld$/;"	m
LDFLAGS	hpcc_spmv_benchmark/Makefile	/^LDFLAGS	   = -L..\/bebop_util -L..\/sparse_matrix_converter -L..\/matrix_generator -L..\/spmvbench$/;"	m
LIBDIR	hpcc_spmv_benchmark/Makefile	/^LIBDIR     = $/;"	m
LIBOBJ	matrix_generator/Makefile	/^LIBOBJ = create_rand.o stencil.o$/;"	m
LIBOBJ	spmvbench/Makefile	/^LIBOBJ = $(INVOKER_OBJ) $(BENCHMARK_OBJ) $(TIMING_OBJ)$/;"	m
LIBS	bebop_util/Makefile	/^LIBS = $/;"	m
LIBS	hpcc_spmv_benchmark/Makefile	/^LIBS       = -lm -l_bsr_spmv -l_matrix_generators -lsparse_matrix_converter -lbebop_util $/;"	m
LIBS	matrix_generator/Makefile	/^LIBS = -lm -L..\/sparse_matrix_converter -lsparse_matrix_converter -L..\/bebop_util -lbebop_util$/;"	m
LIBS	sparse_matrix_converter/Makefile	/^LIBS = -L..\/bebop_util -lbebop_util -lm$/;"	m
LIBS	spmvbench/Makefile	/^LIBS = -L..\/matrix_generator -l_matrix_generators -L..\/bebop_util -lbebop_util \\$/;"	m
LIBSMCOBJ	sparse_matrix_converter/Makefile	/^LIBSMCOBJ = bcoo_matrix.o bcsr_matrix.o coo_matrix.o coord_elem.o \\$/;"	m
LIBSMC_DYNAMIC	sparse_matrix_converter/Makefile	/^LIBSMC_DYNAMIC = libsparse_matrix_converter.dylib$/;"	m
LIBSMC_STATIC	sparse_matrix_converter/Makefile	/^LIBSMC_STATIC = libsparse_matrix_converter.a$/;"	m
LIBUTILOBJ	bebop_util/Makefile	/^LIBUTILOBJ = __complex.o avltree_intpair.o get_options.o merge_sort.o \\$/;"	m
LIBUTIL_DYNAMIC	bebop_util/Makefile	/^LIBUTIL_DYNAMIC = libbebop_util.dylib$/;"	m
LIBUTIL_STATIC	bebop_util/Makefile	/^LIBUTIL_STATIC = libbebop_util.a$/;"	m
LINKER	bebop_util/Makefile	/^LINKER = gcc$/;"	m
LINKER	matrix_generator/Makefile	/^LINKER = gcc$/;"	m
LINKER	sparse_matrix_converter/Makefile	/^LINKER = gcc$/;"	m
LOWER_MASK	bebop_util/mt19937ar.c	/^#define LOWER_MASK /;"	d	file:
LOWER_TRIANGLE	bebop_util/enumerations.h	/^  UPPER_TRIANGLE, LOWER_TRIANGLE$/;"	e	enum:symmetric_storage_location_t
M	bebop_util/mt19937ar.c	/^#define M /;"	d	file:
MATLAB	sparse_matrix_converter/sparse_matrix.h	/^  HARWELL_BOEING, MATRIX_MARKET, MATLAB$/;"	e	enum:sparse_matrix_file_format_t
MATRIX_A	bebop_util/mt19937ar.c	/^#define MATRIX_A /;"	d	file:
MATRIX_MARKET	sparse_matrix_converter/sparse_matrix.h	/^  HARWELL_BOEING, MATRIX_MARKET, MATLAB$/;"	e	enum:sparse_matrix_file_format_t
MAX	bebop_util/smvm_util.h	/^#  define MAX(/;"	d
MAX_ETIME	spmvbench/timing.c	/^#define MAX_ETIME /;"	d	file:
MIN	bebop_util/smvm_util.h	/^#  define MIN(/;"	d
MM_ARRAY_STR	sparse_matrix_converter/mmio.h	/^#define MM_ARRAY_STR	/;"	d
MM_COMPLEX_STR	sparse_matrix_converter/mmio.h	/^#define MM_COMPLEX_STR	/;"	d
MM_COORDINATE_STR	sparse_matrix_converter/mmio.h	/^#define MM_COORDINATE_STR /;"	d
MM_COULD_NOT_READ_FILE	sparse_matrix_converter/mmio.h	/^#define MM_COULD_NOT_READ_FILE	/;"	d
MM_COULD_NOT_WRITE_FILE	sparse_matrix_converter/mmio.h	/^#define MM_COULD_NOT_WRITE_FILE	/;"	d
MM_DENSE_STR	sparse_matrix_converter/mmio.h	/^#define MM_DENSE_STR	/;"	d
MM_GENERAL_STR	sparse_matrix_converter/mmio.h	/^#define MM_GENERAL_STR /;"	d
MM_HERM_STR	sparse_matrix_converter/mmio.h	/^#define MM_HERM_STR	/;"	d
MM_INT_STR	sparse_matrix_converter/mmio.h	/^#define MM_INT_STR	/;"	d
MM_IO_H	sparse_matrix_converter/mmio.h	/^#define MM_IO_H$/;"	d
MM_LINE_TOO_LONG	sparse_matrix_converter/mmio.h	/^#define MM_LINE_TOO_LONG	/;"	d
MM_MAX_LINE_LENGTH	sparse_matrix_converter/mmio.h	/^#define MM_MAX_LINE_LENGTH /;"	d
MM_MAX_TOKEN_LENGTH	sparse_matrix_converter/mmio.h	/^#define MM_MAX_TOKEN_LENGTH /;"	d
MM_MTX_STR	sparse_matrix_converter/mmio.h	/^#define MM_MTX_STR	/;"	d
MM_NOT_MTX	sparse_matrix_converter/mmio.h	/^#define MM_NOT_MTX	/;"	d
MM_NO_HEADER	sparse_matrix_converter/mmio.h	/^#define MM_NO_HEADER	/;"	d
MM_PATTERN_STR	sparse_matrix_converter/mmio.h	/^#define MM_PATTERN_STR /;"	d
MM_PREMATURE_EOF	sparse_matrix_converter/mmio.h	/^#define MM_PREMATURE_EOF	/;"	d
MM_REAL_STR	sparse_matrix_converter/mmio.h	/^#define MM_REAL_STR	/;"	d
MM_SKEW_STR	sparse_matrix_converter/mmio.h	/^#define MM_SKEW_STR	/;"	d
MM_SPARSE_STR	sparse_matrix_converter/mmio.h	/^#define MM_SPARSE_STR	/;"	d
MM_SYMM_STR	sparse_matrix_converter/mmio.h	/^#define MM_SYMM_STR	/;"	d
MM_UNSUPPORTED_TYPE	sparse_matrix_converter/mmio.h	/^#define MM_UNSUPPORTED_TYPE	/;"	d
MatrixMarketBanner	sparse_matrix_converter/mmio.h	/^#define MatrixMarketBanner /;"	d
N	bebop_util/mt19937ar.c	/^#define N /;"	d	file:
NULLARG	bebop_util/get_options.h	/^typedef enum { NULLARG, INTARG, DOUBLEARG, STRINGARG } arg_type_t;$/;"	e	enum:__anon5
OBJ	hpcc_spmv_benchmark/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
ONE	bebop_util/enumerations.h	/^index_base_t {ZERO = 0, ONE = 1};$/;"	e	enum:index_base_t
PATTERN	bebop_util/enumerations.h	/^  REAL, COMPLEX, PATTERN$/;"	e	enum:value_type_t
POSIX_GETTIMEOFDAY	spmvbench/config.h	/^#define POSIX_GETTIMEOFDAY /;"	d
PROG	hpcc_spmv_benchmark/Makefile	/^PROG       = hpcc_spmv_benchmark$/;"	m
ParseIfmt	sparse_matrix_converter/iohb.c	/^int ParseIfmt(char* fmt, int* perline, int* width)$/;"	f	signature:(char* fmt, int* perline, int* width)
ParseIfmt	sparse_matrix_converter/iohb.h	/^int ParseIfmt(char* fmt, int* perline, int* width);$/;"	p	signature:(char* fmt, int* perline, int* width)
ParseRfmt	sparse_matrix_converter/iohb.c	/^int ParseRfmt(char* fmt, int* perline, int* width, int* prec, int* flag)$/;"	f	signature:(char* fmt, int* perline, int* width, int* prec, int* flag)
ParseRfmt	sparse_matrix_converter/iohb.h	/^int ParseRfmt(char* fmt, int* perline, int* width, int* prec, int* flag);$/;"	p	signature:(char* fmt, int* perline, int* width, int* prec, int* flag)
Py	sparse_matrix_converter/jad_matrix.h	/^  double* Py;$/;"	m	struct:jad_matrix_t	access:public
RANLIB	bebop_util/Makefile	/^RANLIB = echo$/;"	m
RANLIB	matrix_generator/Makefile	/^RANLIB = echo$/;"	m
RANLIB	sparse_matrix_converter/Makefile	/^RANLIB = echo$/;"	m
REAL	bebop_util/enumerations.h	/^  REAL, COMPLEX, PATTERN$/;"	e	enum:value_type_t
RM	bebop_util/Makefile	/^RM = rm -f$/;"	m
RM	matrix_generator/Makefile	/^RM = rm -f$/;"	m
RM	sparse_matrix_converter/Makefile	/^RM = rm -f$/;"	m
RowStr	sparse_matrix_converter/jad_matrix.c	/^} RowStr;$/;"	t	typeref:struct:row_len_str	file:
SKEW_SYMMETRIC	bebop_util/enumerations.h	/^  UNSYMMETRIC = 0, SYMMETRIC, SKEW_SYMMETRIC, HERMITIAN $/;"	e	enum:symmetry_type_t
SMVM_FP	spmvbench/block_smvm_code.h	/^typedef void (*SMVM_FP)(const int start_row, const int end_row, const int bm,$/;"	t
SMVM_REGISTER_BLOCKED	spmvbench/smvm_timing_run.c	/^#  define SMVM_REGISTER_BLOCKED /;"	d	file:
SMVM_REGISTER_BLOCKED	spmvbench/smvm_timing_run.c	/^#  undef SMVM_REGISTER_BLOCKED$/;"	d	file:
SMVM_REGISTER_BLOCKED	spmvbench/smvm_timing_run.c	/^#define SMVM_REGISTER_BLOCKED /;"	d	file:
SMVM_REGISTER_BLOCKED	spmvbench/smvm_timing_run.c	/^#undef SMVM_REGISTER_BLOCKED$/;"	d	file:
SMVM_benchmark_results	spmvbench/smvm_benchmark_results.h	/^struct SMVM_benchmark_results$/;"	s
SMVM_benchmark_results::aggregate_fem_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double aggregate_fem_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::best_block_size	spmvbench/smvm_benchmark_results.h	/^  int best_block_size;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::best_c	spmvbench/smvm_benchmark_results.h	/^  int best_c;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::best_fill	spmvbench/smvm_benchmark_results.h	/^  double best_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::best_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double best_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::best_r	spmvbench/smvm_benchmark_results.h	/^  int best_r;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::errcode	spmvbench/smvm_benchmark_results.h	/^  int errcode;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::failure	spmvbench/smvm_benchmark_results.h	/^  int failure;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::n	spmvbench/smvm_benchmark_results.h	/^  int n;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::one_by_one_fill	spmvbench/smvm_benchmark_results.h	/^  double one_by_one_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::one_by_one_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double one_by_one_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::worst_block_size	spmvbench/smvm_benchmark_results.h	/^  int worst_block_size;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::worst_c	spmvbench/smvm_benchmark_results.h	/^  int worst_c;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::worst_fill	spmvbench/smvm_benchmark_results.h	/^  double worst_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::worst_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double worst_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results::worst_r	spmvbench/smvm_benchmark_results.h	/^  int worst_r;$/;"	m	struct:SMVM_benchmark_results	access:public
SMVM_benchmark_results_array	spmvbench/smvm_benchmark_results.h	/^struct SMVM_benchmark_results_array$/;"	s
SMVM_benchmark_results_array::array	spmvbench/smvm_benchmark_results.h	/^  struct SMVM_benchmark_results **array;$/;"	m	struct:SMVM_benchmark_results_array	typeref:struct:SMVM_benchmark_results_array::SMVM_benchmark_results	access:public
SMVM_benchmark_results_array::curlen	spmvbench/smvm_benchmark_results.h	/^  int curlen;$/;"	m	struct:SMVM_benchmark_results_array	access:public
SMVM_benchmark_results_array::maxlen	spmvbench/smvm_benchmark_results.h	/^  int maxlen;$/;"	m	struct:SMVM_benchmark_results_array	access:public
SMVM_invoker_cmdline_params	spmvbench/main.c	/^SMVM_invoker_cmdline_params$/;"	s	file:
SMVM_invoker_cmdline_params::b_run_dense	spmvbench/main.c	/^  int b_run_dense;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
SMVM_invoker_cmdline_params::b_run_sparse	spmvbench/main.c	/^  int b_run_sparse;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
SMVM_invoker_cmdline_params::dataoutfile	spmvbench/main.c	/^  char* dataoutfile;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
SMVM_invoker_cmdline_params::max_mem_KB	spmvbench/main.c	/^  int max_mem_KB;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
SMVM_invoker_cmdline_params::num_trials	spmvbench/main.c	/^  int num_trials;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
SMVM_parameters	spmvbench/smvm_benchmark.h	/^struct SMVM_parameters$/;"	s
SMVM_parameters::c	spmvbench/smvm_benchmark.h	/^  int   c; $/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::dataoutfile	spmvbench/smvm_benchmark.h	/^  FILE* dataoutfile;$/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::interval_fracs	spmvbench/smvm_benchmark.h	/^  double *interval_fracs;$/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::m	spmvbench/smvm_benchmark.h	/^  int   m; $/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::n	spmvbench/smvm_benchmark.h	/^  int   n; $/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::num_trials	spmvbench/smvm_benchmark.h	/^  int   num_trials;    $/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::percent_fill	spmvbench/smvm_benchmark.h	/^  double percent_fill; $/;"	m	struct:SMVM_parameters	access:public
SMVM_parameters::r	spmvbench/smvm_benchmark.h	/^  int   r; $/;"	m	struct:SMVM_parameters	access:public
SMVM_timing_results	spmvbench/smvm_timing_results.h	/^struct SMVM_timing_results$/;"	s
SMVM_timing_results::c	spmvbench/smvm_timing_results.h	/^  int c;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::m	spmvbench/smvm_timing_results.h	/^  int m;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::mflops	spmvbench/smvm_timing_results.h	/^  double mflops; $/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::n	spmvbench/smvm_timing_results.h	/^  int n;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::nnzb	spmvbench/smvm_timing_results.h	/^  int nnzb;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::num_loads	spmvbench/smvm_timing_results.h	/^  int num_loads;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::num_stores	spmvbench/smvm_timing_results.h	/^  int num_stores;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::num_trials	spmvbench/smvm_timing_results.h	/^  int num_trials;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::r	spmvbench/smvm_timing_results.h	/^  int r;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::t_max	spmvbench/smvm_timing_results.h	/^  double t_max;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::t_median	spmvbench/smvm_timing_results.h	/^  double t_median;$/;"	m	struct:SMVM_timing_results	access:public
SMVM_timing_results::t_min	spmvbench/smvm_timing_results.h	/^  double t_min;$/;"	m	struct:SMVM_timing_results	access:public
SPARSE_VECTOR_INIT_LENGTH	sparse_matrix_converter/sparse_vector.c	/^const int SPARSE_VECTOR_INIT_LENGTH = 16;$/;"	v
SPMV_DEBUG_LEVEL	bebop_util/smvm_util.c	/^int SPMV_DEBUG_LEVEL = 0;$/;"	v
SPVEC_INIT_LENGTH	sparse_matrix_converter/spvec.c	/^const int SPVEC_INIT_LENGTH = 4;$/;"	v
SQUARE_P	sparse_matrix_converter/csc_matrix.h	/^#define SQUARE_P(/;"	d
SQUARE_P	sparse_matrix_converter/csr_matrix.h	/^#define SQUARE_P(/;"	d
SRC	hpcc_spmv_benchmark/Makefile	/^SRC        = benchmark_subset.c hpcc_spmv_benchmark.c main.c$/;"	m
STDC_HEADERS	bebop_util/config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	matrix_generator/config.h	/^#define STDC_HEADERS /;"	d
STRINGARG	bebop_util/get_options.h	/^typedef enum { NULLARG, INTARG, DOUBLEARG, STRINGARG } arg_type_t;$/;"	e	enum:__anon5
SWAP	bebop_util/sort_joint_arrays.c	/^#  undef SWAP$/;"	d	file:
SWAP	bebop_util/sort_joint_arrays.c	/^#define SWAP(/;"	d	file:
SWAP	sparse_matrix_converter/bcoo_matrix.c	/^#  undef SWAP$/;"	d	file:
SWAP	sparse_matrix_converter/bcoo_matrix.c	/^#define SWAP(/;"	d	file:
SWAP	sparse_matrix_converter/coo_matrix.c	/^#  undef SWAP$/;"	d	file:
SWAP	sparse_matrix_converter/coo_matrix.c	/^#define SWAP(/;"	d	file:
SWAP_INTS	sparse_matrix_converter/bcoo_matrix.c	/^#  undef SWAP_INTS$/;"	d	file:
SWAP_INTS	sparse_matrix_converter/bcoo_matrix.c	/^#define SWAP_INTS(/;"	d	file:
SWAP_INTS	sparse_matrix_converter/coo_matrix.c	/^#  undef SWAP_INTS$/;"	d	file:
SWAP_INTS	sparse_matrix_converter/coo_matrix.c	/^#define SWAP_INTS(/;"	d	file:
SYMMETRIC	bebop_util/enumerations.h	/^  UNSYMMETRIC = 0, SYMMETRIC, SKEW_SYMMETRIC, HERMITIAN $/;"	e	enum:symmetry_type_t
TESTEREXE	matrix_generator/Makefile	/^TESTEREXE = matrix_generator_tester$/;"	m
TESTEROBJ	matrix_generator/Makefile	/^TESTEROBJ = main.o dict.o$/;"	m
THELIB	matrix_generator/Makefile	/^THELIB = lib_matrix_generators.a$/;"	m
THELIB	spmvbench/Makefile	/^THELIB = lib_bsr_spmv.a$/;"	m
TIMING_HEADER	spmvbench/Makefile	/^TIMING_HEADER = timing.h$/;"	m
TIMING_LOOP	spmvbench/timing.h	/^  #define TIMING_LOOP(/;"	d
TIMING_OBJ	spmvbench/Makefile	/^TIMING_OBJ = timing.o$/;"	m
UNSYMMETRIC	bebop_util/enumerations.h	/^  UNSYMMETRIC = 0, SYMMETRIC, SKEW_SYMMETRIC, HERMITIAN $/;"	e	enum:symmetry_type_t
UPPER_MASK	bebop_util/mt19937ar.c	/^#define UPPER_MASK /;"	d	file:
UPPER_TRIANGLE	bebop_util/enumerations.h	/^  UPPER_TRIANGLE, LOWER_TRIANGLE$/;"	e	enum:symmetric_storage_location_t
USETIMERS	spmvbench/config.h	/^#define USETIMERS /;"	d
VOIDAREF	bebop_util/merge_sort.c	/^#define VOIDAREF(/;"	d	file:
VOIDAREF	bebop_util/sort_joint_arrays.c	/^#  undef VOIDAREF$/;"	d	file:
VOIDAREF	bebop_util/sort_joint_arrays.c	/^#define VOIDAREF(/;"	d	file:
VOIDAREF	bebop_util/tests/test_sort_joint_arrays.c	/^#define VOIDAREF(/;"	d	file:
VOIDAREF	sparse_matrix_converter/bcoo_matrix.c	/^#  undef VOIDAREF$/;"	d	file:
VOIDAREF	sparse_matrix_converter/bcoo_matrix.c	/^#define VOIDAREF(/;"	d	file:
VOIDAREF	sparse_matrix_converter/coo_matrix.c	/^#  undef VOIDAREF$/;"	d	file:
VOIDAREF	sparse_matrix_converter/coo_matrix.c	/^#define VOIDAREF(/;"	d	file:
VOIDAREF	sparse_matrix_converter/csc_matrix.c	/^#  undef VOIDAREF$/;"	d	file:
VOIDAREF	sparse_matrix_converter/csc_matrix.c	/^#define VOIDAREF(/;"	d	file:
WITH_DEBUG	bebop_util/smvm_util.h	/^#define WITH_DEBUG(/;"	d
WITH_DEBUG2	bebop_util/smvm_util.h	/^#define WITH_DEBUG2(/;"	d
WITH_DEBUG3	bebop_util/smvm_util.h	/^#define WITH_DEBUG3(/;"	d
WITH_DEBUG4	bebop_util/smvm_util.h	/^#define WITH_DEBUG4(/;"	d
WITH_DMALLOC	bebop_util/get_options.c	/^#  define WITH_DMALLOC(/;"	d	file:
WITH_WARN	bebop_util/smvm_util.h	/^#  define WITH_WARN(/;"	d
ZERO	bebop_util/enumerations.h	/^index_base_t {ZERO = 0, ONE = 1};$/;"	e	enum:index_base_t
_SP_base	sparse_matrix_converter/iohb.c	/^#define _SP_base /;"	d	file:
__WITH_DEBUG2	spmvbench/smvm_timing_run.c	/^#define __WITH_DEBUG2(/;"	d	file:
__anon2::actual_runtime	hpcc_spmv_benchmark/benchmark_params.h	/^    int actual_runtime;$/;"	m	struct:__anon2	access:public
__anon2::blocked_mflop_max	hpcc_spmv_benchmark/benchmark_params.h	/^    double blocked_mflop_max;$/;"	m	struct:__anon2	access:public
__anon2::blocked_mflop_med	hpcc_spmv_benchmark/benchmark_params.h	/^    double blocked_mflop_med;$/;"	m	struct:__anon2	access:public
__anon2::cmaxlen	hpcc_spmv_benchmark/benchmark_params.h	/^    int cmaxlen;$/;"	m	struct:__anon2	access:public
__anon2::col_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int *col_blockdims;$/;"	m	struct:__anon2	access:public
__anon2::est_runtime	hpcc_spmv_benchmark/benchmark_params.h	/^    int est_runtime;$/;"	m	struct:__anon2	access:public
__anon2::interval_fracs	hpcc_spmv_benchmark/benchmark_params.h	/^    double *interval_fracs;$/;"	m	struct:__anon2	access:public
__anon2::maxdim	hpcc_spmv_benchmark/benchmark_params.h	/^    int maxdim;$/;"	m	struct:__anon2	access:public
__anon2::memmax	hpcc_spmv_benchmark/benchmark_params.h	/^    int memmax;$/;"	m	struct:__anon2	access:public
__anon2::mindim	hpcc_spmv_benchmark/benchmark_params.h	/^    int mindim;$/;"	m	struct:__anon2	access:public
__anon2::n_col_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int n_col_blockdims;$/;"	m	struct:__anon2	access:public
__anon2::n_row_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int n_row_blockdims;$/;"	m	struct:__anon2	access:public
__anon2::nnz_per_row_max	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_max;$/;"	m	struct:__anon2	access:public
__anon2::nnz_per_row_min	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_min;$/;"	m	struct:__anon2	access:public
__anon2::nnz_per_row_to_run	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_to_run;$/;"	m	struct:__anon2	access:public
__anon2::nnz_row_vals	hpcc_spmv_benchmark/benchmark_params.h	/^    int *nnz_row_vals;$/;"	m	struct:__anon2	access:public
__anon2::numdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int numdims;$/;"	m	struct:__anon2	access:public
__anon2::outfilebase	hpcc_spmv_benchmark/benchmark_params.h	/^    char *outfilebase;$/;"	m	struct:__anon2	access:public
__anon2::rmaxlen	hpcc_spmv_benchmark/benchmark_params.h	/^    int rmaxlen;$/;"	m	struct:__anon2	access:public
__anon2::row_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int *row_blockdims;$/;"	m	struct:__anon2	access:public
__anon2::runall	hpcc_spmv_benchmark/benchmark_params.h	/^    int runall;$/;"	m	struct:__anon2	access:public
__anon2::threshold_dims	hpcc_spmv_benchmark/benchmark_params.h	/^    int **threshold_dims;$/;"	m	struct:__anon2	access:public
__anon2::tmax	hpcc_spmv_benchmark/benchmark_params.h	/^    int tmax;$/;"	m	struct:__anon2	access:public
__anon2::unblocked_mflop_max	hpcc_spmv_benchmark/benchmark_params.h	/^    double unblocked_mflop_max;$/;"	m	struct:__anon2	access:public
__anon2::unblocked_mflop_med	hpcc_spmv_benchmark/benchmark_params.h	/^    double unblocked_mflop_med;$/;"	m	struct:__anon2	access:public
__anon4::imag	bebop_util/__complex.h	/^  double imag;$/;"	m	struct:__anon4	access:public
__anon4::real	bebop_util/__complex.h	/^  double real;$/;"	m	struct:__anon4	access:public
__complex_h	bebop_util/__complex.h	/^#define __complex_h$/;"	d
__create_random_matrix	matrix_generator/create_rand.c	/^__create_random_matrix (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb)
__create_random_matrix_banded	matrix_generator/create_rand.c	/^__create_random_matrix_banded (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, const int lower_block_bandwidth, const int upper_block_bandwidth)
__create_random_matrix_banded_by_nnz_per_row	matrix_generator/create_rand.c	/^__create_random_matrix_banded_by_nnz_per_row (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth)
__create_random_matrix_banded_by_nnz_per_row2	matrix_generator/create_rand.c	/^__create_random_matrix_banded_by_nnz_per_row2 (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth)
__create_random_matrix_banded_by_nnz_per_row__nearly_dense_rows	matrix_generator/create_rand.c	/^__create_random_matrix_banded_by_nnz_per_row__nearly_dense_rows (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth)
__create_random_matrix_banded_by_statistics	matrix_generator/create_rand.c	/^__create_random_matrix_banded_by_statistics (const int bm, const int bn, $/;"	f	file:	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const double *interval_fracs)
__sort_joint_arrays_quicksort	bebop_util/sort_joint_arrays.c	/^__sort_joint_arrays_quicksort (void* a1, void* a2, size_t nmemb, size_t size, $/;"	f	file:	signature:(void* a1, void* a2, size_t nmemb, size_t size, int (*compar) (const void*, const void*, const void*, const void*))
__stencil_27pt_coo_matrix	matrix_generator/stencil.c	/^__stencil_27pt_coo_matrix (const int n, int *pnnz, int **pI, int **pJ, double **pval, const int start_row, const int end_row)$/;"	f	file:	signature:(const int n, int *pnnz, int **pI, int **pJ, double **pval, const int start_row, const int end_row)
__stencil_3pt_coo_matrix	matrix_generator/stencil.c	/^__stencil_3pt_coo_matrix (const int n, int *pnnz, int **pI, int **pJ, double **pval, const int start_row, const int end_row)$/;"	f	file:	signature:(const int n, int *pnnz, int **pI, int **pJ, double **pval, const int start_row, const int end_row)
__stencil_9pt_coo_matrix	matrix_generator/stencil.c	/^__stencil_9pt_coo_matrix (const int n, int *pnnz, int **pI, int **pJ, $/;"	f	file:	signature:(const int n, int *pnnz, int **pI, int **pJ, double **pval, const int start_row, const int end_row)
_avl_tree_h	spmvbench/avltree.h	/^#define _avl_tree_h$/;"	d
_avl_tree_intpair_h	bebop_util/avltree_intpair.h	/^#define _avl_tree_intpair_h$/;"	d
_bcoo_matrix_h	sparse_matrix_converter/bcoo_matrix.h	/^#define _bcoo_matrix_h$/;"	d
_bcsr_matrix_h	sparse_matrix_converter/bcsr_matrix.h	/^#define _bcsr_matrix_h$/;"	d
_block_smvm_code_h	spmvbench/block_smvm_code.h	/^#define _block_smvm_code_h$/;"	d
_config_h	bebop_util/config.h	/^#define _config_h$/;"	d
_coo_matrix_h	sparse_matrix_converter/coo_matrix.h	/^#define _coo_matrix_h$/;"	d
_coord_elem_h	sparse_matrix_converter/coord_elem.h	/^#define _coord_elem_h$/;"	d
_create_rand_h	matrix_generator/create_rand.h	/^#define _create_rand_h$/;"	d
_csc_matrix_h	sparse_matrix_converter/csc_matrix.h	/^#define _csc_matrix_h$/;"	d
_csr_matmatmult_h	sparse_matrix_converter/csr_matmatmult.h	/^#define _csr_matmatmult_h$/;"	d
_csr_matrix_h	sparse_matrix_converter/csr_matrix.h	/^#define _csr_matrix_h$/;"	d
_enumerations_h	bebop_util/enumerations.h	/^#define _enumerations_h$/;"	d
_fill_with_random_block_h	spmvbench/fill_with_random_block.h	/^#define _fill_with_random_block_h$/;"	d
_get_options_h	bebop_util/get_options.h	/^#define _get_options_h$/;"	d
_jad_matrix_h	sparse_matrix_converter/jad_matrix.h	/^#define _jad_matrix_h$/;"	d
_merge_sort_h	bebop_util/merge_sort.h	/^#define _merge_sort_h$/;"	d
_mfh_matlib_h	sparse_matrix_converter/mfh_matlib.h	/^#define _mfh_matlib_h$/;"	d
_random_number_h	bebop_util/random_number.h	/^#define _random_number_h$/;"	d
_read_mm_h	sparse_matrix_converter/read_mm.h	/^#define _read_mm_h$/;"	d
_smvm_benchmark_h	spmvbench/smvm_benchmark.h	/^#define _smvm_benchmark_h$/;"	d
_smvm_benchmark_results_h	spmvbench/smvm_benchmark_results.h	/^#define _smvm_benchmark_results_h$/;"	d
_smvm_get_output_file_h	spmvbench/smvm_get_output_file.h	/^#define _smvm_get_output_file_h$/;"	d
_smvm_malloc_h	bebop_util/smvm_malloc.h	/^#define _smvm_malloc_h$/;"	d
_smvm_timing_results_h	spmvbench/smvm_timing_results.h	/^#define _smvm_timing_results_h$/;"	d
_smvm_timing_run_h	spmvbench/smvm_timing_run.h	/^#define _smvm_timing_run_h$/;"	d
_smvm_util_h	bebop_util/smvm_util.h	/^#define _smvm_util_h$/;"	d
_smvm_verify_result_h	spmvbench/smvm_verify_result.h	/^#define _smvm_verify_result_h$/;"	d
_sort_joint_array_h	bebop_util/sort_joint_arrays.h	/^#define _sort_joint_array_h$/;"	d
_sparse_matrix_h	sparse_matrix_converter/sparse_matrix.h	/^#define _sparse_matrix_h$/;"	d
_sparse_matrix_ops_h	sparse_matrix_converter/sparse_matrix_ops.h	/^#define _sparse_matrix_ops_h$/;"	d
_sparse_vector_h	sparse_matrix_converter/sparse_vector.h	/^#define _sparse_vector_h$/;"	d
_spvec_h	sparse_matrix_converter/spvec.h	/^#define _spvec_h$/;"	d
_stencil_h	matrix_generator/stencil.h	/^#define _stencil_h$/;"	d
_timer_h	bebop_util/timer.h	/^#define _timer_h$/;"	d
_timing_h	spmvbench/timing.h	/^#define _timing_h$/;"	d
actual_runtime	hpcc_spmv_benchmark/benchmark_params.h	/^    int actual_runtime;$/;"	m	struct:__anon2	access:public
add_elt	matrix_generator/stencil.c	/^#  undef add_elt$/;"	d	file:
add_elt	matrix_generator/stencil.c	/^#define add_elt(/;"	d	file:
add_spvec	sparse_matrix_converter/spvec.c	/^add_spvec (struct spvec_t* z,$/;"	f	signature:(struct spvec_t* z, const void* a, struct spvec_t* x, const void* b, struct spvec_t* y)
add_spvec	sparse_matrix_converter/spvec.h	/^add_spvec (struct spvec_t* z,$/;"	p	signature:(struct spvec_t* z, const void* a, struct spvec_t* x, const void* b, struct spvec_t* y)
add_spvec_double	sparse_matrix_converter/spvec.c	/^add_spvec_double (struct spvec_t* z,$/;"	f	file:	signature:(struct spvec_t* z, const double alpha, struct spvec_t* x, const double beta, struct spvec_t* y)
add_spvec_double_Complex	sparse_matrix_converter/spvec.c	/^add_spvec_double_Complex (struct spvec_t* z,$/;"	f	file:	signature:(struct spvec_t* z, const double_Complex alpha, struct spvec_t* x, const double_Complex beta, struct spvec_t* y)
add_spvec_pattern	sparse_matrix_converter/spvec.c	/^add_spvec_pattern (struct spvec_t* z, struct spvec_t* x, struct spvec_t* y)$/;"	f	file:	signature:(struct spvec_t* z, struct spvec_t* x, struct spvec_t* y)
aggregate_fem_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double aggregate_fem_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
alloc_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^alloc_coo_matrix (struct coo_matrix_t* A, $/;"	f	signature:(struct coo_matrix_t* A, const int m, const int n, const int nnz, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
alloc_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^alloc_coo_matrix (struct coo_matrix_t* A, const int m, const int n, const int nnz,$/;"	p	signature:(struct coo_matrix_t* A, const int m, const int n, const int nnz, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
allocnode	matrix_generator/dict.c	/^#define allocnode /;"	d	file:
append_spvec_to_csr_matrix	sparse_matrix_converter/spvec.c	/^append_spvec_to_csr_matrix (int** ptr, int** ind, void** val,$/;"	f	signature:(int** ptr, int** ind, void** val, int* current_nnz, int* nnz_upper_bound, struct spvec_t* row, const int which_row, const int total_num_cols)
append_spvec_to_csr_matrix	sparse_matrix_converter/spvec.h	/^append_spvec_to_csr_matrix (int** ptr, int** ind, void** val,$/;"	p	signature:(int** ptr, int** ind, void** val, int* current_nnz, int* nnz_upper_bound, struct spvec_t* row, const int which_row)
append_spvec_to_csr_matrix_complex	sparse_matrix_converter/spvec.c	/^append_spvec_to_csr_matrix_complex (int** ptr, int** ind, double_Complex** val,$/;"	f	file:	signature:(int** ptr, int** ind, double_Complex** val, int* current_nnz, int* nnz_upper_bound, struct spvec_t* row, const int which_row, const int total_num_cols)
append_spvec_to_csr_matrix_double	sparse_matrix_converter/spvec.c	/^append_spvec_to_csr_matrix_double (int** ptr, int** ind, double** val,$/;"	f	file:	signature:(int** ptr, int** ind, double** val, int* current_nnz, int* nnz_upper_bound, struct spvec_t* row, const int which_row, const int total_num_cols)
append_spvec_to_csr_matrix_pattern	sparse_matrix_converter/spvec.c	/^append_spvec_to_csr_matrix_pattern (int** ptr, int** ind,$/;"	f	file:	signature:(int** ptr, int** ind, int* current_nnz, int* nnz_upper_bound, struct spvec_t* row, const int which_row, const int total_num_cols)
append_to_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.c	/^append_to_smvm_benchmark_results_array (struct SMVM_benchmark_results_array* p,$/;"	f	signature:(struct SMVM_benchmark_results_array* p, struct SMVM_benchmark_results* results)
append_to_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.h	/^append_to_smvm_benchmark_results_array (struct SMVM_benchmark_results_array* p,$/;"	p	signature:(struct SMVM_benchmark_results_array* p, struct SMVM_benchmark_results* results)
append_to_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^append_to_sparse_vector (struct sparse_vector_t* v, $/;"	f	signature:(struct sparse_vector_t* v, const double value, const int index)
append_to_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^append_to_sparse_vector (struct sparse_vector_t* v, $/;"	p	signature:(struct sparse_vector_t* v, const double value, const int index)
append_to_spvec	sparse_matrix_converter/spvec.c	/^append_to_spvec (struct spvec_t* v, const void* values, $/;"	f	signature:(struct spvec_t* v, const void* values, const int* indices, const int num_to_append)
append_to_spvec	sparse_matrix_converter/spvec.h	/^append_to_spvec (struct spvec_t* v, const void* values, $/;"	p	signature:(struct spvec_t* v, const void* values, const int* indices, const int num_to_append)
append_to_spvec_complex	sparse_matrix_converter/spvec.c	/^append_to_spvec_complex (struct spvec_t* v, const double_Complex value, $/;"	f	signature:(struct spvec_t* v, const double_Complex value, const int index)
append_to_spvec_complex_array	sparse_matrix_converter/spvec.c	/^append_to_spvec_complex_array (struct spvec_t* v, const double_Complex* values,$/;"	f	file:	signature:(struct spvec_t* v, const double_Complex* values, const int* indices, const int num_to_append)
append_to_spvec_double	sparse_matrix_converter/spvec.c	/^append_to_spvec_double (struct spvec_t* v, const double value, const int index)$/;"	f	file:	signature:(struct spvec_t* v, const double value, const int index)
append_to_spvec_double_array	sparse_matrix_converter/spvec.c	/^append_to_spvec_double_array (struct spvec_t* v, const double* values,$/;"	f	file:	signature:(struct spvec_t* v, const double* values, const int* indices, const int num_to_append)
append_to_spvec_pattern	sparse_matrix_converter/spvec.c	/^append_to_spvec_pattern (struct spvec_t* v, const int index)$/;"	f	signature:(struct spvec_t* v, const int index)
append_to_spvec_pattern_array	sparse_matrix_converter/spvec.c	/^append_to_spvec_pattern_array (struct spvec_t* v, const int* indices, $/;"	f	file:	signature:(struct spvec_t* v, const int* indices, const int num_to_append)
arch	Makefile	/^arch = UNKNOWN$/;"	m
arch	spmvbench/Makefile	/^arch = UNKNOWN$/;"	m
arg_type_t	bebop_util/get_options.h	/^typedef enum { NULLARG, INTARG, DOUBLEARG, STRINGARG } arg_type_t;$/;"	t	typeref:enum:__anon5
arginfo	bebop_util/get_options.c	/^struct arginfo $/;"	s	file:
arginfo::__anon3::d	bebop_util/get_options.c	/^    double d;$/;"	m	union:arginfo::__anon3	file:	access:public
arginfo::__anon3::i	bebop_util/get_options.c	/^    int i;$/;"	m	union:arginfo::__anon3	file:	access:public
arginfo::__anon3::s	bebop_util/get_options.c	/^    char *s;$/;"	m	union:arginfo::__anon3	file:	access:public
arginfo::c	bebop_util/get_options.c	/^  char c;$/;"	m	struct:arginfo	file:	access:public
arginfo::default_val	bebop_util/get_options.c	/^  } default_val;$/;"	m	struct:arginfo	typeref:union:arginfo::__anon3	file:	access:public
arginfo::desc	bebop_util/get_options.c	/^  char* desc;$/;"	m	struct:arginfo	file:	access:public
arginfo::got_arg	bebop_util/get_options.c	/^  int got_arg;$/;"	m	struct:arginfo	file:	access:public
arginfo::got_arg_value	bebop_util/get_options.c	/^  int got_arg_value;$/;"	m	struct:arginfo	file:	access:public
arginfo::next	bebop_util/get_options.c	/^  struct arginfo* next;$/;"	m	struct:arginfo	typeref:struct:arginfo::arginfo	file:	access:public
arginfo::type	bebop_util/get_options.c	/^  arg_type_t type;$/;"	m	struct:arginfo	file:	access:public
arginfo::val	bebop_util/get_options.c	/^  void* val;$/;"	m	struct:arginfo	file:	access:public
arglist	matrix_generator/main.c	/^struct arginfo *arglist = NULL;$/;"	v	typeref:struct:arginfo
array	spmvbench/smvm_benchmark_results.h	/^  struct SMVM_benchmark_results **array;$/;"	m	struct:SMVM_benchmark_results_array	typeref:struct:SMVM_benchmark_results_array::SMVM_benchmark_results	access:public
avl_node	spmvbench/avltree.h	/^struct avl_node$/;"	s
avl_node::element	spmvbench/avltree.h	/^  element_type element;   $/;"	m	struct:avl_node	access:public
avl_node::height	spmvbench/avltree.h	/^  int height;             $/;"	m	struct:avl_node	access:public
avl_node::left	spmvbench/avltree.h	/^  struct avl_node* left;  $/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node	access:public
avl_node::right	spmvbench/avltree.h	/^  struct avl_node* right; $/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node	access:public
avl_node_intpair	bebop_util/avltree_intpair.h	/^struct avl_node_intpair$/;"	s
avl_node_intpair::element	bebop_util/avltree_intpair.h	/^  element_type element;   $/;"	m	struct:avl_node_intpair	access:public
avl_node_intpair::height	bebop_util/avltree_intpair.h	/^  int height;             $/;"	m	struct:avl_node_intpair	access:public
avl_node_intpair::left	bebop_util/avltree_intpair.h	/^  struct avl_node_intpair* left;  $/;"	m	struct:avl_node_intpair	typeref:struct:avl_node_intpair::avl_node_intpair	access:public
avl_node_intpair::right	bebop_util/avltree_intpair.h	/^  struct avl_node_intpair* right; $/;"	m	struct:avl_node_intpair	typeref:struct:avl_node_intpair::avl_node_intpair	access:public
avl_position	spmvbench/avltree.h	/^typedef struct avl_node *avl_position;$/;"	t	typeref:struct:avl_node
avl_position_intpair	bebop_util/avltree_intpair.h	/^typedef struct avl_node_intpair *avl_position_intpair;$/;"	t	typeref:struct:avl_node_intpair
avl_tree	spmvbench/avltree.h	/^typedef struct avl_node *avl_tree;$/;"	t	typeref:struct:avl_node
avl_tree_intpair	bebop_util/avltree_intpair.h	/^typedef struct avl_node_intpair *avl_tree_intpair;$/;"	t	typeref:struct:avl_node_intpair
b_run_dense	spmvbench/main.c	/^  int b_run_dense;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
b_run_sparse	spmvbench/main.c	/^  int b_run_sparse;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
bcoo_matrix_add_entry	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_matrix_add_entry (struct bcoo_matrix_t* A, $/;"	f	signature:(struct bcoo_matrix_t* A, const int bi, const int bj, const void* value)
bcoo_matrix_add_entry	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_add_entry (struct bcoo_matrix_t* A, const int bi, const int bj, $/;"	p	signature:(struct bcoo_matrix_t* A, const int bi, const int bj, const void* value)
bcoo_matrix_coalesce_duplicate_entries	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_matrix_coalesce_duplicate_entries (struct bcoo_matrix_t* A, int* num_removed)$/;"	f	signature:(struct bcoo_matrix_t* A, int* num_removed)
bcoo_matrix_coalesce_duplicate_entries	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_coalesce_duplicate_entries (struct bcoo_matrix_t* A, int* num_removed);$/;"	p	signature:(struct bcoo_matrix_t* A, int* num_removed)
bcoo_matrix_realloc	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_matrix_realloc (struct bcoo_matrix_t* A, const int newmaxlength)$/;"	f	signature:(struct bcoo_matrix_t* A, const int newmaxlength)
bcoo_matrix_realloc	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_realloc (struct bcoo_matrix_t* A, const int newmaxlength);$/;"	p	signature:(struct bcoo_matrix_t* A, const int newmaxlength)
bcoo_matrix_resize	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_matrix_resize (struct bcoo_matrix_t* A, const int newlength)$/;"	f	signature:(struct bcoo_matrix_t* A, const int newlength)
bcoo_matrix_resize	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_resize (struct bcoo_matrix_t* A, const int newlength);$/;"	p	signature:(struct bcoo_matrix_t* A, const int newlength)
bcoo_matrix_t	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_t$/;"	s
bcoo_matrix_t::II	sparse_matrix_converter/bcoo_matrix.h	/^  int *II;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::JJ	sparse_matrix_converter/bcoo_matrix.h	/^  int *JJ;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::bm	sparse_matrix_converter/bcoo_matrix.h	/^  int bm;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::bn	sparse_matrix_converter/bcoo_matrix.h	/^  int bn;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::c	sparse_matrix_converter/bcoo_matrix.h	/^  int c;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::col_oriented_p	sparse_matrix_converter/bcoo_matrix.h	/^  int col_oriented_p;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::index_base	sparse_matrix_converter/bcoo_matrix.h	/^  enum index_base_t index_base;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::index_base_t	access:public
bcoo_matrix_t::nnzb	sparse_matrix_converter/bcoo_matrix.h	/^  int nnzb;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::nnzb_upper_bound	sparse_matrix_converter/bcoo_matrix.h	/^  int nnzb_upper_bound;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::r	sparse_matrix_converter/bcoo_matrix.h	/^  int r;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::symmetric_storage_location	sparse_matrix_converter/bcoo_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::symmetric_storage_location_t	access:public
bcoo_matrix_t::symmetry_type	sparse_matrix_converter/bcoo_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::symmetry_type_t	access:public
bcoo_matrix_t::val	sparse_matrix_converter/bcoo_matrix.h	/^  void* val;$/;"	m	struct:bcoo_matrix_t	access:public
bcoo_matrix_t::value_type	sparse_matrix_converter/bcoo_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::value_type_t	access:public
bcoo_matrix_to_random_bcsr_matrix	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_matrix_to_random_bcsr_matrix (struct bcoo_matrix_t* A)$/;"	f	signature:(struct bcoo_matrix_t* A)
bcoo_matrix_to_random_bcsr_matrix	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_matrix_to_random_bcsr_matrix (struct bcoo_matrix_t* A);$/;"	p	signature:(struct bcoo_matrix_t* A)
bcoo_to_bcsr	sparse_matrix_converter/bcoo_matrix.c	/^bcoo_to_bcsr (struct bcoo_matrix_t* A)$/;"	f	signature:(struct bcoo_matrix_t* A)
bcoo_to_bcsr	sparse_matrix_converter/bcoo_matrix.h	/^bcoo_to_bcsr (struct bcoo_matrix_t* A);$/;"	p	signature:(struct bcoo_matrix_t* A)
bcsr_matrix_t	sparse_matrix_converter/bcsr_matrix.h	/^bcsr_matrix_t$/;"	s
bcsr_matrix_t::bm	sparse_matrix_converter/bcsr_matrix.h	/^  int bm;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::bn	sparse_matrix_converter/bcsr_matrix.h	/^  int bn;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::c	sparse_matrix_converter/bcsr_matrix.h	/^  int c;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::col_oriented_p	sparse_matrix_converter/bcsr_matrix.h	/^  int col_oriented_p;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::colind	sparse_matrix_converter/bcsr_matrix.h	/^  int* colind;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::nnzb	sparse_matrix_converter/bcsr_matrix.h	/^  int nnzb;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::r	sparse_matrix_converter/bcsr_matrix.h	/^  int r;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::rowptr	sparse_matrix_converter/bcsr_matrix.h	/^  int* rowptr;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_matrix_t::symmetric_storage_location	sparse_matrix_converter/bcsr_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::symmetric_storage_location_t	access:public
bcsr_matrix_t::symmetry_type	sparse_matrix_converter/bcsr_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::symmetry_type_t	access:public
bcsr_matrix_t::value_type	sparse_matrix_converter/bcsr_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::value_type_t	access:public
bcsr_matrix_t::values	sparse_matrix_converter/bcsr_matrix.h	/^  void* values;$/;"	m	struct:bcsr_matrix_t	access:public
bcsr_to_bcoo	sparse_matrix_converter/bcoo_matrix.h	/^bcsr_to_bcoo (struct bcsr_matrix_t* A);$/;"	p	signature:(struct bcsr_matrix_t* A)
benchmark_subset	hpcc_spmv_benchmark/benchmark_subset.c	/^int benchmark_subset(hpcc_spmv_params *bench_params) {$/;"	f	signature:(hpcc_spmv_params *bench_params)
benchmark_subset	hpcc_spmv_benchmark/benchmark_subset.h	/^int benchmark_subset(hpcc_spmv_params *bench_params);$/;"	p	signature:(hpcc_spmv_params *bench_params)
benchmark_subset_h	hpcc_spmv_benchmark/benchmark_subset.h	/^#define benchmark_subset_h$/;"	d
best_block_size	spmvbench/smvm_benchmark_results.h	/^  int best_block_size;$/;"	m	struct:SMVM_benchmark_results	access:public
best_c	spmvbench/smvm_benchmark_results.h	/^  int best_c;$/;"	m	struct:SMVM_benchmark_results	access:public
best_fill	spmvbench/smvm_benchmark_results.h	/^  double best_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
best_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double best_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
best_r	spmvbench/smvm_benchmark_results.h	/^  int best_r;$/;"	m	struct:SMVM_benchmark_results	access:public
blockdim_idx	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^int blockdim_idx(int r_idx, int c_idx, int numdims, int nnz_vals, int n_rdims) {$/;"	f	signature:(int r_idx, int c_idx, int numdims, int nnz_vals, int n_rdims)
blocked_mflop_max	hpcc_spmv_benchmark/benchmark_params.h	/^    double blocked_mflop_max;$/;"	m	struct:__anon2	access:public
blocked_mflop_med	hpcc_spmv_benchmark/benchmark_params.h	/^    double blocked_mflop_med;$/;"	m	struct:__anon2	access:public
bm	sparse_matrix_converter/bcoo_matrix.h	/^  int bm;$/;"	m	struct:bcoo_matrix_t	access:public
bm	sparse_matrix_converter/bcsr_matrix.h	/^  int bm;$/;"	m	struct:bcsr_matrix_t	access:public
bn	sparse_matrix_converter/bcoo_matrix.h	/^  int bn;$/;"	m	struct:bcoo_matrix_t	access:public
bn	sparse_matrix_converter/bcsr_matrix.h	/^  int bn;$/;"	m	struct:bcsr_matrix_t	access:public
bsmvm_10x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_10x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_10x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_10x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_11x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_11x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_11x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_12x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_12x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_12x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_1x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_1x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_1x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_2x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_2x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_2x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_3x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_3x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_3x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_4x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_4x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_4x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_5x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_5x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_5x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_6x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_6x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_6x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_7x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_7x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_7x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_8x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_8x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_8x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x10_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x10_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x10_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x10_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x11_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x11_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x11_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x11_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x12_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x12_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x12_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x12_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x1_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x1_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x1_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x1_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x2_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x2_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x2_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x2_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x3_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x3_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x3_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x3_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x4_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x4_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x4_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x4_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x5_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x5_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x5_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x5_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x6_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x6_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x6_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x6_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x7_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x7_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x7_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x7_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x8_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x8_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x8_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x8_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x9_1	spmvbench/block_smvm_code.c	/^void bsmvm_9x9_1 (const int start_row, const int end_row, const int bm,$/;"	f	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_9x9_1	spmvbench/block_smvm_code.h	/^void bsmvm_9x9_1 (const int start_row, const int end_row, const int bm,$/;"	p	signature:(const int start_row, const int end_row, const int bm, const int row_start[], const int col_idx[], const double value[], const double src[], double dest[])
bsmvm_routines	spmvbench/block_smvm_code.c	/^SMVM_FP bsmvm_routines[12][12][1] = {$/;"	v
c	bebop_util/get_options.c	/^  char c;$/;"	m	struct:arginfo	file:	access:public
c	sparse_matrix_converter/bcoo_matrix.h	/^  int c;$/;"	m	struct:bcoo_matrix_t	access:public
c	sparse_matrix_converter/bcsr_matrix.h	/^  int c;$/;"	m	struct:bcsr_matrix_t	access:public
c	sparse_matrix_converter/coord_elem.h	/^  int c;$/;"	m	struct:coord_elem_t	access:public
c	spmvbench/smvm_benchmark.h	/^  int   c; $/;"	m	struct:SMVM_parameters	access:public
c	spmvbench/smvm_timing_results.h	/^  int c;$/;"	m	struct:SMVM_timing_results	access:public
clone_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^clone_bcsr_matrix (struct bcsr_matrix_t* A)$/;"	f	signature:(struct bcsr_matrix_t* A)
clone_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^clone_bcsr_matrix (struct bcsr_matrix_t* A);$/;"	p	signature:(struct bcsr_matrix_t* A)
clone_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^clone_sparse_vector (const struct sparse_vector_t* src)$/;"	f	signature:(const struct sparse_vector_t* src)
clone_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^clone_sparse_vector (const struct sparse_vector_t* src);$/;"	p	signature:(const struct sparse_vector_t* src)
clone_spvec	sparse_matrix_converter/spvec.c	/^clone_spvec (const struct spvec_t* src)$/;"	f	signature:(const struct spvec_t* src)
clone_spvec	sparse_matrix_converter/spvec.h	/^clone_spvec (const struct spvec_t* src);$/;"	p	signature:(const struct spvec_t* src)
cmaxlen	hpcc_spmv_benchmark/benchmark_params.h	/^    int cmaxlen;$/;"	m	struct:__anon2	access:public
cmdlineopts_t	bebop_util/main.c	/^cmdlineopts_t$/;"	s	file:
cmdlineopts_t	sparse_matrix_converter/main.c	/^cmdlineopts_t$/;"	s	file:
cmdlineopts_t::input_file_format	bebop_util/main.c	/^  char* input_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::input_file_format	sparse_matrix_converter/main.c	/^  char* input_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::input_filename	bebop_util/main.c	/^  char* input_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::input_filename	sparse_matrix_converter/main.c	/^  char* input_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::output_file_format	bebop_util/main.c	/^  char* output_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::output_file_format	sparse_matrix_converter/main.c	/^  char* output_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::output_filename	bebop_util/main.c	/^  char* output_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
cmdlineopts_t::output_filename	sparse_matrix_converter/main.c	/^  char* output_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
coalesce_sparse_vector_entries_with_common_indices	sparse_matrix_converter/sparse_vector.c	/^coalesce_sparse_vector_entries_with_common_indices (struct sparse_vector_t *v)$/;"	f	signature:(struct sparse_vector_t *v)
coalesce_sparse_vector_entries_with_common_indices	sparse_matrix_converter/sparse_vector.h	/^coalesce_sparse_vector_entries_with_common_indices (struct sparse_vector_t *v);$/;"	p	signature:(struct sparse_vector_t *v)
coalesce_spvec_entries_with_common_indices	sparse_matrix_converter/spvec.c	/^coalesce_spvec_entries_with_common_indices (struct spvec_t *v)$/;"	f	signature:(struct spvec_t *v)
coalesce_spvec_entries_with_common_indices	sparse_matrix_converter/spvec.h	/^coalesce_spvec_entries_with_common_indices (struct spvec_t *v);$/;"	p	signature:(struct spvec_t *v)
col_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int *col_blockdims;$/;"	m	struct:__anon2	access:public
col_oriented_p	sparse_matrix_converter/bcoo_matrix.h	/^  int col_oriented_p;$/;"	m	struct:bcoo_matrix_t	access:public
col_oriented_p	sparse_matrix_converter/bcsr_matrix.h	/^  int col_oriented_p;$/;"	m	struct:bcsr_matrix_t	access:public
colidx	sparse_matrix_converter/csr_matrix.h	/^  int* colidx;$/;"	m	struct:csr_matrix_t	access:public
colind	sparse_matrix_converter/bcsr_matrix.h	/^  int* colind;$/;"	m	struct:bcsr_matrix_t	access:public
color	matrix_generator/dict.c	/^#define color /;"	d	file:
colptr	sparse_matrix_converter/csc_matrix.h	/^  int* colptr;$/;"	m	struct:csc_matrix_t	access:public
command_line_name_to_fnname	matrix_generator/main.c	/^static dict_t* command_line_name_to_fnname = NULL;$/;"	v	file:
compare	bebop_util/avltree_intpair.c	/^compare (struct int_pair p1, struct int_pair p2)$/;"	f	file:	signature:(struct int_pair p1, struct int_pair p2)
compare	matrix_generator/dict.c	/^#define compare /;"	d	file:
compare	spmvbench/avltree.c	/^compare (struct int_pair p1, struct int_pair p2)$/;"	f	file:	signature:(struct int_pair p1, struct int_pair p2)
compare_by_first_array_increasing	bebop_util/sort_joint_arrays.c	/^compare_by_first_array_increasing (const void* a1x, const void* a1y, $/;"	f	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_by_first_array_increasing	bebop_util/sort_joint_arrays.h	/^compare_by_first_array_increasing (const void* a1x, const void* a1y, $/;"	p	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_by_second_array_increasing	bebop_util/sort_joint_arrays.c	/^compare_by_second_array_increasing (const void* a1x, const void* a1y, $/;"	f	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_by_second_array_increasing	bebop_util/sort_joint_arrays.h	/^compare_by_second_array_increasing (const void* a1x, const void* a1y, $/;"	p	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_coord_elem_by_col_complex	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_col_complex (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_coord_elem_by_col_pattern	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_col_pattern (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_coord_elem_by_col_real	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_col_real (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_coord_elem_by_row_complex	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_row_complex (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_coord_elem_by_row_pattern	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_row_pattern (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_coord_elem_by_row_real	sparse_matrix_converter/read_mm.c	/^compare_coord_elem_by_row_real (const void* a, const void* b)$/;"	f	signature:(const void* a, const void* b)
compare_index_complex_value_pairs	sparse_matrix_converter/csc_matrix.c	/^compare_index_complex_value_pairs (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_index_complex_value_pairs	sparse_matrix_converter/csr_matrix.c	/^compare_index_complex_value_pairs (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_index_real_value_pairs	sparse_matrix_converter/csc_matrix.c	/^compare_index_real_value_pairs (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_index_real_value_pairs	sparse_matrix_converter/csr_matrix.c	/^compare_index_real_value_pairs (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_ints	matrix_generator/create_rand.c	/^compare_ints (const void* a, const void* b)$/;"	f	file:	signature:(const void* a, const void* b)
compare_ints	sparse_matrix_converter/csc_matrix.c	/^compare_ints (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_ints	sparse_matrix_converter/csr_matrix.c	/^compare_ints (const void *pa, const void *pb)$/;"	f	file:	signature:(const void *pa, const void *pb)
compare_lexicographically	bebop_util/sort_joint_arrays.c	/^compare_lexicographically (const void* a1x, const void* a1y, $/;"	f	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_lexicographically	bebop_util/sort_joint_arrays.h	/^compare_lexicographically (const void* a1x, const void* a1y, $/;"	p	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_reverse_lexicographically	bebop_util/sort_joint_arrays.c	/^compare_reverse_lexicographically (const void* a1x, const void* a1y, $/;"	f	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_reverse_lexicographically	bebop_util/sort_joint_arrays.h	/^compare_reverse_lexicographically (const void* a1x, const void* a1y, $/;"	p	signature:(const void* a1x, const void* a1y, const void* a2x, const void* a2y)
compare_timing_results_by_t_median	spmvbench/smvm_timing_results.c	/^compare_timing_results_by_t_median (const void* r1, const void* r2)$/;"	f	signature:(const void* r1, const void* r2)
compare_timing_results_by_t_median	spmvbench/smvm_timing_results.h	/^compare_timing_results_by_t_median (const void* r1, const void* r2);$/;"	p	signature:(const void* r1, const void* r2)
compare_timing_results_by_t_min	spmvbench/smvm_timing_results.c	/^compare_timing_results_by_t_min (const void* r1, const void* r2)$/;"	f	signature:(const void* r1, const void* r2)
compare_timing_results_by_t_min	spmvbench/smvm_timing_results.h	/^compare_timing_results_by_t_min (const void* r1, const void* r2);$/;"	p	signature:(const void* r1, const void* r2)
comparef	matrix_generator/dict.c	/^static int comparef(const void *key1, const void *key2)$/;"	f	file:	signature:(const void *key1, const void *key2)
compute_NNZ	spmvbench/smvm_benchmark.c	/^compute_NNZ (int m, int n, double percent_fill)$/;"	f	signature:(int m, int n, double percent_fill)
compute_NNZ	spmvbench/smvm_benchmark.h	/^compute_NNZ (int m, int n, double percent_fill);$/;"	p	signature:(int m, int n, double percent_fill)
compute_threshold_dims	hpcc_spmv_benchmark/benchmark_subset.c	/^void compute_threshold_dims(hpcc_spmv_params *bench_params) {$/;"	f	signature:(hpcc_spmv_params *bench_params)
compute_threshold_dims	hpcc_spmv_benchmark/benchmark_subset.h	/^void compute_threshold_dims(hpcc_spmv_params *bench_params);$/;"	p	signature:(hpcc_spmv_params *bench_params)
construct	matrix_generator/dict.c	/^static void construct(dict_t *d)$/;"	f	file:	signature:(dict_t *d)
context	matrix_generator/dict.c	/^#define context /;"	d	file:
coo_c_to_fortran	sparse_matrix_converter/coo_matrix.c	/^coo_c_to_fortran (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_c_to_fortran	sparse_matrix_converter/coo_matrix.h	/^coo_c_to_fortran (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coo_fortran_to_c	sparse_matrix_converter/coo_matrix.c	/^coo_fortran_to_c (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_fortran_to_c	sparse_matrix_converter/coo_matrix.h	/^coo_fortran_to_c (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coo_matrix_equal_p	sparse_matrix_converter/coo_matrix.c	/^coo_matrix_equal_p (struct coo_matrix_t *A, struct coo_matrix_t *B)$/;"	f	signature:(struct coo_matrix_t *A, struct coo_matrix_t *B)
coo_matrix_equal_p	sparse_matrix_converter/coo_matrix.h	/^coo_matrix_equal_p (struct coo_matrix_t *A, struct coo_matrix_t *B);$/;"	p	signature:(struct coo_matrix_t *A, struct coo_matrix_t *B)
coo_matrix_expand_symmetric_storage	sparse_matrix_converter/coo_matrix.c	/^coo_matrix_expand_symmetric_storage (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_matrix_expand_symmetric_storage	sparse_matrix_converter/coo_matrix.h	/^coo_matrix_expand_symmetric_storage (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coo_matrix_expand_symmetric_storage_copy	sparse_matrix_converter/coo_matrix.c	/^coo_matrix_expand_symmetric_storage_copy (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_matrix_expand_symmetric_storage_copy	sparse_matrix_converter/coo_matrix.h	/^coo_matrix_expand_symmetric_storage_copy (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coo_matrix_in_fortran_format_p	sparse_matrix_converter/coo_matrix.c	/^coo_matrix_in_fortran_format_p (const int m, const int n, const int nnz, $/;"	f	signature:(const int m, const int n, const int nnz, const int II[], const int JJ[])
coo_matrix_in_fortran_format_p	sparse_matrix_converter/coo_matrix.h	/^coo_matrix_in_fortran_format_p (const int m, const int n, const int nnz, $/;"	p	signature:(const int m, const int n, const int nnz, const int II[], const int JJ[])
coo_matrix_t	sparse_matrix_converter/coo_matrix.h	/^coo_matrix_t$/;"	s
coo_matrix_t::II	sparse_matrix_converter/coo_matrix.h	/^  int* II;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::JJ	sparse_matrix_converter/coo_matrix.h	/^  int* JJ;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::index_base	sparse_matrix_converter/coo_matrix.h	/^  enum index_base_t index_base;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::index_base_t	access:public
coo_matrix_t::m	sparse_matrix_converter/coo_matrix.h	/^  int m;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::n	sparse_matrix_converter/coo_matrix.h	/^  int n;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::nnz	sparse_matrix_converter/coo_matrix.h	/^  int nnz;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::symmetric_storage_location	sparse_matrix_converter/coo_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::symmetric_storage_location_t	access:public
coo_matrix_t::symmetry_type	sparse_matrix_converter/coo_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::symmetry_type_t	access:public
coo_matrix_t::val	sparse_matrix_converter/coo_matrix.h	/^  void* val;$/;"	m	struct:coo_matrix_t	access:public
coo_matrix_t::value_type	sparse_matrix_converter/coo_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::value_type_t	access:public
coo_matrix_to_coord_elem_array	sparse_matrix_converter/read_mm.c	/^coo_matrix_to_coord_elem_array (void** p_coord_array, $/;"	f	signature:(void** p_coord_array, int *p_length, const struct coo_matrix_t* A)
coo_matrix_to_coord_elem_array	sparse_matrix_converter/read_mm.h	/^coo_matrix_to_coord_elem_array (void** p_coord_array, $/;"	p	signature:(void** p_coord_array, int *p_length, const struct coo_matrix_t* A)
coo_to_csc	sparse_matrix_converter/read_mm.c	/^coo_to_csc (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_to_csc	sparse_matrix_converter/read_mm.h	/^coo_to_csc (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coo_to_csc_matrix	sparse_matrix_converter/read_mm.c	/^coo_to_csc_matrix (struct csc_matrix_t* A, const struct coo_matrix_t* B)$/;"	f	signature:(struct csc_matrix_t* A, const struct coo_matrix_t* B)
coo_to_csc_matrix	sparse_matrix_converter/read_mm.h	/^coo_to_csc_matrix (struct csc_matrix_t* A, const struct coo_matrix_t* B);$/;"	p	signature:(struct csc_matrix_t* A, const struct coo_matrix_t* B)
coo_to_csr	sparse_matrix_converter/read_mm.c	/^coo_to_csr (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
coo_to_csr	sparse_matrix_converter/read_mm.h	/^coo_to_csr (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
coord_elem_t	sparse_matrix_converter/coord_elem.h	/^coord_elem_t$/;"	s
coord_elem_t::c	sparse_matrix_converter/coord_elem.h	/^  int c;$/;"	m	struct:coord_elem_t	access:public
coord_elem_t::r	sparse_matrix_converter/coord_elem.h	/^  int r;$/;"	m	struct:coord_elem_t	access:public
coord_elem_t::val	sparse_matrix_converter/coord_elem.h	/^  double val;$/;"	m	struct:coord_elem_t	access:public
copy_col2pairs	sparse_matrix_converter/csc_matrix.c	/^copy_col2pairs (const struct csc_matrix_t* A, int j, void* col, int max_nnz)$/;"	f	file:	signature:(const struct csc_matrix_t* A, int j, void* col, int max_nnz)
copy_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^copy_coo_matrix (const struct coo_matrix_t* A)$/;"	f	signature:(const struct coo_matrix_t* A)
copy_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^copy_coo_matrix (const struct coo_matrix_t* A);$/;"	p	signature:(const struct coo_matrix_t* A)
copy_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^copy_csc_matrix (struct csc_matrix_t* dest, const struct csc_matrix_t* src)$/;"	f	signature:(struct csc_matrix_t* dest, const struct csc_matrix_t* src)
copy_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^copy_csc_matrix (struct csc_matrix_t* dest, const struct csc_matrix_t* src);$/;"	p	signature:(struct csc_matrix_t* dest, const struct csc_matrix_t* src)
copy_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^copy_csr_matrix (struct csr_matrix_t* dest, const struct csr_matrix_t* src)$/;"	f	signature:(struct csr_matrix_t* dest, const struct csr_matrix_t* src)
copy_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^copy_csr_matrix (struct csr_matrix_t* dest, const struct csr_matrix_t* src);$/;"	p	signature:(struct csr_matrix_t* dest, const struct csr_matrix_t* src)
copy_pairs2col	sparse_matrix_converter/csc_matrix.c	/^copy_pairs2col (const void* col, int max_nnz, struct csc_matrix_t* A, int j)$/;"	f	file:	signature:(const void* col, int max_nnz, struct csc_matrix_t* A, int j)
copy_pairs2row	sparse_matrix_converter/csr_matrix.c	/^copy_pairs2row (const void* row, int max_nnz, struct csr_matrix_t* A, int i)$/;"	f	file:	signature:(const void* row, int max_nnz, struct csr_matrix_t* A, int i)
copy_row2pairs	sparse_matrix_converter/csr_matrix.c	/^copy_row2pairs (const struct csr_matrix_t* A, int i, void* row, int max_nnz)$/;"	f	file:	signature:(const struct csr_matrix_t* A, int i, void* row, int max_nnz)
create_arginfo	bebop_util/get_options.c	/^create_arginfo (const char c, const arg_type_t type, const void *val, $/;"	f	signature:(const char c, const arg_type_t type, const void *val, const char *desc, struct arginfo *next)
create_arginfo	bebop_util/get_options.c	/^create_arginfo (const char c, const arg_type_t type, const void *val, $/;"	p	file:	signature:(const char c, const arg_type_t type, const void *val, const char *desc, struct arginfo *next)
create_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.c	/^create_bcoo_matrix (const int bm, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, const int nnzb_upper_bound, int *II, int *JJ, void* val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.h	/^create_bcoo_matrix (const int bm, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, const int nnzb_upper_bound, int *II, int *JJ, void* val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^create_bcsr_matrix (const int bm, const int bn, const int r, const int c, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, void* values, int* colind, int* rowptr, const enum symmetry_type_t symmetry_type, const enum symmetric_storage_location_t symmetric_storage_location, const enum value_type_t value_type, const int col_oriented_p)
create_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^create_bcsr_matrix (const int bm, const int bn, const int r, const int c, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, void* values, int* colind, int* rowptr, const enum symmetry_type_t symmetry_type, const enum symmetric_storage_location_t symmetric_storage_location, const enum value_type_t value_type, const int col_oriented_p)
create_bcsr_matrix_handle	sparse_matrix_converter/bcsr_matrix.c	/^create_bcsr_matrix_handle ()$/;"	f
create_bcsr_matrix_handle	sparse_matrix_converter/bcsr_matrix.h	/^create_bcsr_matrix_handle ();$/;"	p	signature:()
create_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^create_coo_matrix (int m, int n, int nnz, int *II, $/;"	f	signature:(int m, int n, int nnz, int *II, int *JJ, void *val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^create_coo_matrix (int m, int n, int nnz, int *II, $/;"	p	signature:(int m, int n, int nnz, int *II, int *JJ, void *val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^create_csc_matrix (const int m, const int n, const int nnz, $/;"	f	signature:(const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^create_csc_matrix (const int m, const int n, const int nnz, $/;"	p	signature:(const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^create_csr_matrix (const int m, const int n, const int nnz, $/;"	f	signature:(const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^create_csr_matrix (const int m, const int n, const int nnz, $/;"	p	signature:(const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_empty_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.c	/^create_empty_bcoo_matrix (const int bm, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_empty_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.h	/^create_empty_bcoo_matrix (const int bm, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
create_matrix	matrix_generator/main.c	/^create_matrix (int argc, char *argv[], struct arginfo* arglist)$/;"	f	file:	signature:(int argc, char *argv[], struct arginfo* arglist)
create_random_integer_from_range_without_replacement_generator	bebop_util/random_number.c	/^create_random_integer_from_range_without_replacement_generator (const int low, const int high)$/;"	f	signature:(const int low, const int high)
create_random_integer_from_range_without_replacement_generator	bebop_util/random_number.h	/^create_random_integer_from_range_without_replacement_generator (const int low, const int high);$/;"	p	signature:(const int low, const int high)
create_random_matrix	matrix_generator/create_rand.c	/^create_random_matrix (const int bm, const int bn, const int r, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb)
create_random_matrix	matrix_generator/create_rand.h	/^create_random_matrix (const int bm, const int bn, const int r, const int c, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb)
create_random_matrix_banded	matrix_generator/create_rand.c	/^create_random_matrix_banded (const int bm, const int bn, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, const int lower_block_bandwidth, const int upper_block_bandwidth)
create_random_matrix_banded	matrix_generator/create_rand.h	/^create_random_matrix_banded (const int bm, const int bn, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb, const int lower_block_bandwidth, const int upper_block_bandwidth)
create_random_matrix_banded_by_nnz_per_row	matrix_generator/create_rand.c	/^create_random_matrix_banded_by_nnz_per_row (const int bm, const int bn, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth)
create_random_matrix_banded_by_nnz_per_row	matrix_generator/create_rand.h	/^create_random_matrix_banded_by_nnz_per_row (const int bm, const int bn, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth)
create_random_matrix_banded_by_nnz_per_row_using_algorithm	matrix_generator/create_rand.c	/^create_random_matrix_banded_by_nnz_per_row_using_algorithm (const int bm, const int bn, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth, const int algorithm)
create_random_matrix_banded_by_nnz_per_row_using_algorithm	matrix_generator/create_rand.h	/^create_random_matrix_banded_by_nnz_per_row_using_algorithm (const int bm, const int bn, $/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const int lower_block_bandwidth, const int upper_block_bandwidth, const int algorithm)
create_random_matrix_banded_by_statistics	matrix_generator/create_rand.c	/^create_random_matrix_banded_by_statistics (const int bm, const int bn, $/;"	f	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const double *interval_fracs)
create_random_matrix_banded_by_statistics	matrix_generator/create_rand.h	/^create_random_matrix_banded_by_statistics (const int bm, const int bn,$/;"	p	signature:(const int bm, const int bn, const int r, const int c, const int nnzb_per_block_row, const double *interval_fracs)
create_sparse_matrix	sparse_matrix_converter/sparse_matrix.c	/^create_sparse_matrix (enum sparse_matrix_storage_format_t format, void* repr)$/;"	f	signature:(enum sparse_matrix_storage_format_t format, void* repr)
create_sparse_matrix	sparse_matrix_converter/sparse_matrix.h	/^create_sparse_matrix (enum sparse_matrix_storage_format_t format, void* repr);$/;"	p	signature:(enum sparse_matrix_storage_format_t format, void* repr)
create_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^create_sparse_vector (const int initial_length)$/;"	f	signature:(const int initial_length)
create_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^create_sparse_vector (const int initial_length);$/;"	p	signature:(const int initial_length)
create_spvec	sparse_matrix_converter/spvec.c	/^create_spvec (const int initial_length)$/;"	f	signature:(const int initial_length)
create_spvec	sparse_matrix_converter/spvec.h	/^create_spvec (const int initial_length);$/;"	p	signature:(const int initial_length)
create_string_copy	bebop_util/get_options.c	/^create_string_copy (const char* str)$/;"	f	file:	signature:(const char* str)
csc_matrix_expand_symmetric_storage	sparse_matrix_converter/csc_matrix.c	/^csc_matrix_expand_symmetric_storage (struct csc_matrix_t* A) $/;"	f	signature:(struct csc_matrix_t* A)
csc_matrix_expand_symmetric_storage	sparse_matrix_converter/csc_matrix.h	/^csc_matrix_expand_symmetric_storage (struct csc_matrix_t* A);$/;"	p	signature:(struct csc_matrix_t* A)
csc_matrix_sort_rowidx	sparse_matrix_converter/csc_matrix.c	/^csc_matrix_sort_rowidx (struct csc_matrix_t* A)$/;"	f	file:	signature:(struct csc_matrix_t* A)
csc_matrix_t	sparse_matrix_converter/csc_matrix.h	/^csc_matrix_t$/;"	s
csc_matrix_t::colptr	sparse_matrix_converter/csc_matrix.h	/^  int* colptr;$/;"	m	struct:csc_matrix_t	access:public
csc_matrix_t::m	sparse_matrix_converter/csc_matrix.h	/^  int m;$/;"	m	struct:csc_matrix_t	access:public
csc_matrix_t::n	sparse_matrix_converter/csc_matrix.h	/^  int n;$/;"	m	struct:csc_matrix_t	access:public
csc_matrix_t::nnz	sparse_matrix_converter/csc_matrix.h	/^  int nnz;$/;"	m	struct:csc_matrix_t	access:public
csc_matrix_t::rowidx	sparse_matrix_converter/csc_matrix.h	/^  int* rowidx;$/;"	m	struct:csc_matrix_t	access:public
csc_matrix_t::symmetric_storage_location	sparse_matrix_converter/csc_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::symmetric_storage_location_t	access:public
csc_matrix_t::symmetry_type	sparse_matrix_converter/csc_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::symmetry_type_t	access:public
csc_matrix_t::value_type	sparse_matrix_converter/csc_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::value_type_t	access:public
csc_matrix_t::values	sparse_matrix_converter/csc_matrix.h	/^  void* values;$/;"	m	struct:csc_matrix_t	access:public
csc_to_coo	sparse_matrix_converter/read_mm.c	/^csc_to_coo (struct csc_matrix_t* A)$/;"	f	signature:(struct csc_matrix_t* A)
csc_to_coo	sparse_matrix_converter/read_mm.h	/^csc_to_coo (struct csc_matrix_t* A);$/;"	p	signature:(struct csc_matrix_t* A)
csc_to_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^csc_to_coo_matrix (const struct csc_matrix_t* A, int index_base)$/;"	f	signature:(const struct csc_matrix_t* A, int index_base)
csc_to_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^csc_to_coo_matrix (const struct csc_matrix_t* A, int index_base);$/;"	p	signature:(const struct csc_matrix_t* A, int index_base)
csc_to_csr	sparse_matrix_converter/csr_matrix.c	/^csc_to_csr (struct csc_matrix_t* A)$/;"	f	signature:(struct csc_matrix_t* A)
csc_to_csr	sparse_matrix_converter/csr_matrix.h	/^csc_to_csr (struct csc_matrix_t* A);$/;"	p	signature:(struct csc_matrix_t* A)
csr_matmatmult_complex	sparse_matrix_converter/csr_matmatmult.c	/^csr_matmatmult_complex (int** pCptr, int** pCind, $/;"	f	signature:(int** pCptr, int** pCind, double_Complex** pCval, int* pCnnz, double_Complex alpha, int* Bptr, int* Bind, double_Complex* Bval, int* Aptr, int* Aind, double_Complex* Aval, const int m, const int p, const int n)
csr_matmatmult_complex	sparse_matrix_converter/csr_matmatmult.h	/^csr_matmatmult_complex (int** pCptr, int** pCind, $/;"	p	signature:(int** pCptr, int** pCind, double_Complex** pCval, int* pCnnz, double_Complex alpha, int* Bptr, int* Bind, double_Complex* Bval, int* Aptr, int* Aind, double_Complex* Aval, const int m, const int p, const int n)
csr_matmatmult_double	sparse_matrix_converter/csr_matmatmult.c	/^csr_matmatmult_double (int** pCptr, int** pCind, double** pCval, int* pCnnz,$/;"	f	signature:(int** pCptr, int** pCind, double** pCval, int* pCnnz, double alpha, int* Bptr, int* Bind, double* Bval, int* Aptr, int* Aind, double* Aval, const int m, const int p, const int n)
csr_matmatmult_double	sparse_matrix_converter/csr_matmatmult.h	/^csr_matmatmult_double (int** pCptr, int** pCind, $/;"	p	signature:(int** pCptr, int** pCind, double** pCval, int* pCnnz, double alpha, int* Bptr, int* Bind, double* Bval, int* Aptr, int* Aind, double* Aval, const int m, const int p, const int n)
csr_matmatmult_pattern	sparse_matrix_converter/csr_matmatmult.c	/^csr_matmatmult_pattern (int** pCptr, int** pCind, int* pCnnz,$/;"	f	signature:(int** pCptr, int** pCind, int* pCnnz, int* Bptr, int* Bind, int* Aptr, int* Aind, const int m, const int p, const int n)
csr_matmatmult_pattern	sparse_matrix_converter/csr_matmatmult.h	/^csr_matmatmult_pattern (int** pCptr, int** pCind, int* pCnnz,$/;"	p	signature:(int** pCptr, int** pCind, int* pCnnz, int* Bptr, int* Bind, int* Aptr, int* Aind, const int m, const int p, const int n)
csr_matrix_expand_symmetric_storage	sparse_matrix_converter/csr_matrix.c	/^csr_matrix_expand_symmetric_storage (struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* A)
csr_matrix_expand_symmetric_storage	sparse_matrix_converter/csr_matrix.h	/^csr_matrix_expand_symmetric_storage (struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* A)
csr_matrix_matmatmult	sparse_matrix_converter/csr_matrix.c	/^csr_matrix_matmatmult (struct csr_matrix_t* B, struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* B, struct csr_matrix_t* A)
csr_matrix_matmatmult	sparse_matrix_converter/csr_matrix.h	/^csr_matrix_matmatmult (struct csr_matrix_t* B, struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* B, struct csr_matrix_t* A)
csr_matrix_sort_colidx	sparse_matrix_converter/csr_matrix.c	/^csr_matrix_sort_colidx (struct csr_matrix_t* A)$/;"	f	file:	signature:(struct csr_matrix_t* A)
csr_matrix_t	sparse_matrix_converter/csr_matrix.h	/^csr_matrix_t$/;"	s
csr_matrix_t::colidx	sparse_matrix_converter/csr_matrix.h	/^  int* colidx;$/;"	m	struct:csr_matrix_t	access:public
csr_matrix_t::m	sparse_matrix_converter/csr_matrix.h	/^  int m;$/;"	m	struct:csr_matrix_t	access:public
csr_matrix_t::n	sparse_matrix_converter/csr_matrix.h	/^  int n;$/;"	m	struct:csr_matrix_t	access:public
csr_matrix_t::nnz	sparse_matrix_converter/csr_matrix.h	/^  int nnz;$/;"	m	struct:csr_matrix_t	access:public
csr_matrix_t::rowptr	sparse_matrix_converter/csr_matrix.h	/^  int* rowptr;$/;"	m	struct:csr_matrix_t	access:public
csr_matrix_t::symmetric_storage_location	sparse_matrix_converter/csr_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::symmetric_storage_location_t	access:public
csr_matrix_t::symmetry_type	sparse_matrix_converter/csr_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::symmetry_type_t	access:public
csr_matrix_t::value_type	sparse_matrix_converter/csr_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::value_type_t	access:public
csr_matrix_t::values	sparse_matrix_converter/csr_matrix.h	/^  void* values;$/;"	m	struct:csr_matrix_t	access:public
csr_to_coo	sparse_matrix_converter/read_mm.c	/^csr_to_coo (struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* A)
csr_to_coo	sparse_matrix_converter/read_mm.h	/^csr_to_coo (struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* A)
csr_to_csc	sparse_matrix_converter/csr_matrix.c	/^csr_to_csc (const struct csr_matrix_t* A)$/;"	f	signature:(const struct csr_matrix_t* A)
csr_to_csc	sparse_matrix_converter/csr_matrix.h	/^csr_to_csc (const struct csr_matrix_t* A);$/;"	p	signature:(const struct csr_matrix_t* A)
csr_to_jad	sparse_matrix_converter/jad_matrix.c	/^csr_to_jad (struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* A)
csr_to_jad	sparse_matrix_converter/jad_matrix.h	/^csr_to_jad (struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* A)
curlen	spmvbench/smvm_benchmark_results.h	/^  int curlen;$/;"	m	struct:SMVM_benchmark_results_array	access:public
d	bebop_util/get_options.c	/^    double d;$/;"	m	union:arginfo::__anon3	file:	access:public
data	matrix_generator/dict.c	/^#define data /;"	d	file:
dataoutfile	spmvbench/main.c	/^  char* dataoutfile;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
dataoutfile	spmvbench/smvm_benchmark.h	/^  FILE* dataoutfile;$/;"	m	struct:SMVM_parameters	access:public
ddot_svdv	sparse_matrix_converter/sparse_vector.c	/^ddot_svdv (const double* val, const int* idx, const double* x,$/;"	f	signature:(const double* val, const int* idx, const double* x, const int start, const int end)
ddot_svdv	sparse_matrix_converter/sparse_vector.h	/^ddot_svdv (const double* val, const int* idx, const double* x,$/;"	p	signature:(const double* val, const int* idx, const double* x, const int start, const int end)
dealloc_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^dealloc_coo_matrix (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
dealloc_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^dealloc_coo_matrix (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
dealloc_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^dealloc_csc_matrix (struct csc_matrix_t* A)$/;"	f	signature:(struct csc_matrix_t* A)
dealloc_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^dealloc_csc_matrix (struct csc_matrix_t* A);$/;"	p	signature:(struct csc_matrix_t* A)
dealloc_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^dealloc_csr_matrix (struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* A)
dealloc_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^dealloc_csr_matrix (struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* A)
dealloc_jad_matrix	sparse_matrix_converter/jad_matrix.c	/^dealloc_jad_matrix (struct jad_matrix_t* jS)$/;"	f	signature:(struct jad_matrix_t* jS)
dealloc_jad_matrix	sparse_matrix_converter/jad_matrix.h	/^dealloc_jad_matrix (struct jad_matrix_t* jS);$/;"	p	signature:(struct jad_matrix_t* jS)
default_val	bebop_util/get_options.c	/^  } default_val;$/;"	m	struct:arginfo	typeref:union:arginfo::__anon3	file:	access:public
deinit	matrix_generator/main.c	/^deinit ()$/;"	f
deinit_arginfo	bebop_util/get_options.c	/^deinit_arginfo (struct arginfo *arg)$/;"	f	signature:(struct arginfo *arg)
deinit_arginfo	bebop_util/get_options.c	/^deinit_arginfo (struct arginfo *arg);$/;"	p	file:	signature:(struct arginfo *arg)
deinit_dicts	matrix_generator/main.c	/^deinit_dicts ()$/;"	f	file:
deinit_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^deinit_sparse_vector (struct sparse_vector_t* v)$/;"	f	signature:(struct sparse_vector_t* v)
deinit_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^deinit_sparse_vector (struct sparse_vector_t* v);$/;"	p	signature:(struct sparse_vector_t* v)
deinit_spvec	sparse_matrix_converter/spvec.c	/^deinit_spvec (struct spvec_t* v)$/;"	f	signature:(struct spvec_t* v)
deinit_spvec	sparse_matrix_converter/spvec.h	/^deinit_spvec (struct spvec_t* v);$/;"	p	signature:(struct spvec_t* v)
deinit_timer	bebop_util/timer.c	/^deinit_timer()$/;"	f
deinit_timer	bebop_util/timer.h	/^deinit_timer();$/;"	p	signature:()
del_node	matrix_generator/dict.c	/^static void del_node(dnode_t *n, void *c)$/;"	f	file:	signature:(dnode_t *n, void *c)
desc	bebop_util/get_options.c	/^  char* desc;$/;"	m	struct:arginfo	file:	access:public
destroy!	sparse_matrix_converter/interface.lisp	/^(defun destroy! (A)$/;"	f
destroy_arginfo	bebop_util/get_options.c	/^destroy_arginfo (struct arginfo *head)$/;"	f	signature:(struct arginfo *head)
destroy_arginfo	bebop_util/get_options.c	/^destroy_arginfo (struct arginfo *head);$/;"	p	file:	signature:(struct arginfo *head)
destroy_arginfo_list	bebop_util/get_options.c	/^destroy_arginfo_list (struct arginfo *list)$/;"	f	signature:(struct arginfo *list)
destroy_arginfo_list	bebop_util/get_options.h	/^destroy_arginfo_list (struct arginfo *list);$/;"	p	signature:(struct arginfo *list)
destroy_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.c	/^destroy_bcoo_matrix (struct bcoo_matrix_t* A)$/;"	f	signature:(struct bcoo_matrix_t* A)
destroy_bcoo_matrix	sparse_matrix_converter/bcoo_matrix.h	/^destroy_bcoo_matrix (struct bcoo_matrix_t* A);$/;"	p	signature:(struct bcoo_matrix_t* A)
destroy_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^destroy_bcsr_matrix (struct bcsr_matrix_t* A)$/;"	f	signature:(struct bcsr_matrix_t* A)
destroy_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^destroy_bcsr_matrix (struct bcsr_matrix_t* A);$/;"	p	signature:(struct bcsr_matrix_t* A)
destroy_bcsr_matrix_handle	sparse_matrix_converter/bcsr_matrix.c	/^destroy_bcsr_matrix_handle (struct bcsr_matrix_t* A)$/;"	f	signature:(struct bcsr_matrix_t* A)
destroy_bcsr_matrix_handle	sparse_matrix_converter/bcsr_matrix.h	/^destroy_bcsr_matrix_handle (struct bcsr_matrix_t* A);$/;"	p	signature:(struct bcsr_matrix_t* A)
destroy_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^destroy_coo_matrix (struct coo_matrix_t* A)$/;"	f	signature:(struct coo_matrix_t* A)
destroy_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^destroy_coo_matrix (struct coo_matrix_t* A);$/;"	p	signature:(struct coo_matrix_t* A)
destroy_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^destroy_csc_matrix (struct csc_matrix_t* A)$/;"	f	signature:(struct csc_matrix_t* A)
destroy_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^destroy_csc_matrix (struct csc_matrix_t* A);$/;"	p	signature:(struct csc_matrix_t* A)
destroy_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^destroy_csr_matrix (struct csr_matrix_t* A)$/;"	f	signature:(struct csr_matrix_t* A)
destroy_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^destroy_csr_matrix (struct csr_matrix_t* A);$/;"	p	signature:(struct csr_matrix_t* A)
destroy_jad_matrix	sparse_matrix_converter/jad_matrix.c	/^destroy_jad_matrix (struct jad_matrix_t* jS)$/;"	f	signature:(struct jad_matrix_t* jS)
destroy_jad_matrix	sparse_matrix_converter/jad_matrix.h	/^destroy_jad_matrix (struct jad_matrix_t* jS);$/;"	p	signature:(struct jad_matrix_t* jS)
destroy_random_integer_from_range_without_replacement_generator	bebop_util/random_number.c	/^destroy_random_integer_from_range_without_replacement_generator (struct random_integer_from_range_without_replacement_generator_t* gen)$/;"	f	signature:(struct random_integer_from_range_without_replacement_generator_t* gen)
destroy_random_integer_from_range_without_replacement_generator	bebop_util/random_number.h	/^destroy_random_integer_from_range_without_replacement_generator (struct random_integer_from_range_without_replacement_generator_t* gen);$/;"	p	signature:(struct random_integer_from_range_without_replacement_generator_t* gen)
destroy_smvm_benchmark_results_array_contents	spmvbench/smvm_benchmark_results.c	/^destroy_smvm_benchmark_results_array_contents (struct SMVM_benchmark_results_array* p)$/;"	f	signature:(struct SMVM_benchmark_results_array* p)
destroy_smvm_benchmark_results_array_contents	spmvbench/smvm_benchmark_results.h	/^destroy_smvm_benchmark_results_array_contents (struct SMVM_benchmark_results_array* p);$/;"	p	signature:(struct SMVM_benchmark_results_array* p)
destroy_sparse_matrix	sparse_matrix_converter/sparse_matrix.c	/^destroy_sparse_matrix (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
destroy_sparse_matrix	sparse_matrix_converter/sparse_matrix.h	/^destroy_sparse_matrix (struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* A)
destroy_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^destroy_sparse_vector (struct sparse_vector_t* v)$/;"	f	signature:(struct sparse_vector_t* v)
destroy_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^destroy_sparse_vector (struct sparse_vector_t* v);$/;"	p	signature:(struct sparse_vector_t* v)
destroy_spvec	sparse_matrix_converter/spvec.c	/^destroy_spvec (struct spvec_t* v)$/;"	f	signature:(struct spvec_t* v)
destroy_spvec	sparse_matrix_converter/spvec.h	/^destroy_spvec (struct spvec_t* v);$/;"	p	signature:(struct spvec_t* v)
diag_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^diag_csc_matrix (struct csc_matrix_t* A, $/;"	f	signature:(struct csc_matrix_t* A, const double* diag, const int m, const int n)
diag_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^diag_csc_matrix (struct csc_matrix_t* A, $/;"	p	signature:(struct csc_matrix_t* A, const double* diag, const int m, const int n)
dict_alloc_insert	matrix_generator/dict.c	/^int dict_alloc_insert(dict_t *dict, const void *key, void *data)$/;"	f	signature:(dict_t *dict, const void *key, void *data)
dict_alloc_insert	matrix_generator/dict.h	/^extern int dict_alloc_insert(dict_t *, const void *, void *);$/;"	p	signature:(dict_t *, const void *, void *)
dict_allocnode	matrix_generator/dict.h	/^    dnode_alloc_t dict_allocnode;$/;"	m	struct:dict_t	access:public
dict_allow_dupes	matrix_generator/dict.c	/^void dict_allow_dupes(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_allow_dupes	matrix_generator/dict.h	/^extern void dict_allow_dupes(dict_t *);$/;"	p	signature:(dict_t *)
dict_clear	matrix_generator/dict.c	/^static void dict_clear(dict_t *dict)$/;"	f	file:	signature:(dict_t *dict)
dict_color	matrix_generator/dict.h	/^    dnode_color_t dict_color;$/;"	m	struct:dnode_t	access:public
dict_comp_t	matrix_generator/dict.h	/^typedef int (*dict_comp_t)(const void *, const void *);$/;"	t
dict_compare	matrix_generator/dict.h	/^    dict_comp_t dict_compare;$/;"	m	struct:dict_t	access:public
dict_contains	matrix_generator/dict.c	/^int dict_contains(dict_t *dict, dnode_t *node)$/;"	f	signature:(dict_t *dict, dnode_t *node)
dict_contains	matrix_generator/dict.h	/^extern int dict_contains(dict_t *, dnode_t *);$/;"	p	signature:(dict_t *, dnode_t *)
dict_context	matrix_generator/dict.h	/^    void *dict_context;$/;"	m	struct:dict_t	access:public
dict_count	matrix_generator/dict.c	/^#undef dict_count$/;"	d	file:
dict_count	matrix_generator/dict.c	/^dictcount_t dict_count(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_count	matrix_generator/dict.h	/^#define dict_count(/;"	d
dict_count	matrix_generator/dict.h	/^extern dictcount_t dict_count(dict_t *);$/;"	p	signature:(dict_t *)
dict_create	matrix_generator/dict.c	/^dict_t *dict_create(dictcount_t maxcount, dict_comp_t comp)$/;"	f	signature:(dictcount_t maxcount, dict_comp_t comp)
dict_create	matrix_generator/dict.h	/^extern dict_t *dict_create(dictcount_t, dict_comp_t);$/;"	p	signature:(dictcount_t, dict_comp_t)
dict_data	matrix_generator/dict.h	/^    void *dict_data;$/;"	m	struct:dnode_t	access:public
dict_delete	matrix_generator/dict.c	/^dnode_t *dict_delete(dict_t *dict, dnode_t *delete)$/;"	f	signature:(dict_t *dict, dnode_t *delete)
dict_delete	matrix_generator/dict.h	/^extern dnode_t *dict_delete(dict_t *, dnode_t *);$/;"	p	signature:(dict_t *, dnode_t *)
dict_delete_free	matrix_generator/dict.c	/^void dict_delete_free(dict_t *dict, dnode_t *node)$/;"	f	signature:(dict_t *dict, dnode_t *node)
dict_delete_free	matrix_generator/dict.h	/^extern void dict_delete_free(dict_t *, dnode_t *);$/;"	p	signature:(dict_t *, dnode_t *)
dict_destroy	matrix_generator/dict.c	/^void dict_destroy(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_destroy	matrix_generator/dict.h	/^extern void dict_destroy(dict_t *);$/;"	p	signature:(dict_t *)
dict_dictptr	matrix_generator/dict.h	/^    dict_t *dict_dictptr;$/;"	m	struct:dict_load_t	access:public
dict_dupes	matrix_generator/dict.h	/^    int dict_dupes;$/;"	m	struct:dict_t	access:public
dict_first	matrix_generator/dict.c	/^dnode_t *dict_first(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_first	matrix_generator/dict.h	/^extern dnode_t *dict_first(dict_t *);$/;"	p	signature:(dict_t *)
dict_free	matrix_generator/dict.c	/^void dict_free(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_free	matrix_generator/dict.h	/^extern void dict_free(dict_t *);$/;"	p	signature:(dict_t *)
dict_free_nodes	matrix_generator/dict.c	/^void dict_free_nodes(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_free_nodes	matrix_generator/dict.h	/^extern void dict_free_nodes(dict_t *);$/;"	p	signature:(dict_t *)
dict_freenode	matrix_generator/dict.h	/^    dnode_free_t dict_freenode;$/;"	m	struct:dict_t	access:public
dict_init	matrix_generator/dict.c	/^dict_t *dict_init(dict_t *dict, dictcount_t maxcount, dict_comp_t comp)$/;"	f	signature:(dict_t *dict, dictcount_t maxcount, dict_comp_t comp)
dict_init	matrix_generator/dict.h	/^extern dict_t *dict_init(dict_t *, dictcount_t, dict_comp_t);$/;"	p	signature:(dict_t *, dictcount_t, dict_comp_t)
dict_init_like	matrix_generator/dict.c	/^void dict_init_like(dict_t *dict, const dict_t *template)$/;"	f	signature:(dict_t *dict, const dict_t *template)
dict_init_like	matrix_generator/dict.h	/^extern void dict_init_like(dict_t *, const dict_t *);$/;"	p	signature:(dict_t *, const dict_t *)
dict_insert	matrix_generator/dict.c	/^void dict_insert(dict_t *dict, dnode_t *node, const void *key)$/;"	f	signature:(dict_t *dict, dnode_t *node, const void *key)
dict_insert	matrix_generator/dict.h	/^extern void dict_insert(dict_t *, dnode_t *, const void *);$/;"	p	signature:(dict_t *, dnode_t *, const void *)
dict_isempty	matrix_generator/dict.c	/^#undef dict_isempty$/;"	d	file:
dict_isempty	matrix_generator/dict.c	/^int dict_isempty(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_isempty	matrix_generator/dict.h	/^#define dict_isempty(/;"	d
dict_isempty	matrix_generator/dict.h	/^extern int dict_isempty(dict_t *);$/;"	p	signature:(dict_t *)
dict_isfull	matrix_generator/dict.c	/^#undef dict_isfull$/;"	d	file:
dict_isfull	matrix_generator/dict.c	/^int dict_isfull(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_isfull	matrix_generator/dict.h	/^#define dict_isfull(/;"	d
dict_isfull	matrix_generator/dict.h	/^extern int dict_isfull(dict_t *);$/;"	p	signature:(dict_t *)
dict_key	matrix_generator/dict.h	/^    const void *dict_key;$/;"	m	struct:dnode_t	access:public
dict_last	matrix_generator/dict.c	/^dnode_t *dict_last(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_last	matrix_generator/dict.h	/^extern dnode_t *dict_last(dict_t *);$/;"	p	signature:(dict_t *)
dict_left	matrix_generator/dict.h	/^    struct dnode_t *dict_left;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
dict_load_begin	matrix_generator/dict.c	/^void dict_load_begin(dict_load_t *load, dict_t *dict)$/;"	f	signature:(dict_load_t *load, dict_t *dict)
dict_load_begin	matrix_generator/dict.h	/^extern void dict_load_begin(dict_load_t *, dict_t *);$/;"	p	signature:(dict_load_t *, dict_t *)
dict_load_end	matrix_generator/dict.c	/^void dict_load_end(dict_load_t *load)$/;"	f	signature:(dict_load_t *load)
dict_load_end	matrix_generator/dict.h	/^extern void dict_load_end(dict_load_t *);$/;"	p	signature:(dict_load_t *)
dict_load_next	matrix_generator/dict.c	/^void dict_load_next(dict_load_t *load, dnode_t *newnode, const void *key)$/;"	f	signature:(dict_load_t *load, dnode_t *newnode, const void *key)
dict_load_next	matrix_generator/dict.h	/^extern void dict_load_next(dict_load_t *, dnode_t *, const void *);$/;"	p	signature:(dict_load_t *, dnode_t *, const void *)
dict_load_t	matrix_generator/dict.h	/^typedef struct dict_load_t {$/;"	s
dict_load_t	matrix_generator/dict.h	/^} dict_load_t;$/;"	t	typeref:struct:dict_load_t
dict_load_t::dict_dictptr	matrix_generator/dict.h	/^    dict_t *dict_dictptr;$/;"	m	struct:dict_load_t	access:public
dict_load_t::dict_nilnode	matrix_generator/dict.h	/^    dnode_t dict_nilnode;$/;"	m	struct:dict_load_t	access:public
dict_lookup	matrix_generator/dict.c	/^dnode_t *dict_lookup(dict_t *dict, const void *key)$/;"	f	signature:(dict_t *dict, const void *key)
dict_lookup	matrix_generator/dict.h	/^extern dnode_t *dict_lookup(dict_t *, const void *);$/;"	p	signature:(dict_t *, const void *)
dict_lower_bound	matrix_generator/dict.c	/^dnode_t *dict_lower_bound(dict_t *dict, const void *key)$/;"	f	signature:(dict_t *dict, const void *key)
dict_lower_bound	matrix_generator/dict.h	/^extern dnode_t *dict_lower_bound(dict_t *, const void *);$/;"	p	signature:(dict_t *, const void *)
dict_maxcount	matrix_generator/dict.h	/^    dictcount_t dict_maxcount;$/;"	m	struct:dict_t	access:public
dict_merge	matrix_generator/dict.c	/^void dict_merge(dict_t *dest, dict_t *source)$/;"	f	signature:(dict_t *dest, dict_t *source)
dict_merge	matrix_generator/dict.h	/^extern void dict_merge(dict_t *, dict_t *);$/;"	p	signature:(dict_t *, dict_t *)
dict_next	matrix_generator/dict.c	/^dnode_t *dict_next(dict_t *dict, dnode_t *curr)$/;"	f	signature:(dict_t *dict, dnode_t *curr)
dict_next	matrix_generator/dict.h	/^extern dnode_t *dict_next(dict_t *, dnode_t *);$/;"	p	signature:(dict_t *, dnode_t *)
dict_nil	matrix_generator/dict.c	/^#define dict_nil(/;"	d	file:
dict_nilnode	matrix_generator/dict.h	/^    dnode_t dict_nilnode;$/;"	m	struct:dict_load_t	access:public
dict_nilnode	matrix_generator/dict.h	/^    dnode_t dict_nilnode;$/;"	m	struct:dict_t	access:public
dict_nodecount	matrix_generator/dict.h	/^    dictcount_t dict_nodecount;$/;"	m	struct:dict_t	access:public
dict_parent	matrix_generator/dict.h	/^    struct dnode_t *dict_parent;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
dict_prev	matrix_generator/dict.c	/^dnode_t *dict_prev(dict_t *dict, dnode_t *curr)$/;"	f	signature:(dict_t *dict, dnode_t *curr)
dict_prev	matrix_generator/dict.h	/^extern dnode_t *dict_prev(dict_t *, dnode_t *);$/;"	p	signature:(dict_t *, dnode_t *)
dict_process	matrix_generator/dict.c	/^void dict_process(dict_t *dict, void *context, dnode_process_t function)$/;"	f	signature:(dict_t *dict, void *context, dnode_process_t function)
dict_process	matrix_generator/dict.h	/^extern void dict_process(dict_t *, void *, dnode_process_t);$/;"	p	signature:(dict_t *, void *, dnode_process_t)
dict_right	matrix_generator/dict.h	/^    struct dnode_t *dict_right;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
dict_root	matrix_generator/dict.c	/^#define dict_root(/;"	d	file:
dict_set_allocator	matrix_generator/dict.c	/^void dict_set_allocator(dict_t *dict, dnode_alloc_t al,$/;"	f	signature:(dict_t *dict, dnode_alloc_t al, dnode_free_t fr, void *context)
dict_set_allocator	matrix_generator/dict.h	/^extern void dict_set_allocator(dict_t *, dnode_alloc_t, dnode_free_t, void *);$/;"	p	signature:(dict_t *, dnode_alloc_t, dnode_free_t, void *)
dict_similar	matrix_generator/dict.c	/^int dict_similar(const dict_t *left, const dict_t *right)$/;"	f	signature:(const dict_t *left, const dict_t *right)
dict_similar	matrix_generator/dict.h	/^extern int dict_similar(const dict_t *, const dict_t *);$/;"	p	signature:(const dict_t *, const dict_t *)
dict_t	matrix_generator/dict.h	/^typedef struct dict_t {$/;"	s
dict_t	matrix_generator/dict.h	/^} dict_t;$/;"	t	typeref:struct:dict_t
dict_t::dict_allocnode	matrix_generator/dict.h	/^    dnode_alloc_t dict_allocnode;$/;"	m	struct:dict_t	access:public
dict_t::dict_compare	matrix_generator/dict.h	/^    dict_comp_t dict_compare;$/;"	m	struct:dict_t	access:public
dict_t::dict_context	matrix_generator/dict.h	/^    void *dict_context;$/;"	m	struct:dict_t	access:public
dict_t::dict_dupes	matrix_generator/dict.h	/^    int dict_dupes;$/;"	m	struct:dict_t	access:public
dict_t::dict_freenode	matrix_generator/dict.h	/^    dnode_free_t dict_freenode;$/;"	m	struct:dict_t	access:public
dict_t::dict_maxcount	matrix_generator/dict.h	/^    dictcount_t dict_maxcount;$/;"	m	struct:dict_t	access:public
dict_t::dict_nilnode	matrix_generator/dict.h	/^    dnode_t dict_nilnode;$/;"	m	struct:dict_t	access:public
dict_t::dict_nodecount	matrix_generator/dict.h	/^    dictcount_t dict_nodecount;$/;"	m	struct:dict_t	access:public
dict_upper_bound	matrix_generator/dict.c	/^dnode_t *dict_upper_bound(dict_t *dict, const void *key)$/;"	f	signature:(dict_t *dict, const void *key)
dict_upper_bound	matrix_generator/dict.h	/^extern dnode_t *dict_upper_bound(dict_t *, const void *);$/;"	p	signature:(dict_t *, const void *)
dict_verify	matrix_generator/dict.c	/^int dict_verify(dict_t *dict)$/;"	f	signature:(dict_t *dict)
dict_verify	matrix_generator/dict.h	/^extern int dict_verify(dict_t *);$/;"	p	signature:(dict_t *)
dictcount_t	matrix_generator/dict.h	/^typedef unsigned long dictcount_t;$/;"	t
dictptr	matrix_generator/dict.c	/^#define dictptr /;"	d	file:
die	bebop_util/smvm_util.h	/^#define die(/;"	d
die	spmvbench/timing.c	/^#define die(/;"	d	file:
die_with_message	bebop_util/smvm_util.h	/^#define die_with_message(/;"	d
die_with_message	spmvbench/timing.c	/^#define die_with_message(/;"	d	file:
die_with_usage	spmvbench/benchmark_tester.c	/^die_with_usage (const char* message, const char* argv0, const int errcode)$/;"	f	file:	signature:(const char* message, const char* argv0, const int errcode)
die_with_usage	spmvbench/main.c	/^die_with_usage (char* msg, int errcode)$/;"	f	file:	signature:(char* msg, int errcode)
directory_p	bebop_util/smvm_util.c	/^directory_p (const char* const path)$/;"	f	signature:(const char* const path)
directory_p	bebop_util/smvm_util.h	/^directory_p (const char* const path);$/;"	p	signature:(const char* const path)
dispatch_matrix_generator	matrix_generator/main.c	/^dispatch_matrix_generator (const char* const function_name, $/;"	f	file:	signature:(const char* const function_name, char *argument_list[], const int num_args_given)
dnode_alloc	matrix_generator/dict.c	/^static dnode_t *dnode_alloc(void *context)$/;"	f	file:	signature:(void *context)
dnode_alloc	matrix_generator/dict.c	/^static dnode_t *dnode_alloc(void *context);$/;"	p	file:	signature:(void *context)
dnode_alloc_t	matrix_generator/dict.h	/^typedef dnode_t *(*dnode_alloc_t)(void *);$/;"	t
dnode_black	matrix_generator/dict.h	/^typedef enum { dnode_red, dnode_black } dnode_color_t;$/;"	e	enum:__anon1
dnode_color_t	matrix_generator/dict.h	/^typedef enum { dnode_red, dnode_black } dnode_color_t;$/;"	t	typeref:enum:__anon1
dnode_create	matrix_generator/dict.c	/^dnode_t *dnode_create(void *data)$/;"	f	signature:(void *data)
dnode_create	matrix_generator/dict.h	/^extern dnode_t *dnode_create(void *);$/;"	p	signature:(void *)
dnode_destroy	matrix_generator/dict.c	/^void dnode_destroy(dnode_t *dnode)$/;"	f	signature:(dnode_t *dnode)
dnode_destroy	matrix_generator/dict.h	/^extern void dnode_destroy(dnode_t *);$/;"	p	signature:(dnode_t *)
dnode_free	matrix_generator/dict.c	/^static void dnode_free(dnode_t *node, void *context)$/;"	f	file:	signature:(dnode_t *node, void *context)
dnode_free	matrix_generator/dict.c	/^static void dnode_free(dnode_t *node, void *context);$/;"	p	file:	signature:(dnode_t *node, void *context)
dnode_free_t	matrix_generator/dict.h	/^typedef void (*dnode_free_t)(dnode_t *, void *);$/;"	t
dnode_get	matrix_generator/dict.c	/^#undef dnode_get$/;"	d	file:
dnode_get	matrix_generator/dict.c	/^void *dnode_get(dnode_t *dnode)$/;"	f	signature:(dnode_t *dnode)
dnode_get	matrix_generator/dict.h	/^#define dnode_get(/;"	d
dnode_get	matrix_generator/dict.h	/^extern void *dnode_get(dnode_t *);$/;"	p	signature:(dnode_t *)
dnode_getkey	matrix_generator/dict.c	/^#undef dnode_getkey$/;"	d	file:
dnode_getkey	matrix_generator/dict.c	/^const void *dnode_getkey(dnode_t *dnode)$/;"	f	signature:(dnode_t *dnode)
dnode_getkey	matrix_generator/dict.h	/^#define dnode_getkey(/;"	d
dnode_getkey	matrix_generator/dict.h	/^extern const void *dnode_getkey(dnode_t *);$/;"	p	signature:(dnode_t *)
dnode_init	matrix_generator/dict.c	/^dnode_t *dnode_init(dnode_t *dnode, void *data)$/;"	f	signature:(dnode_t *dnode, void *data)
dnode_init	matrix_generator/dict.h	/^extern dnode_t *dnode_init(dnode_t *, void *);$/;"	p	signature:(dnode_t *, void *)
dnode_is_in_a_dict	matrix_generator/dict.c	/^int dnode_is_in_a_dict(dnode_t *dnode)$/;"	f	signature:(dnode_t *dnode)
dnode_is_in_a_dict	matrix_generator/dict.h	/^extern int dnode_is_in_a_dict(dnode_t *);$/;"	p	signature:(dnode_t *)
dnode_process_t	matrix_generator/dict.h	/^typedef void (*dnode_process_t)(dict_t *, dnode_t *, void *);$/;"	t
dnode_put	matrix_generator/dict.c	/^#undef dnode_put$/;"	d	file:
dnode_put	matrix_generator/dict.c	/^void dnode_put(dnode_t *dnode, void *data)$/;"	f	signature:(dnode_t *dnode, void *data)
dnode_put	matrix_generator/dict.h	/^#define dnode_put(/;"	d
dnode_put	matrix_generator/dict.h	/^extern void dnode_put(dnode_t *, void *);$/;"	p	signature:(dnode_t *, void *)
dnode_red	matrix_generator/dict.h	/^typedef enum { dnode_red, dnode_black } dnode_color_t;$/;"	e	enum:__anon1
dnode_t	matrix_generator/dict.h	/^typedef struct dnode_t {$/;"	s
dnode_t	matrix_generator/dict.h	/^} dnode_t;$/;"	t	typeref:struct:dnode_t
dnode_t::dict_color	matrix_generator/dict.h	/^    dnode_color_t dict_color;$/;"	m	struct:dnode_t	access:public
dnode_t::dict_data	matrix_generator/dict.h	/^    void *dict_data;$/;"	m	struct:dnode_t	access:public
dnode_t::dict_key	matrix_generator/dict.h	/^    const void *dict_key;$/;"	m	struct:dnode_t	access:public
dnode_t::dict_left	matrix_generator/dict.h	/^    struct dnode_t *dict_left;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
dnode_t::dict_parent	matrix_generator/dict.h	/^    struct dnode_t *dict_parent;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
dnode_t::dict_right	matrix_generator/dict.h	/^    struct dnode_t *dict_right;$/;"	m	struct:dnode_t	typeref:struct:dnode_t::dnode_t	access:public
do_partition	spmvbench/scripts/partition_test.pl	/^sub do_partition {$/;"	s
do_validate_matrix	bebop_util/main.c	/^do_validate_matrix (int argc, char *argv[], struct arginfo* arglist)$/;"	f	file:	signature:(int argc, char *argv[], struct arginfo* arglist)
do_validate_matrix	sparse_matrix_converter/main.c	/^do_validate_matrix (int argc, char *argv[], struct arginfo* arglist)$/;"	f	file:	signature:(int argc, char *argv[], struct arginfo* arglist)
double_Complex	bebop_util/__complex.h	/^typedef double _Complex  double_Complex;$/;"	t
double_Complex	bebop_util/__complex.h	/^} double_Complex;$/;"	t	typeref:struct:__anon4
double_Complex_I	bebop_util/__complex.c	/^const double_Complex double_Complex_I = {0.0, 1.0};$/;"	v
double_Complex_I	bebop_util/__complex.h	/^#  define double_Complex_I /;"	d
double_Complex_I	bebop_util/__complex.h	/^const double_Complex double_Complex_I;$/;"	v
double_Complex_ZERO	bebop_util/__complex.c	/^const double_Complex double_Complex_ZERO = {0.0, 0.0};$/;"	v
double_Complex_ZERO	bebop_util/__complex.h	/^#  define double_Complex_ZERO /;"	d
double_Complex_ZERO	bebop_util/__complex.h	/^const double_Complex double_Complex_ZERO;$/;"	v
double_Complex_add	bebop_util/__complex.c	/^double_Complex_add (const double_Complex a, const double_Complex b)$/;"	f	signature:(const double_Complex a, const double_Complex b)
double_Complex_add	bebop_util/__complex.h	/^#  define double_Complex_add(/;"	d
double_Complex_add	bebop_util/__complex.h	/^double_Complex_add (const double_Complex a, const double_Complex b);$/;"	p	signature:(const double_Complex a, const double_Complex b)
double_Complex_cabs	bebop_util/__complex.c	/^double_Complex_cabs (const double_Complex a)$/;"	f	signature:(const double_Complex a)
double_Complex_cabs	bebop_util/__complex.h	/^#  define double_Complex_cabs /;"	d
double_Complex_cabs	bebop_util/__complex.h	/^double_Complex_cabs (const double_Complex a);$/;"	p	signature:(const double_Complex a)
double_Complex_conj	bebop_util/__complex.c	/^double_Complex_conj (const double_Complex a)$/;"	f	signature:(const double_Complex a)
double_Complex_conj	bebop_util/__complex.h	/^#  define double_Complex_conj(/;"	d
double_Complex_conj	bebop_util/__complex.h	/^double_Complex_conj (const double_Complex a);$/;"	p	signature:(const double_Complex a)
double_Complex_equal	bebop_util/__complex.c	/^double_Complex_equal (const double_Complex a, const double_Complex b)$/;"	f	signature:(const double_Complex a, const double_Complex b)
double_Complex_equal	bebop_util/__complex.h	/^#  define double_Complex_equal(/;"	d
double_Complex_equal	bebop_util/__complex.h	/^double_Complex_equal (const double_Complex a, const double_Complex b);$/;"	p	signature:(const double_Complex a, const double_Complex b)
double_Complex_imag_part	bebop_util/__complex.c	/^double_Complex_imag_part (const double_Complex a)$/;"	f	signature:(const double_Complex a)
double_Complex_imag_part	bebop_util/__complex.h	/^#  define double_Complex_imag_part(/;"	d
double_Complex_imag_part	bebop_util/__complex.h	/^double_Complex_imag_part (const double_Complex a);$/;"	p	signature:(const double_Complex a)
double_Complex_multiply	bebop_util/__complex.c	/^double_Complex_multiply (const double_Complex a, const double_Complex b)$/;"	f	signature:(const double_Complex a, const double_Complex b)
double_Complex_multiply	bebop_util/__complex.h	/^#  define double_Complex_multiply(/;"	d
double_Complex_multiply	bebop_util/__complex.h	/^double_Complex_multiply (const double_Complex a, const double_Complex b);$/;"	p	signature:(const double_Complex a, const double_Complex b)
double_Complex_negate	bebop_util/__complex.c	/^double_Complex_negate (const double_Complex a)$/;"	f	signature:(const double_Complex a)
double_Complex_negate	bebop_util/__complex.h	/^#  define double_Complex_negate(/;"	d
double_Complex_negate	bebop_util/__complex.h	/^double_Complex_negate (const double_Complex a);$/;"	p	signature:(const double_Complex a)
double_Complex_not_equal	bebop_util/__complex.c	/^double_Complex_not_equal (const double_Complex a, const double_Complex b)$/;"	f	signature:(const double_Complex a, const double_Complex b)
double_Complex_not_equal	bebop_util/__complex.h	/^#  define double_Complex_not_equal(/;"	d
double_Complex_not_equal	bebop_util/__complex.h	/^double_Complex_not_equal (const double_Complex a, const double_Complex b);$/;"	p	signature:(const double_Complex a, const double_Complex b)
double_Complex_real_part	bebop_util/__complex.c	/^double_Complex_real_part (const double_Complex a)$/;"	f	signature:(const double_Complex a)
double_Complex_real_part	bebop_util/__complex.h	/^#  define double_Complex_real_part(/;"	d
double_Complex_real_part	bebop_util/__complex.h	/^double_Complex_real_part (const double_Complex a);$/;"	p	signature:(const double_Complex a)
double_rotate_with_left	bebop_util/avltree_intpair.c	/^double_rotate_with_left (avl_position_intpair K3)$/;"	f	file:	signature:(avl_position_intpair K3)
double_rotate_with_left	spmvbench/avltree.c	/^double_rotate_with_left (avl_position K3)$/;"	f	file:	signature:(avl_position K3)
double_rotate_with_right	bebop_util/avltree_intpair.c	/^double_rotate_with_right (avl_position_intpair K1)$/;"	f	file:	signature:(avl_position_intpair K1)
double_rotate_with_right	spmvbench/avltree.c	/^double_rotate_with_right (avl_position K1)$/;"	f	file:	signature:(avl_position K1)
dump_arg	bebop_util/get_options.c	/^dump_arg (FILE* out, const struct arginfo* arg)$/;"	f	signature:(FILE* out, const struct arginfo* arg)
dump_args	bebop_util/get_options.c	/^dump_args (FILE* out, const struct arginfo* arg)$/;"	f	signature:(FILE* out, const struct arginfo* arg)
dump_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^dump_bcsr_matrix (FILE* out, const struct bcsr_matrix_t* A)$/;"	f	signature:(FILE* out, const struct bcsr_matrix_t* A)
dump_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^dump_bcsr_matrix (FILE* out, const struct bcsr_matrix_t* A);$/;"	p	signature:(FILE* out, const struct bcsr_matrix_t* A)
dump_usage	bebop_util/get_options.c	/^dump_usage (FILE* out, $/;"	f	signature:(FILE* out, const char *const pathname, struct arginfo *core_args, struct arginfo *ext_args)
dump_usage	bebop_util/get_options.h	/^dump_usage (FILE* out, $/;"	p	signature:(FILE* out, const char *const pathname, struct arginfo *core_args, struct arginfo *ext_args)
dupes	matrix_generator/dict.c	/^#define dupes /;"	d	file:
dupstring	matrix_generator/dict.c	/^static char *dupstring(char *str)$/;"	f	file:	signature:(char *str)
element	bebop_util/avltree_intpair.c	/^element (avl_position_intpair p)$/;"	f	file:	signature:(avl_position_intpair p)
element	bebop_util/avltree_intpair.h	/^  element_type element;   $/;"	m	struct:avl_node_intpair	access:public
element	spmvbench/avltree.c	/^element (avl_position p)$/;"	f	file:	signature:(avl_position p)
element	spmvbench/avltree.h	/^  element_type element;   $/;"	m	struct:avl_node	access:public
element_type	bebop_util/avltree_intpair.h	/^typedef struct int_pair element_type;$/;"	t	typeref:struct:int_pair
element_type	spmvbench/avltree.h	/^typedef struct int_pair element_type;$/;"	t	typeref:struct:int_pair
errcode	spmvbench/smvm_benchmark_results.h	/^  int errcode;$/;"	m	struct:SMVM_benchmark_results	access:public
est_runtime	hpcc_spmv_benchmark/benchmark_params.h	/^    int est_runtime;$/;"	m	struct:__anon2	access:public
export_spvec	sparse_matrix_converter/spvec.c	/^export_spvec (int* ind, void* val, struct spvec_t* x)$/;"	f	signature:(int* ind, void* val, struct spvec_t* x)
export_spvec	sparse_matrix_converter/spvec.h	/^export_spvec (int* ind, void* val, struct spvec_t* x);$/;"	p	signature:(int* ind, void* val, struct spvec_t* x)
export_spvec_complex	sparse_matrix_converter/spvec.c	/^export_spvec_complex (int* ind, double_Complex* val, struct spvec_t* x)$/;"	f	file:	signature:(int* ind, double_Complex* val, struct spvec_t* x)
export_spvec_double	sparse_matrix_converter/spvec.c	/^export_spvec_double (int* ind, double* val, struct spvec_t* x)$/;"	f	file:	signature:(int* ind, double* val, struct spvec_t* x)
export_spvec_pattern	sparse_matrix_converter/spvec.c	/^export_spvec_pattern (int* ind, struct spvec_t* x)$/;"	f	file:	signature:(int* ind, struct spvec_t* x)
extended_identity_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^extended_identity_bcsr_matrix (const int bm, const int bn, const int r, const int c);$/;"	p	signature:(const int bm, const int bn, const int r, const int c)
failure	spmvbench/smvm_benchmark_results.h	/^  int failure;$/;"	m	struct:SMVM_benchmark_results	access:public
file_exists	spmvbench/smvm_get_output_file.c	/^file_exists (const char filename[])$/;"	f	signature:(const char filename[])
fill_with_random_block	spmvbench/fill_with_random_block.c	/^fill_with_random_block (double values[], const int row_size, $/;"	f	signature:(double values[], const int row_size, const int col_size, const int start_index, const int reproducible, const int row_major_block)
fill_with_random_block	spmvbench/fill_with_random_block.h	/^fill_with_random_block (double values[], const int row_size, $/;"	p	signature:(double values[], const int row_size, const int col_size, const int start_index, const int reproducible, const int row_major_block)
filter_small_elements	sparse_matrix_converter/sparse_vector.c	/^filter_small_elements (const struct sparse_vector_t* x, const double tol)$/;"	f	signature:(const struct sparse_vector_t* x, const double tol)
filter_small_elements	sparse_matrix_converter/sparse_vector.h	/^filter_small_elements (const struct sparse_vector_t* x, const double tol);$/;"	p	signature:(const struct sparse_vector_t* x, const double tol)
filter_small_elements	sparse_matrix_converter/spvec.c	/^filter_small_elements (const struct spvec_t* x, const double tol)$/;"	f	signature:(const struct spvec_t* x, const double tol)
filter_small_elements	sparse_matrix_converter/spvec.h	/^filter_small_elements (const struct spvec_t* x, const double tol);$/;"	p	signature:(const struct spvec_t* x, const double tol)
find	spmvbench/avltree.c	/^find (element_type X, avl_tree T)$/;"	f	signature:(element_type X, avl_tree T)
find	spmvbench/avltree.h	/^find (element_type X, avl_tree T);$/;"	p	signature:(element_type X, avl_tree T)
find_arginfo	bebop_util/get_options.c	/^find_arginfo (struct arginfo *list, const char c)$/;"	f	signature:(struct arginfo *list, const char c)
find_arginfo	bebop_util/get_options.h	/^find_arginfo (struct arginfo *list, const char c);$/;"	p	signature:(struct arginfo *list, const char c)
find_intpair	bebop_util/avltree_intpair.c	/^find_intpair (element_type X, avl_tree_intpair T)$/;"	f	signature:(element_type X, avl_tree_intpair T)
find_intpair	bebop_util/avltree_intpair.h	/^find_intpair (element_type X, avl_tree_intpair T);$/;"	p	signature:(element_type X, avl_tree_intpair T)
find_max	spmvbench/avltree.c	/^find_max (avl_tree T)$/;"	f	signature:(avl_tree T)
find_max	spmvbench/avltree.h	/^find_max (avl_tree T);$/;"	p	signature:(avl_tree T)
find_max_intpair	bebop_util/avltree_intpair.c	/^find_max_intpair (avl_tree_intpair T)$/;"	f	signature:(avl_tree_intpair T)
find_max_intpair	bebop_util/avltree_intpair.h	/^find_max_intpair (avl_tree_intpair T);$/;"	p	signature:(avl_tree_intpair T)
find_min	spmvbench/avltree.c	/^find_min (avl_tree T)$/;"	f	signature:(avl_tree T)
find_min	spmvbench/avltree.h	/^find_min (avl_tree T);$/;"	p	signature:(avl_tree T)
find_min_intpair	bebop_util/avltree_intpair.c	/^find_min_intpair (avl_tree_intpair T)$/;"	f	signature:(avl_tree_intpair T)
find_min_intpair	bebop_util/avltree_intpair.h	/^find_min_intpair (avl_tree_intpair T);$/;"	p	signature:(avl_tree_intpair T)
find_timer_granularity	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^double find_timer_granularity(double *dummyval) {$/;"	f	signature:(double *dummyval)
first	bebop_util/avltree_intpair.h	/^  int first;  $/;"	m	struct:int_pair	access:public
first	spmvbench/avltree.h	/^  int first;  $/;"	m	struct:int_pair	access:public
first_u	spmvbench/timing.c	/^struct itimerval first_u; \/* user time *\/$/;"	v	typeref:struct:itimerval
flops	spmvbench/smvm_timing_run.c	/^flops (const int r, const int c, const int nnzb)$/;"	f	signature:(const int r, const int c, const int nnzb)
flops	spmvbench/smvm_timing_run.h	/^flops (const int r, const int c, const int nnzb);$/;"	p	signature:(const int r, const int c, const int nnzb)
fnname_to_fnptr	matrix_generator/main.c	/^static dict_t* fnname_to_fnptr = NULL;$/;"	v	file:
fnname_to_nargs	matrix_generator/main.c	/^static dict_t* fnname_to_nargs = NULL;$/;"	v	file:
fnnames	matrix_generator/main.c	/^static char* fnnames[] = {$/;"	v	file:
format	sparse_matrix_converter/sparse_matrix.h	/^  enum sparse_matrix_storage_format_t format;$/;"	m	struct:sparse_matrix_t	typeref:enum:sparse_matrix_t::sparse_matrix_storage_format_t	access:public
free_nodes	matrix_generator/dict.c	/^static void free_nodes(dict_t *dict, dnode_t *node, dnode_t *nil)$/;"	f	file:	signature:(dict_t *dict, dnode_t *node, dnode_t *nil)
freenode	matrix_generator/dict.c	/^#define freenode /;"	d	file:
gather_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^gather_sparse_vector (struct sparse_vector_t* sv, const double* dv, $/;"	f	signature:(struct sparse_vector_t* sv, const double* dv, const int n, const double tol)
gather_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^gather_sparse_vector (struct sparse_vector_t* sv, const double* dv, $/;"	p	signature:(struct sparse_vector_t* sv, const double* dv, const int n, const double tol)
genrand_int31	bebop_util/mt19937ar.c	/^long genrand_int31(void)$/;"	f	signature:(void)
genrand_int31	bebop_util/random_number.c	/^genrand_int31 (void);$/;"	p	file:	signature:(void)
genrand_int32	bebop_util/mt19937ar.c	/^unsigned long genrand_int32(void)$/;"	f	signature:(void)
genrand_int32	bebop_util/random_number.c	/^genrand_int32 (void);$/;"	p	file:	signature:(void)
genrand_real1	bebop_util/mt19937ar.c	/^double genrand_real1(void)$/;"	f	signature:(void)
genrand_real2	bebop_util/mt19937ar.c	/^double genrand_real2(void)$/;"	f	signature:(void)
genrand_real3	bebop_util/mt19937ar.c	/^double genrand_real3(void)$/;"	f	signature:(void)
genrand_res53	bebop_util/mt19937ar.c	/^double genrand_res53(void) $/;"	f	signature:(void)
genrand_res53	bebop_util/random_number.c	/^genrand_res53 (void);$/;"	p	file:	signature:(void)
get_double_argval	bebop_util/get_options.c	/^get_double_argval (const struct arginfo* arg)$/;"	f	signature:(const struct arginfo* arg)
get_double_argval	bebop_util/get_options.h	/^get_double_argval (const struct arginfo* arg);$/;"	p	signature:(const struct arginfo* arg)
get_double_default_argval	bebop_util/get_options.c	/^get_double_default_argval (const struct arginfo* arg)$/;"	f	signature:(const struct arginfo* arg)
get_from_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.c	/^get_from_smvm_benchmark_results_array (struct SMVM_benchmark_results_array *p, $/;"	f	signature:(struct SMVM_benchmark_results_array *p, const int index)
get_from_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.h	/^get_from_smvm_benchmark_results_array (struct SMVM_benchmark_results_array *p, $/;"	p	signature:(struct SMVM_benchmark_results_array *p, const int index)
get_int_argval	bebop_util/get_options.c	/^get_int_argval (const struct arginfo* arg)$/;"	f	signature:(const struct arginfo* arg)
get_int_argval	bebop_util/get_options.h	/^get_int_argval (const struct arginfo* arg);$/;"	p	signature:(const struct arginfo* arg)
get_int_default_argval	bebop_util/get_options.c	/^get_int_default_argval (const struct arginfo* arg)$/;"	f	file:	signature:(const struct arginfo* arg)
get_options	bebop_util/get_options.c	/^get_options (int argc, $/;"	f	signature:(int argc, char **argv, struct arginfo *core_args, struct arginfo *ext_args)
get_options	bebop_util/get_options.h	/^get_options (int argc, $/;"	p	signature:(int argc, char **argv, struct arginfo *core_args, struct arginfo *ext_args)
get_seconds	bebop_util/timer.c	/^get_seconds()$/;"	f
get_seconds	bebop_util/timer.h	/^get_seconds();$/;"	p	signature:()
get_seconds	spmvbench/timing.c	/^double get_seconds()$/;"	f
get_seconds	spmvbench/timing.c	/^double get_seconds(){$/;"	f
get_seconds	spmvbench/timing.c	/^double get_seconds(void) $/;"	f	signature:(void)
get_seconds	spmvbench/timing.c	/^get_seconds()$/;"	f
get_seconds	spmvbench/timing.h	/^get_seconds();$/;"	p	signature:()
get_sparse_vector_index	sparse_matrix_converter/sparse_vector.c	/^get_sparse_vector_index (struct sparse_vector_t* v, const int i)$/;"	f	signature:(struct sparse_vector_t* v, const int i)
get_sparse_vector_index	sparse_matrix_converter/sparse_vector.h	/^get_sparse_vector_index (struct sparse_vector_t* v, const int i);$/;"	p	signature:(struct sparse_vector_t* v, const int i)
get_sparse_vector_value	sparse_matrix_converter/sparse_vector.c	/^get_sparse_vector_value (const struct sparse_vector_t* v, const int i)$/;"	f	signature:(const struct sparse_vector_t* v, const int i)
get_sparse_vector_value	sparse_matrix_converter/sparse_vector.h	/^get_sparse_vector_value (const struct sparse_vector_t* v, const int i);$/;"	p	signature:(const struct sparse_vector_t* v, const int i)
get_spvec_index	sparse_matrix_converter/spvec.c	/^get_spvec_index (struct spvec_t* v, const int i)$/;"	f	signature:(struct spvec_t* v, const int i)
get_spvec_index	sparse_matrix_converter/spvec.h	/^get_spvec_index (struct spvec_t* v, const int i);$/;"	p	signature:(struct spvec_t* v, const int i)
get_string_argval	bebop_util/get_options.c	/^get_string_argval (const struct arginfo* arg)$/;"	f	signature:(const struct arginfo* arg)
get_string_argval	bebop_util/get_options.h	/^get_string_argval (const struct arginfo* arg);$/;"	p	signature:(const struct arginfo* arg)
get_string_default_argval	bebop_util/get_options.c	/^get_string_default_argval (const struct arginfo* arg)$/;"	f	signature:(const struct arginfo* arg)
got_arg	bebop_util/get_options.c	/^  int got_arg;$/;"	m	struct:arginfo	file:	access:public
got_arg_p	bebop_util/get_options.c	/^got_arg_p (struct arginfo *list, const char c)$/;"	f	signature:(struct arginfo *list, const char c)
got_arg_p	bebop_util/get_options.h	/^got_arg_p (struct arginfo *list, const char c);$/;"	p	signature:(struct arginfo *list, const char c)
got_arg_value	bebop_util/get_options.c	/^  int got_arg_value;$/;"	m	struct:arginfo	file:	access:public
got_arg_value_p	bebop_util/get_options.c	/^got_arg_value_p (struct arginfo *list, const char c)$/;"	f	signature:(struct arginfo *list, const char c)
got_arg_value_p	bebop_util/get_options.h	/^got_arg_value_p (struct arginfo *list, const char c);$/;"	p	signature:(struct arginfo *list, const char c)
height	bebop_util/avltree_intpair.c	/^height (avl_position_intpair P)$/;"	f	file:	signature:(avl_position_intpair P)
height	bebop_util/avltree_intpair.h	/^  int height;             $/;"	m	struct:avl_node_intpair	access:public
height	spmvbench/avltree.c	/^height (avl_position P)$/;"	f	file:	signature:(avl_position P)
height	spmvbench/avltree.h	/^  int height;             $/;"	m	struct:avl_node	access:public
high	bebop_util/random_number.h	/^  int low, high;  $/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
hpcc_spmv_benchmark	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^int hpcc_spmv_benchmark(hpcc_spmv_params* bench_params, int write_to_files, int text_output) {$/;"	f	signature:(hpcc_spmv_params* bench_params, int write_to_files, int text_output)
hpcc_spmv_benchmark	hpcc_spmv_benchmark/hpcc_spmv_benchmark.h	/^int hpcc_spmv_benchmark(hpcc_spmv_params* bench_params, int write_to_files, int text_output);$/;"	p	signature:(hpcc_spmv_params* bench_params, int write_to_files, int text_output)
hpcc_spmv_benchmark_h	hpcc_spmv_benchmark/hpcc_spmv_benchmark.h	/^#define hpcc_spmv_benchmark_h$/;"	d
hpcc_spmv_params	hpcc_spmv_benchmark/benchmark_params.h	/^} hpcc_spmv_params;$/;"	t	typeref:struct:__anon2
i	bebop_util/get_options.c	/^    int i;$/;"	m	union:arginfo::__anon3	file:	access:public
identity_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^identity_bcsr_matrix (const int n);$/;"	p	signature:(const int n)
idx	sparse_matrix_converter/sparse_vector.h	/^  int*    idx;$/;"	m	struct:sparse_vector_t	access:public
idx	sparse_matrix_converter/spvec.h	/^  int* idx;$/;"	m	struct:spvec_t	access:public
imag	bebop_util/__complex.h	/^  double imag;$/;"	m	struct:__anon4	access:public
index	sparse_matrix_converter/csc_matrix.c	/^  int index;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index	sparse_matrix_converter/csc_matrix.c	/^  int index;$/;"	m	struct:index_real_value_pair_t	file:	access:public
index	sparse_matrix_converter/csr_matrix.c	/^  int index;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index	sparse_matrix_converter/csr_matrix.c	/^  int index;$/;"	m	struct:index_real_value_pair_t	file:	access:public
index_base	sparse_matrix_converter/bcoo_matrix.h	/^  enum index_base_t index_base;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::index_base_t	access:public
index_base	sparse_matrix_converter/coo_matrix.h	/^  enum index_base_t index_base;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::index_base_t	access:public
index_base_t	bebop_util/enumerations.h	/^index_base_t {ZERO = 0, ONE = 1};$/;"	g
index_complex_value_pair_t	sparse_matrix_converter/csc_matrix.c	/^struct index_complex_value_pair_t$/;"	s	file:
index_complex_value_pair_t	sparse_matrix_converter/csr_matrix.c	/^struct index_complex_value_pair_t$/;"	s	file:
index_complex_value_pair_t::index	sparse_matrix_converter/csc_matrix.c	/^  int index;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index_complex_value_pair_t::index	sparse_matrix_converter/csr_matrix.c	/^  int index;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index_complex_value_pair_t::value	sparse_matrix_converter/csc_matrix.c	/^  double_Complex value;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index_complex_value_pair_t::value	sparse_matrix_converter/csr_matrix.c	/^  double_Complex value;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
index_real_value_pair_t	sparse_matrix_converter/csc_matrix.c	/^struct index_real_value_pair_t$/;"	s	file:
index_real_value_pair_t	sparse_matrix_converter/csr_matrix.c	/^struct index_real_value_pair_t$/;"	s	file:
index_real_value_pair_t::index	sparse_matrix_converter/csc_matrix.c	/^  int index;$/;"	m	struct:index_real_value_pair_t	file:	access:public
index_real_value_pair_t::index	sparse_matrix_converter/csr_matrix.c	/^  int index;$/;"	m	struct:index_real_value_pair_t	file:	access:public
index_real_value_pair_t::value	sparse_matrix_converter/csc_matrix.c	/^  double value;$/;"	m	struct:index_real_value_pair_t	file:	access:public
index_real_value_pair_t::value	sparse_matrix_converter/csr_matrix.c	/^  double value;$/;"	m	struct:index_real_value_pair_t	file:	access:public
infinity_norm_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^infinity_norm_sparse_vector (const struct sparse_vector_t* v)$/;"	f	signature:(const struct sparse_vector_t* v)
infinity_norm_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^infinity_norm_sparse_vector (const struct sparse_vector_t* v);$/;"	p	signature:(const struct sparse_vector_t* v)
init	matrix_generator/main.c	/^init (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
init_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^init_bcsr_matrix (struct bcsr_matrix_t* A, const int bm, const int bn, $/;"	f	signature:(struct bcsr_matrix_t* A, const int bm, const int bn, const int r, const int c, const int nnzb, void* values, int* colind, int* rowptr, const enum symmetry_type_t symmetry_type, const enum symmetric_storage_location_t symmetric_storage_location, const enum value_type_t value_type, const int col_oriented_p)
init_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^init_bcsr_matrix (struct bcsr_matrix_t* A, const int bm, const int bn, $/;"	p	signature:(struct bcsr_matrix_t* A, const int bm, const int bn, const int r, const int c, const int nnzb, void* values, int* colind, int* rowptr, const enum symmetry_type_t symmetry_type, const enum symmetric_storage_location_t symmetric_storage_location, const enum value_type_t value_type, const int col_oriented_p)
init_by_array	bebop_util/mt19937ar.c	/^void init_by_array(unsigned long init_key[], int key_length)$/;"	f	signature:(unsigned long init_key[], int key_length)
init_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^init_coo_matrix (struct coo_matrix_t *A, int m, int n, int nnz, int *II, $/;"	f	signature:(struct coo_matrix_t *A, int m, int n, int nnz, int *II, int *JJ, void *val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^init_coo_matrix (struct coo_matrix_t *A, int m, int n, int nnz, int *II, $/;"	p	signature:(struct coo_matrix_t *A, int m, int n, int nnz, int *II, int *JJ, void *val, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^init_csc_matrix (struct csc_matrix_t* A, $/;"	f	signature:(struct csc_matrix_t* A, const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^init_csc_matrix (struct csc_matrix_t* A, $/;"	p	signature:(struct csc_matrix_t* A, const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^init_csr_matrix (struct csr_matrix_t* A, $/;"	f	signature:(struct csr_matrix_t* A, const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^init_csr_matrix (struct csr_matrix_t* A, $/;"	p	signature:(struct csr_matrix_t* A, const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
init_dicts	matrix_generator/main.c	/^init_dicts ()$/;"	f	file:
init_genrand	bebop_util/mt19937ar.c	/^void init_genrand(unsigned long s)$/;"	f	signature:(unsigned long s)
init_genrand	bebop_util/random_number.c	/^init_genrand (unsigned long s);$/;"	p	file:	signature:(unsigned long s)
init_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.c	/^init_smvm_benchmark_results_array (struct SMVM_benchmark_results_array* p)$/;"	f	signature:(struct SMVM_benchmark_results_array* p)
init_smvm_benchmark_results_array	spmvbench/smvm_benchmark_results.h	/^init_smvm_benchmark_results_array (struct SMVM_benchmark_results_array* p);$/;"	p	signature:(struct SMVM_benchmark_results_array* p)
init_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^init_sparse_vector (struct sparse_vector_t* v, const int initial_length)$/;"	f	signature:(struct sparse_vector_t* v, const int initial_length)
init_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^init_sparse_vector (struct sparse_vector_t* v, const int initial_length);$/;"	p	signature:(struct sparse_vector_t* v, const int initial_length)
init_spvec	sparse_matrix_converter/spvec.c	/^init_spvec (struct spvec_t* v, const int initial_length, $/;"	f	signature:(struct spvec_t* v, const int initial_length, const enum value_type_t value_type)
init_spvec	sparse_matrix_converter/spvec.h	/^init_spvec (struct spvec_t* v, const int initial_length);$/;"	p	signature:(struct spvec_t* v, const int initial_length)
init_timer	bebop_util/timer.c	/^init_timer()$/;"	f
init_timer	bebop_util/timer.h	/^init_timer();$/;"	p	signature:()
init_timer	spmvbench/timing.c	/^init_timer(void) $/;"	f	signature:(void)
init_timer	spmvbench/timing.c	/^init_timer(void)$/;"	f	signature:(void)
init_timer	spmvbench/timing.c	/^void init_timer( void )$/;"	f	signature:( void )
init_timer	spmvbench/timing.c	/^void init_timer(void) $/;"	f	signature:(void)
init_timer	spmvbench/timing.c	/^void init_timer(void)$/;"	f	signature:(void)
init_timer	spmvbench/timing.h	/^init_timer();$/;"	p	signature:()
input	sparse_matrix_converter/prompt.y	/^input:  \/* empty *\/$/;"	l
input_file_format	bebop_util/main.c	/^  char* input_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
input_file_format	sparse_matrix_converter/main.c	/^  char* input_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
input_filename	bebop_util/main.c	/^  char* input_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
input_filename	sparse_matrix_converter/main.c	/^  char* input_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
input_t	matrix_generator/dict.c	/^typedef char input_t[256];$/;"	t	file:
insert	spmvbench/avltree.c	/^insert (element_type X, avl_tree T)$/;"	f	signature:(element_type X, avl_tree T)
insert	spmvbench/avltree.h	/^insert (element_type X, avl_tree T);$/;"	p	signature:(element_type X, avl_tree T)
insert_intpair	bebop_util/avltree_intpair.c	/^insert_intpair (element_type X, avl_tree_intpair T)$/;"	f	signature:(element_type X, avl_tree_intpair T)
insert_intpair	bebop_util/avltree_intpair.h	/^insert_intpair (element_type X, avl_tree_intpair T);$/;"	p	signature:(element_type X, avl_tree_intpair T)
int_pair	bebop_util/avltree_intpair.h	/^struct int_pair$/;"	s
int_pair	spmvbench/avltree.h	/^struct int_pair$/;"	s
int_pair::first	bebop_util/avltree_intpair.h	/^  int first;  $/;"	m	struct:int_pair	access:public
int_pair::first	spmvbench/avltree.h	/^  int first;  $/;"	m	struct:int_pair	access:public
int_pair::second	bebop_util/avltree_intpair.h	/^  int second; $/;"	m	struct:int_pair	access:public
int_pair::second	spmvbench/avltree.h	/^  int second; $/;"	m	struct:int_pair	access:public
interval_fracs	hpcc_spmv_benchmark/benchmark_params.h	/^    double *interval_fracs;$/;"	m	struct:__anon2	access:public
interval_fracs	spmvbench/smvm_benchmark.h	/^  double *interval_fracs;$/;"	m	struct:SMVM_parameters	access:public
jad_col_index	sparse_matrix_converter/jad_matrix.h	/^  int * jad_col_index;$/;"	m	struct:jad_matrix_t	access:public
jad_diag_start	sparse_matrix_converter/jad_matrix.h	/^  int* jad_diag_start;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t	sparse_matrix_converter/jad_matrix.h	/^struct jad_matrix_t $/;"	s
jad_matrix_t::Py	sparse_matrix_converter/jad_matrix.h	/^  double* Py;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::jad_col_index	sparse_matrix_converter/jad_matrix.h	/^  int * jad_col_index;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::jad_diag_start	sparse_matrix_converter/jad_matrix.h	/^  int* jad_diag_start;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::jad_prm_nto	sparse_matrix_converter/jad_matrix.h	/^  int* jad_prm_nto;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::jad_value	sparse_matrix_converter/jad_matrix.h	/^  void* jad_value;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::n_jagged_diagonals	sparse_matrix_converter/jad_matrix.h	/^  int n_jagged_diagonals;$/;"	m	struct:jad_matrix_t	access:public
jad_matrix_t::symmetric_storage_location	sparse_matrix_converter/jad_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::symmetric_storage_location_t	access:public
jad_matrix_t::symmetry_type	sparse_matrix_converter/jad_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::symmetry_type_t	access:public
jad_matrix_t::value_type	sparse_matrix_converter/jad_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::value_type_t	access:public
jad_prm_nto	sparse_matrix_converter/jad_matrix.h	/^  int* jad_prm_nto;$/;"	m	struct:jad_matrix_t	access:public
jad_value	sparse_matrix_converter/jad_matrix.h	/^  void* jad_value;$/;"	m	struct:jad_matrix_t	access:public
key	matrix_generator/dict.c	/^#define key /;"	d	file:
left	bebop_util/avltree_intpair.h	/^  struct avl_node_intpair* left;  $/;"	m	struct:avl_node_intpair	typeref:struct:avl_node_intpair::avl_node_intpair	access:public
left	matrix_generator/dict.c	/^#define left /;"	d	file:
left	spmvbench/avltree.h	/^  struct avl_node* left;  $/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node	access:public
len	sparse_matrix_converter/jad_matrix.c	/^  int len;$/;"	m	struct:row_len_str	file:	access:public
len	sparse_matrix_converter/sparse_vector.h	/^  int     len;$/;"	m	struct:sparse_vector_t	access:public
len	sparse_matrix_converter/spvec.h	/^  int     len;$/;"	m	struct:spvec_t	access:public
length_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^length_sparse_vector (const struct sparse_vector_t* v)$/;"	f	signature:(const struct sparse_vector_t* v)
length_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^length_sparse_vector (const struct sparse_vector_t* v);$/;"	p	signature:(const struct sparse_vector_t* v)
length_spvec	sparse_matrix_converter/spvec.c	/^length_spvec (const struct spvec_t* v)$/;"	f	signature:(const struct spvec_t* v)
length_spvec	sparse_matrix_converter/spvec.h	/^length_spvec (const struct spvec_t* v);$/;"	p	signature:(const struct spvec_t* v)
lib-bebop-util	sparse_matrix_converter/interface.lisp	/^(define-foreign-library lib-bebop-util$/;"	f
lib-sparse-matrix-converter	sparse_matrix_converter/interface.lisp	/^(define-foreign-library lib-sparse-matrix-converter$/;"	f
line	sparse_matrix_converter/prompt.y	/^line:   '\\n'                  $/;"	l
load_begin_internal	matrix_generator/dict.c	/^static void load_begin_internal(dict_load_t *load, dict_t *dict)$/;"	f	file:	signature:(dict_load_t *load, dict_t *dict)
load_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.c	/^load_coo_matrix_in_matlab_format (const char* const filename)$/;"	f	signature:(const char* const filename)
load_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.h	/^load_coo_matrix_in_matlab_format (const char* const filename);$/;"	p	signature:(const char* const filename)
load_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.c	/^load_sparse_matrix (enum sparse_matrix_file_format_t file_format, $/;"	f	signature:(enum sparse_matrix_file_format_t file_format, const char *const matrix_filename)
load_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.h	/^load_sparse_matrix (enum sparse_matrix_file_format_t file_format, $/;"	p	signature:(enum sparse_matrix_file_format_t file_format, const char *const matrix_filename)
loads	spmvbench/smvm_timing_run.c	/^loads (const int r, const int c, const int nnzb, const int num_block_rows)$/;"	f	signature:(const int r, const int c, const int nnzb, const int num_block_rows)
loads	spmvbench/smvm_timing_run.h	/^loads (const int r, const int c, const int nnzb, const int num_block_rows);$/;"	p	signature:(const int r, const int c, const int nnzb, const int num_block_rows)
low	bebop_util/random_number.h	/^  int low, high;  $/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
m	sparse_matrix_converter/coo_matrix.h	/^  int m;$/;"	m	struct:coo_matrix_t	access:public
m	sparse_matrix_converter/csc_matrix.h	/^  int m;$/;"	m	struct:csc_matrix_t	access:public
m	sparse_matrix_converter/csr_matrix.h	/^  int m;$/;"	m	struct:csr_matrix_t	access:public
m	spmvbench/smvm_benchmark.h	/^  int   m; $/;"	m	struct:SMVM_parameters	access:public
m	spmvbench/smvm_timing_results.h	/^  int m;$/;"	m	struct:SMVM_timing_results	access:public
main	bebop_util/main.c	/^main (int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	bebop_util/tests/test_random_number.c	/^main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	bebop_util/tests/test_sort_joint_arrays.c	/^main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	bebop_util/tests/test_split_pathname.c	/^main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	hpcc_spmv_benchmark/main.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	matrix_generator/dict.c	/^int main(void)$/;"	f	signature:(void)
main	matrix_generator/main.c	/^main (int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	sparse_matrix_converter/main.c	/^main (int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	spmvbench/benchmark_tester.c	/^main (int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	spmvbench/main.c	/^main (int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
make_empty	spmvbench/avltree.c	/^make_empty (avl_tree T)$/;"	f	signature:(avl_tree T)
make_empty	spmvbench/avltree.h	/^make_empty (avl_tree T);$/;"	p	signature:(avl_tree T)
make_empty_avl_tree_intpair	bebop_util/avltree_intpair.c	/^make_empty_avl_tree_intpair (avl_tree_intpair T)$/;"	f	signature:(avl_tree_intpair T)
make_empty_avl_tree_intpair	bebop_util/avltree_intpair.h	/^make_empty_avl_tree_intpair (avl_tree_intpair T);$/;"	p	signature:(avl_tree_intpair T)
matrix_type	matrix_generator/main.c	/^static char* matrix_type = NULL;$/;"	v	file:
mattypes	matrix_generator/main.c	/^static char* mattypes[] = {$/;"	v	file:
max	bebop_util/avltree_intpair.c	/^max (int lhs, int rhs)$/;"	f	file:	signature:(int lhs, int rhs)
max	spmvbench/avltree.c	/^max (int lhs, int rhs)$/;"	f	file:	signature:(int lhs, int rhs)
max_mem_KB	spmvbench/main.c	/^  int max_mem_KB;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
max_problem_dimension	hpcc_spmv_benchmark/benchmark_subset.c	/^int max_problem_dimension(hpcc_spmv_params *bench_params)$/;"	f	signature:(hpcc_spmv_params *bench_params)
max_problem_dimension	hpcc_spmv_benchmark/benchmark_subset.h	/^int max_problem_dimension(hpcc_spmv_params *bench_params);$/;"	p	signature:(hpcc_spmv_params *bench_params)
maxcount	matrix_generator/dict.c	/^#define maxcount /;"	d	file:
maxdim	hpcc_spmv_benchmark/benchmark_params.h	/^    int maxdim;$/;"	m	struct:__anon2	access:public
maxlen	sparse_matrix_converter/sparse_vector.h	/^  int     maxlen;$/;"	m	struct:sparse_vector_t	access:public
maxlen	sparse_matrix_converter/spvec.h	/^  int     maxlen;$/;"	m	struct:spvec_t	access:public
maxlen	spmvbench/smvm_benchmark_results.h	/^  int maxlen;$/;"	m	struct:SMVM_benchmark_results_array	access:public
median	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^double median(double *a, int nelems) {$/;"	f	signature:(double *a, int nelems)
median	hpcc_spmv_benchmark/hpcc_spmv_benchmark.h	/^double median(double *a, int nelems);$/;"	p	signature:(double *a, int nelems)
memmax	hpcc_spmv_benchmark/benchmark_params.h	/^    int memmax;$/;"	m	struct:__anon2	access:public
merge	bebop_util/merge_sort.c	/^merge (void* v, $/;"	f	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*), int start, int middle, int end)
merge	bebop_util/merge_sort.c	/^merge (void* v, $/;"	p	file:	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*), int start, int middle, int end)
merge_sort	bebop_util/merge_sort.c	/^merge_sort (void* v, $/;"	f	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*))
merge_sort	bebop_util/merge_sort.h	/^merge_sort (void* v, $/;"	p	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*))
merge_sort_helper	bebop_util/merge_sort.c	/^merge_sort_helper (void* v, $/;"	f	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*), int start, int end)
merge_sort_helper	bebop_util/merge_sort.c	/^merge_sort_helper (void* v, $/;"	p	file:	signature:(void* v, size_t nmemb, size_t size, int (*compar) (const void*, const void*), int start, int end)
mfh_calloc	bebop_util/smvm_malloc.c	/^mfh_calloc (size_t num_elements, size_t element_size, char* srcfile, $/;"	f	signature:(size_t num_elements, size_t element_size, char* srcfile, int linenum)
mfh_calloc	bebop_util/smvm_malloc.h	/^mfh_calloc (size_t num_elements, size_t element_size, char* srcfile, $/;"	p	signature:(size_t num_elements, size_t element_size, char* srcfile, int linenum)
mfh_free	bebop_util/smvm_malloc.c	/^mfh_free (void* ptr, char* srcfile, int linenum)$/;"	f	signature:(void* ptr, char* srcfile, int linenum)
mfh_free	bebop_util/smvm_malloc.h	/^mfh_free (void* ptr, char* srcfile, int linenum);$/;"	p	signature:(void* ptr, char* srcfile, int linenum)
mfh_malloc	bebop_util/smvm_malloc.c	/^mfh_malloc (size_t size, char* srcfile, int linenum)$/;"	f	signature:(size_t size, char* srcfile, int linenum)
mfh_malloc	bebop_util/smvm_malloc.h	/^mfh_malloc (size_t size, char* srcfile, int linenum);$/;"	p	signature:(size_t size, char* srcfile, int linenum)
mfh_realloc	bebop_util/smvm_malloc.c	/^mfh_realloc (void* ptr, size_t size, char* srcfile, int linenum)$/;"	f	signature:(void* ptr, size_t size, char* srcfile, int linenum)
mfh_realloc	bebop_util/smvm_malloc.h	/^mfh_realloc (void* ptr, size_t size, char* srcfile, int linenum);$/;"	p	signature:(void* ptr, size_t size, char* srcfile, int linenum)
mfh_upcase	sparse_matrix_converter/iohb.c	/^char* mfh_upcase (char* S);$/;"	p	file:	signature:(char* S)
mfh_upcase	sparse_matrix_converter/iohb.c	/^mfh_upcase (char* S)$/;"	f	signature:(char* S)
mflop_idx	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^int mflop_idx(int r_idx, int c_idx, int nnz_idx, int dim_idx, int numdims, int nnz_vals, int n_rdims) {$/;"	f	signature:(int r_idx, int c_idx, int nnz_idx, int dim_idx, int numdims, int nnz_vals, int n_rdims)
mflops	spmvbench/smvm_timing_results.h	/^  double mflops; $/;"	m	struct:SMVM_timing_results	access:public
mindim	hpcc_spmv_benchmark/benchmark_params.h	/^    int mindim;$/;"	m	struct:__anon2	access:public
mm_clear_typecode	sparse_matrix_converter/mmio.h	/^#define mm_clear_typecode(/;"	d
mm_initialize_typecode	sparse_matrix_converter/mmio.h	/^#define mm_initialize_typecode(/;"	d
mm_is_array	sparse_matrix_converter/mmio.h	/^#define mm_is_array(/;"	d
mm_is_complex	sparse_matrix_converter/mmio.h	/^#define mm_is_complex(/;"	d
mm_is_coordinate	sparse_matrix_converter/mmio.h	/^#define mm_is_coordinate(/;"	d
mm_is_dense	sparse_matrix_converter/mmio.h	/^#define mm_is_dense(/;"	d
mm_is_general	sparse_matrix_converter/mmio.h	/^#define mm_is_general(/;"	d
mm_is_hermitian	sparse_matrix_converter/mmio.h	/^#define mm_is_hermitian(/;"	d
mm_is_integer	sparse_matrix_converter/mmio.h	/^#define mm_is_integer(/;"	d
mm_is_matrix	sparse_matrix_converter/mmio.h	/^#define mm_is_matrix(/;"	d
mm_is_pattern	sparse_matrix_converter/mmio.h	/^#define mm_is_pattern(/;"	d
mm_is_real	sparse_matrix_converter/mmio.h	/^#define mm_is_real(/;"	d
mm_is_skew	sparse_matrix_converter/mmio.h	/^#define mm_is_skew(/;"	d
mm_is_sparse	sparse_matrix_converter/mmio.h	/^#define mm_is_sparse(/;"	d
mm_is_symmetric	sparse_matrix_converter/mmio.h	/^#define mm_is_symmetric(/;"	d
mm_is_valid	sparse_matrix_converter/mmio.c	/^int mm_is_valid(char* matcode)$/;"	f	signature:(char* matcode)
mm_is_valid	sparse_matrix_converter/mmio.h	/^int mm_is_valid(char* matcode);		\/* too complex for a macro *\/$/;"	p	signature:(char* matcode)
mm_read_banner	sparse_matrix_converter/mmio.c	/^int mm_read_banner(FILE *f, char** matcode)$/;"	f	signature:(FILE *f, char** matcode)
mm_read_banner	sparse_matrix_converter/mmio.h	/^int mm_read_banner(FILE *f, char** matcode);$/;"	p	signature:(FILE *f, char** matcode)
mm_read_mtx_array_size	sparse_matrix_converter/mmio.c	/^int mm_read_mtx_array_size(FILE *f, int *M, int *N)$/;"	f	signature:(FILE *f, int *M, int *N)
mm_read_mtx_array_size	sparse_matrix_converter/mmio.h	/^int mm_read_mtx_array_size(FILE *f, int *M, int *N);$/;"	p	signature:(FILE *f, int *M, int *N)
mm_read_mtx_crd	sparse_matrix_converter/mmio.c	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J, $/;"	f	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, char** matcode)
mm_read_mtx_crd_data	sparse_matrix_converter/mmio.c	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	f	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], char* matcode)
mm_read_mtx_crd_data	sparse_matrix_converter/mmio.h	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	p	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], char* matcode)
mm_read_mtx_crd_entry	sparse_matrix_converter/mmio.c	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J,$/;"	f	signature:(FILE *f, int *I, int *J, double *real, double *imag, char* matcode)
mm_read_mtx_crd_entry	sparse_matrix_converter/mmio.h	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J, double *real, double *img,$/;"	p	signature:(FILE *f, int *I, int *J, double *real, double *img, char* matcode)
mm_read_mtx_crd_size	sparse_matrix_converter/mmio.c	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz )$/;"	f	signature:(FILE *f, int *M, int *N, int *nz )
mm_read_mtx_crd_size	sparse_matrix_converter/mmio.h	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz);$/;"	p	signature:(FILE *f, int *M, int *N, int *nz)
mm_set_array	sparse_matrix_converter/mmio.h	/^#define mm_set_array(/;"	d
mm_set_complex	sparse_matrix_converter/mmio.h	/^#define mm_set_complex(/;"	d
mm_set_coordinate	sparse_matrix_converter/mmio.h	/^#define mm_set_coordinate(/;"	d
mm_set_dense	sparse_matrix_converter/mmio.h	/^#define mm_set_dense(/;"	d
mm_set_general	sparse_matrix_converter/mmio.h	/^#define mm_set_general(/;"	d
mm_set_hermitian	sparse_matrix_converter/mmio.h	/^#define mm_set_hermitian(/;"	d
mm_set_integer	sparse_matrix_converter/mmio.h	/^#define mm_set_integer(/;"	d
mm_set_matrix	sparse_matrix_converter/mmio.h	/^#define mm_set_matrix(/;"	d
mm_set_pattern	sparse_matrix_converter/mmio.h	/^#define mm_set_pattern(/;"	d
mm_set_real	sparse_matrix_converter/mmio.h	/^#define mm_set_real(/;"	d
mm_set_skew	sparse_matrix_converter/mmio.h	/^#define mm_set_skew(/;"	d
mm_set_sparse	sparse_matrix_converter/mmio.h	/^#define mm_set_sparse(/;"	d
mm_set_symmetric	sparse_matrix_converter/mmio.h	/^#define mm_set_symmetric(/;"	d
mm_typecode_to_str	sparse_matrix_converter/mmio.c	/^char  *mm_typecode_to_str(char* matcode)$/;"	f	signature:(char* matcode)
mm_typecode_to_str	sparse_matrix_converter/mmio.h	/^char *mm_typecode_to_str(char* matcode);$/;"	p	signature:(char* matcode)
mm_write_banner	sparse_matrix_converter/mmio.c	/^int mm_write_banner(FILE *f, char* matcode)$/;"	f	signature:(FILE *f, char* matcode)
mm_write_banner	sparse_matrix_converter/mmio.h	/^int mm_write_banner(FILE *f, char* matcode);$/;"	p	signature:(FILE *f, char* matcode)
mm_write_mtx_array_size	sparse_matrix_converter/mmio.c	/^int mm_write_mtx_array_size(FILE *f, int M, int N)$/;"	f	signature:(FILE *f, int M, int N)
mm_write_mtx_array_size	sparse_matrix_converter/mmio.h	/^int mm_write_mtx_array_size(FILE *f, int M, int N);$/;"	p	signature:(FILE *f, int M, int N)
mm_write_mtx_crd	sparse_matrix_converter/mmio.c	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	f	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], char* matcode)
mm_write_mtx_crd	sparse_matrix_converter/mmio.h	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	p	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], char* matcode)
mm_write_mtx_crd_size	sparse_matrix_converter/mmio.c	/^int mm_write_mtx_crd_size(FILE *f, int M, int N, int nz)$/;"	f	signature:(FILE *f, int M, int N, int nz)
mm_write_mtx_crd_size	sparse_matrix_converter/mmio.h	/^int mm_write_mtx_crd_size(FILE *f, int M, int N, int nz);$/;"	p	signature:(FILE *f, int M, int N, int nz)
mt	bebop_util/mt19937ar.c	/^static unsigned long mt[N]; \/* the array for the state vector  *\/$/;"	v	file:
mti	bebop_util/mt19937ar.c	/^static int mti=N+1; \/* mti==N+1 means mt[N] is not initialized *\/$/;"	v	file:
myQsort	sparse_matrix_converter/jad_matrix.c	/^myQsort (RowStr* rs, int iLeft, int iRight)$/;"	f	file:	signature:(RowStr* rs, int iLeft, int iRight)
my_compare_lexicographically	sparse_matrix_converter/bcoo_matrix.c	/^my_compare_lexicographically (const int x1, const int y1, const int x2, const int y2)$/;"	f	file:	signature:(const int x1, const int y1, const int x2, const int y2)
my_compare_lexicographically	sparse_matrix_converter/coo_matrix.c	/^my_compare_lexicographically (const int x1, const int y1, const int x2, const int y2)$/;"	f	file:	signature:(const int x1, const int y1, const int x2, const int y2)
n	sparse_matrix_converter/coo_matrix.h	/^  int n;$/;"	m	struct:coo_matrix_t	access:public
n	sparse_matrix_converter/csc_matrix.h	/^  int n;$/;"	m	struct:csc_matrix_t	access:public
n	sparse_matrix_converter/csr_matrix.h	/^  int n;$/;"	m	struct:csr_matrix_t	access:public
n	spmvbench/smvm_benchmark.h	/^  int   n; $/;"	m	struct:SMVM_parameters	access:public
n	spmvbench/smvm_benchmark_results.h	/^  int n;$/;"	m	struct:SMVM_benchmark_results	access:public
n	spmvbench/smvm_timing_results.h	/^  int n;$/;"	m	struct:SMVM_timing_results	access:public
n_col_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int n_col_blockdims;$/;"	m	struct:__anon2	access:public
n_jagged_diagonals	sparse_matrix_converter/jad_matrix.h	/^  int n_jagged_diagonals;$/;"	m	struct:jad_matrix_t	access:public
n_row_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int n_row_blockdims;$/;"	m	struct:__anon2	access:public
nargs_array	matrix_generator/main.c	/^static int nargs_array[] = {3, 3, 3, 5, 7, 8, 3, 3, 3};$/;"	v	file:
new_double_Complex	bebop_util/__complex.c	/^new_double_Complex (const double a, const double b)$/;"	f	signature:(const double a, const double b)
new_double_Complex	bebop_util/__complex.h	/^#  define new_double_Complex(/;"	d
new_double_Complex	bebop_util/__complex.h	/^new_double_Complex (const double a, const double b);$/;"	p	signature:(const double a, const double b)
new_node	matrix_generator/dict.c	/^static dnode_t *new_node(void *c)$/;"	f	file:	signature:(void *c)
next	bebop_util/get_options.c	/^  struct arginfo* next;$/;"	m	struct:arginfo	typeref:struct:arginfo::arginfo	file:	access:public
nilnode	matrix_generator/dict.c	/^#define nilnode /;"	d	file:
nnz	sparse_matrix_converter/coo_matrix.h	/^  int nnz;$/;"	m	struct:coo_matrix_t	access:public
nnz	sparse_matrix_converter/csc_matrix.h	/^  int nnz;$/;"	m	struct:csc_matrix_t	access:public
nnz	sparse_matrix_converter/csr_matrix.h	/^  int nnz;$/;"	m	struct:csr_matrix_t	access:public
nnz_per_row_max	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_max;$/;"	m	struct:__anon2	access:public
nnz_per_row_min	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_min;$/;"	m	struct:__anon2	access:public
nnz_per_row_to_run	hpcc_spmv_benchmark/benchmark_params.h	/^    int nnz_per_row_to_run;$/;"	m	struct:__anon2	access:public
nnz_row_vals	hpcc_spmv_benchmark/benchmark_params.h	/^    int *nnz_row_vals;$/;"	m	struct:__anon2	access:public
nnzb	sparse_matrix_converter/bcoo_matrix.h	/^  int nnzb;$/;"	m	struct:bcoo_matrix_t	access:public
nnzb	sparse_matrix_converter/bcsr_matrix.h	/^  int nnzb;$/;"	m	struct:bcsr_matrix_t	access:public
nnzb	spmvbench/smvm_timing_results.h	/^  int nnzb;$/;"	m	struct:SMVM_timing_results	access:public
nnzb_upper_bound	sparse_matrix_converter/bcoo_matrix.h	/^  int nnzb_upper_bound;$/;"	m	struct:bcoo_matrix_t	access:public
nodecount	matrix_generator/dict.c	/^#define nodecount /;"	d	file:
num_dict_entries	matrix_generator/main.c	/^static const int num_dict_entries = 9;$/;"	v	file:
num_loads	spmvbench/smvm_timing_results.h	/^  int num_loads;$/;"	m	struct:SMVM_timing_results	access:public
num_remaining	bebop_util/random_number.h	/^  int num_remaining;$/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
num_stores	spmvbench/smvm_timing_results.h	/^  int num_stores;$/;"	m	struct:SMVM_timing_results	access:public
num_trials	spmvbench/main.c	/^  int num_trials;$/;"	m	struct:SMVM_invoker_cmdline_params	file:	access:public
num_trials	spmvbench/smvm_benchmark.h	/^  int   num_trials;    $/;"	m	struct:SMVM_parameters	access:public
num_trials	spmvbench/smvm_timing_results.h	/^  int num_trials;$/;"	m	struct:SMVM_timing_results	access:public
numdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int numdims;$/;"	m	struct:__anon2	access:public
one_by_one_fill	spmvbench/smvm_benchmark_results.h	/^  double one_by_one_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
one_by_one_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double one_by_one_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
ones	sparse_matrix_converter/mfh_matlib.c	/^ones (double* A, const int m, const int n)$/;"	f	signature:(double* A, const int m, const int n)
ones	sparse_matrix_converter/mfh_matlib.h	/^ones (double* A, const int m, const int n);$/;"	p	signature:(double* A, const int m, const int n)
opts	bebop_util/main.c	/^} opts;$/;"	v	typeref:struct:cmdlineopts_t
opts	sparse_matrix_converter/main.c	/^} opts;$/;"	v	typeref:struct:cmdlineopts_t
orig_pos	sparse_matrix_converter/jad_matrix.c	/^  int orig_pos;$/;"	m	struct:row_len_str	file:	access:public
outfilebase	hpcc_spmv_benchmark/benchmark_params.h	/^    char *outfilebase;$/;"	m	struct:__anon2	access:public
output_file_format	bebop_util/main.c	/^  char* output_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
output_file_format	sparse_matrix_converter/main.c	/^  char* output_file_format;$/;"	m	struct:cmdlineopts_t	file:	access:public
output_filename	bebop_util/main.c	/^  char* output_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
output_filename	sparse_matrix_converter/main.c	/^  char* output_filename;$/;"	m	struct:cmdlineopts_t	file:	access:public
pack_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^pack_csc_matrix (struct csc_matrix_t* A, $/;"	f	signature:(struct csc_matrix_t* A, const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
pack_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^pack_csc_matrix (struct csc_matrix_t* A, $/;"	p	signature:(struct csc_matrix_t* A, const int m, const int n, const int nnz, void* values, int* rowidx, int* colptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
pack_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^pack_csr_matrix (struct csr_matrix_t* A, $/;"	f	signature:(struct csr_matrix_t* A, const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
pack_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^pack_csr_matrix (struct csr_matrix_t* A, $/;"	p	signature:(struct csr_matrix_t* A, const int m, const int n, const int nnz, void* values, int* colidx, int* rowptr, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
parent	matrix_generator/dict.c	/^#define parent /;"	d	file:
parse_arg	bebop_util/get_options.c	/^parse_arg (int c, struct arginfo* arg)$/;"	f	file:	signature:(int c, struct arginfo* arg)
partition	bebop_util/sort_joint_arrays.c	/^partition (void* a1, $/;"	f	file:	signature:(void* a1, void* a2, size_t size, int (*compar) (const void*, const void*, const void*, const void*), int low, int high, void *workspace)
partition	sparse_matrix_converter/bcoo_matrix.c	/^partition (struct bcoo_matrix_t* A,$/;"	f	file:	signature:(struct bcoo_matrix_t* A, int low, int high, void *workspace)
partition	sparse_matrix_converter/coo_matrix.c	/^partition (struct coo_matrix_t* A,$/;"	f	file:	signature:(struct coo_matrix_t* A, int low, int high, void *workspace)
partition	sparse_matrix_converter/jad_matrix.c	/^partition (RowStr *rs, int iLeft, int iRight)$/;"	f	file:	signature:(RowStr *rs, int iLeft, int iRight)
partition	spmvbench/scripts/partition_test.pl	/^sub partition {$/;"	s
percent_fill	spmvbench/smvm_benchmark.h	/^  double percent_fill; $/;"	m	struct:SMVM_parameters	access:public
pick_nnz_row_vals	hpcc_spmv_benchmark/benchmark_subset.c	/^void pick_nnz_row_vals(int *vals, int nnz_row_run, int nnz_row_min, int nnz_row_max) {$/;"	f	signature:(int *vals, int nnz_row_run, int nnz_row_min, int nnz_row_max)
print_bcoo_matrix_in_matrix_market_format	sparse_matrix_converter/bcoo_matrix.c	/^print_bcoo_matrix_in_matrix_market_format (FILE *out, struct bcoo_matrix_t* A)$/;"	f	signature:(FILE *out, struct bcoo_matrix_t* A)
print_bcoo_matrix_in_matrix_market_format	sparse_matrix_converter/bcoo_matrix.h	/^print_bcoo_matrix_in_matrix_market_format (FILE *out, struct bcoo_matrix_t* A);$/;"	p	signature:(FILE *out, struct bcoo_matrix_t* A)
print_bcsr_matrix_in_matrix_market_format	sparse_matrix_converter/bcsr_matrix.c	/^print_bcsr_matrix_in_matrix_market_format (FILE* out, const struct bcsr_matrix_t* A)$/;"	f	signature:(FILE* out, const struct bcsr_matrix_t* A)
print_bcsr_matrix_in_matrix_market_format	sparse_matrix_converter/bcsr_matrix.h	/^print_bcsr_matrix_in_matrix_market_format (FILE* out, const struct bcsr_matrix_t* A);$/;"	p	signature:(FILE* out, const struct bcsr_matrix_t* A)
print_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.c	/^print_coo_matrix_in_matlab_format (FILE* out, struct coo_matrix_t* A)$/;"	f	signature:(FILE* out, struct coo_matrix_t* A)
print_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.h	/^print_coo_matrix_in_matlab_format (FILE* out, struct coo_matrix_t* A);$/;"	p	signature:(FILE* out, struct coo_matrix_t* A)
print_coo_matrix_in_matrix_market_format	sparse_matrix_converter/coo_matrix.c	/^print_coo_matrix_in_matrix_market_format (FILE* out, const struct coo_matrix_t* A)$/;"	f	signature:(FILE* out, const struct coo_matrix_t* A)
print_coo_matrix_in_matrix_market_format	sparse_matrix_converter/coo_matrix.h	/^print_coo_matrix_in_matrix_market_format (FILE* out, const struct coo_matrix_t* A);$/;"	p	signature:(FILE* out, const struct coo_matrix_t* A)
print_coord_array_matrix	sparse_matrix_converter/coord_elem.c	/^print_coord_array_matrix (FILE* out, const struct coord_elem_t A[], const int nnz)$/;"	f	signature:(FILE* out, const struct coord_elem_t A[], const int nnz)
print_coord_array_matrix	sparse_matrix_converter/coord_elem.h	/^print_coord_array_matrix (FILE* out, const struct coord_elem_t A[], const int nnz);$/;"	p	signature:(FILE* out, const struct coord_elem_t A[], const int nnz)
print_csc_matrix_in_matlab_format	sparse_matrix_converter/csc_matrix.c	/^print_csc_matrix_in_matlab_format (FILE* out, struct csc_matrix_t* A)$/;"	f	signature:(FILE* out, struct csc_matrix_t* A)
print_csc_matrix_in_matlab_format	sparse_matrix_converter/csc_matrix.h	/^print_csc_matrix_in_matlab_format (FILE* out, struct csc_matrix_t* A);$/;"	p	signature:(FILE* out, struct csc_matrix_t* A)
print_csc_matrix_in_matrix_market_format	sparse_matrix_converter/csc_matrix.c	/^print_csc_matrix_in_matrix_market_format (FILE* out, const struct csc_matrix_t* A)$/;"	f	signature:(FILE* out, const struct csc_matrix_t* A)
print_csc_matrix_in_matrix_market_format	sparse_matrix_converter/csc_matrix.h	/^print_csc_matrix_in_matrix_market_format (FILE* out, const struct csc_matrix_t* A);$/;"	p	signature:(FILE* out, const struct csc_matrix_t* A)
print_csr_matrix_in_matlab_format	sparse_matrix_converter/csr_matrix.c	/^print_csr_matrix_in_matlab_format (FILE* out, struct csr_matrix_t* A)$/;"	f	signature:(FILE* out, struct csr_matrix_t* A)
print_csr_matrix_in_matlab_format	sparse_matrix_converter/csr_matrix.h	/^print_csr_matrix_in_matlab_format (FILE* out, struct csr_matrix_t* A);$/;"	p	signature:(FILE* out, struct csr_matrix_t* A)
print_csr_matrix_in_matrix_market_format	sparse_matrix_converter/csr_matrix.c	/^print_csr_matrix_in_matrix_market_format (FILE* out, const struct csr_matrix_t* A)$/;"	f	signature:(FILE* out, const struct csr_matrix_t* A)
print_csr_matrix_in_matrix_market_format	sparse_matrix_converter/csr_matrix.h	/^print_csr_matrix_in_matrix_market_format (FILE* out, const struct csr_matrix_t* A);$/;"	p	signature:(FILE* out, const struct csr_matrix_t* A)
print_dense_matrix	sparse_matrix_converter/mfh_matlib.c	/^print_dense_matrix (FILE* out, const double* A, const int m, const int n, $/;"	f	signature:(FILE* out, const double* A, const int m, const int n, const char* trans)
print_dense_matrix	sparse_matrix_converter/mfh_matlib.h	/^print_dense_matrix (FILE* out, const double* A, const int m, const int n, $/;"	p	signature:(FILE* out, const double* A, const int m, const int n, const char* trans)
print_dense_vector	sparse_matrix_converter/mfh_matlib.c	/^print_dense_vector (FILE* out, const double* x, const int length)$/;"	f	signature:(FILE* out, const double* x, const int length)
print_dense_vector	sparse_matrix_converter/mfh_matlib.h	/^print_dense_vector (FILE* out, const double* x, const int length);$/;"	p	signature:(FILE* out, const double* x, const int length)
print_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^print_sparse_vector (FILE* out, const struct sparse_vector_t* v)$/;"	f	signature:(FILE* out, const struct sparse_vector_t* v)
print_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^print_sparse_vector (FILE* out, const struct sparse_vector_t* v);$/;"	p	signature:(FILE* out, const struct sparse_vector_t* v)
print_sparse_vector_with_line_starter	sparse_matrix_converter/sparse_vector.c	/^print_sparse_vector_with_line_starter (FILE* out, $/;"	f	signature:(FILE* out, const struct sparse_vector_t* v, const char* line_starter)
print_sparse_vector_with_line_starter	sparse_matrix_converter/sparse_vector.h	/^print_sparse_vector_with_line_starter (FILE* out, $/;"	p	signature:(FILE* out, const struct sparse_vector_t* v, const char* line_starter)
print_spvec	sparse_matrix_converter/spvec.c	/^print_spvec (FILE* out, const struct spvec_t* v)$/;"	f	signature:(FILE* out, const struct spvec_t* v)
print_spvec	sparse_matrix_converter/spvec.h	/^print_spvec (FILE* out, const struct spvec_t* v);$/;"	p	signature:(FILE* out, const struct spvec_t* v)
print_spvec_with_line_starter	sparse_matrix_converter/spvec.c	/^print_spvec_with_line_starter (FILE* out, $/;"	f	signature:(FILE* out, const struct spvec_t* v, const char* line_starter)
print_spvec_with_line_starter	sparse_matrix_converter/spvec.h	/^print_spvec_with_line_starter (FILE* out, $/;"	p	signature:(FILE* out, const struct spvec_t* v, const char* line_starter)
prompt	matrix_generator/dict.c	/^static int prompt = 0;$/;"	v	file:
quicksort	bebop_util/sort_joint_arrays.c	/^quicksort (void* a1, $/;"	f	file:	signature:(void* a1, void* a2, size_t size, int (*compar) (const void*, const void*, const void*, const void*), int low, int high, void* workspace)
quicksort	sparse_matrix_converter/bcoo_matrix.c	/^quicksort (struct bcoo_matrix_t* A,$/;"	f	file:	signature:(struct bcoo_matrix_t* A, int low, int high, void* workspace)
quicksort	sparse_matrix_converter/coo_matrix.c	/^quicksort (struct coo_matrix_t* A,$/;"	f	file:	signature:(struct coo_matrix_t* A, int low, int high, void* workspace)
quicksort_partition_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^quicksort_partition_sparse_vector (struct sparse_vector_t *v, int low, int high)$/;"	f	file:	signature:(struct sparse_vector_t *v, int low, int high)
quicksort_partition_spvec	sparse_matrix_converter/spvec.c	/^quicksort_partition_spvec (struct spvec_t *v, int low, int high)$/;"	f	file:	signature:(struct spvec_t *v, int low, int high)
quicksort_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^quicksort_sparse_vector (struct sparse_vector_t *v, int low, int high)$/;"	f	file:	signature:(struct sparse_vector_t *v, int low, int high)
quicksort_spvec	sparse_matrix_converter/spvec.c	/^quicksort_spvec (struct spvec_t *v, int low, int high)$/;"	f	file:	signature:(struct spvec_t *v, int low, int high)
r	sparse_matrix_converter/bcoo_matrix.h	/^  int r;$/;"	m	struct:bcoo_matrix_t	access:public
r	sparse_matrix_converter/bcsr_matrix.h	/^  int r;$/;"	m	struct:bcsr_matrix_t	access:public
r	sparse_matrix_converter/coord_elem.h	/^  int r;$/;"	m	struct:coord_elem_t	access:public
r	spmvbench/smvm_benchmark.h	/^  int   r; $/;"	m	struct:SMVM_parameters	access:public
r	spmvbench/smvm_timing_results.h	/^  int r;$/;"	m	struct:SMVM_timing_results	access:public
random_integer_from_range_without_replacement_generator_t	bebop_util/random_number.h	/^random_integer_from_range_without_replacement_generator_t$/;"	s
random_integer_from_range_without_replacement_generator_t::high	bebop_util/random_number.h	/^  int low, high;  $/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
random_integer_from_range_without_replacement_generator_t::low	bebop_util/random_number.h	/^  int low, high;  $/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
random_integer_from_range_without_replacement_generator_t::num_remaining	bebop_util/random_number.h	/^  int num_remaining;$/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
random_integer_from_range_without_replacement_generator_t::remaining	bebop_util/random_number.h	/^  int* remaining;$/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
rcsid	matrix_generator/dict.c	/^static const char rcsid[] = "$Id: dict.c,v 1.1.1.1 2005\/08\/18 00:37:55 rajeshn Exp $";$/;"	v	file:
readHB_aux_char	sparse_matrix_converter/iohb.c	/^int readHB_aux_char(const char* filename, const char AuxType, char b[])$/;"	f	signature:(const char* filename, const char AuxType, char b[])
readHB_aux_char	sparse_matrix_converter/iohb.h	/^int readHB_aux_char(const char* filename, const char AuxType, char b[]);$/;"	p	signature:(const char* filename, const char AuxType, char b[])
readHB_aux_double	sparse_matrix_converter/iohb.c	/^int readHB_aux_double(const char* filename, const char AuxType, double b[])$/;"	f	signature:(const char* filename, const char AuxType, double b[])
readHB_aux_double	sparse_matrix_converter/iohb.h	/^int readHB_aux_double(const char* filename, const char AuxType, double b[]);$/;"	p	signature:(const char* filename, const char AuxType, double b[])
readHB_header	sparse_matrix_converter/iohb.c	/^int readHB_header(FILE* in_file, char* Title, char* Key, char* Type, $/;"	f	signature:(FILE* in_file, char* Title, char* Key, char* Type, int* Nrow, int* Ncol, int* Nnzero, int* Nrhs, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, int* Ptrcrd, int* Indcrd, int* Valcrd, int* Rhscrd, char *Rhstype)
readHB_header	sparse_matrix_converter/iohb.h	/^int readHB_header(FILE* in_file, char* Title, char* Key, char* Type, $/;"	p	signature:(FILE* in_file, char* Title, char* Key, char* Type, int* Nrow, int* Ncol, int* Nnzero, int* Nrhs, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, int* Ptrcrd, int* Indcrd, int* Valcrd, int* Rhscrd, char *Rhstype)
readHB_info	sparse_matrix_converter/iohb.c	/^int readHB_info(const char* filename, int* M, int* N, int* nz, char** Type, $/;"	f	signature:(const char* filename, int* M, int* N, int* nz, char** Type, int* Nrhs)
readHB_info	sparse_matrix_converter/iohb.h	/^int readHB_info(const char* filename, int* M, int* N, int* nz, char** Type, $/;"	p	signature:(const char* filename, int* M, int* N, int* nz, char** Type, int* Nrhs)
readHB_mat_char	sparse_matrix_converter/iohb.c	/^int readHB_mat_char(const char* filename, int colptr[], int rowind[], $/;"	f	signature:(const char* filename, int colptr[], int rowind[], char val[], char* Valfmt)
readHB_mat_char	sparse_matrix_converter/iohb.h	/^int readHB_mat_char(const char* filename, int colptr[], int rowind[], $/;"	p	signature:(const char* filename, int colptr[], int rowind[], char val[], char* Valfmt)
readHB_mat_double	sparse_matrix_converter/iohb.c	/^int readHB_mat_double(const char* filename, int colptr[], int rowind[], $/;"	f	signature:(const char* filename, int colptr[], int rowind[], double val[])
readHB_mat_double	sparse_matrix_converter/iohb.h	/^int readHB_mat_double(const char* filename, int colptr[], int rowind[], $/;"	p	signature:(const char* filename, int colptr[], int rowind[], double val[])
readHB_newaux_char	sparse_matrix_converter/iohb.c	/^int readHB_newaux_char(const char* filename, const char AuxType, char** b, char** Rhsfmt)$/;"	f	signature:(const char* filename, const char AuxType, char** b, char** Rhsfmt)
readHB_newaux_char	sparse_matrix_converter/iohb.h	/^int readHB_newaux_char(const char* filename, const char AuxType, char** b, char** Rhsfmt);$/;"	p	signature:(const char* filename, const char AuxType, char** b, char** Rhsfmt)
readHB_newaux_double	sparse_matrix_converter/iohb.c	/^int readHB_newaux_double(const char* filename, const char AuxType, double** b)$/;"	f	signature:(const char* filename, const char AuxType, double** b)
readHB_newaux_double	sparse_matrix_converter/iohb.h	/^int readHB_newaux_double(const char* filename, const char AuxType, double** b);$/;"	p	signature:(const char* filename, const char AuxType, double** b)
readHB_newmat_char	sparse_matrix_converter/iohb.c	/^int readHB_newmat_char(const char* filename, int* M, int* N, int* nonzeros, int** colptr, $/;"	f	signature:(const char* filename, int* M, int* N, int* nonzeros, int** colptr, int** rowind, char** val, char** Valfmt)
readHB_newmat_char	sparse_matrix_converter/iohb.h	/^int readHB_newmat_char(const char* filename, int* M, int* N, int* nonzeros, int** colptr, $/;"	p	signature:(const char* filename, int* M, int* N, int* nonzeros, int** colptr, int** rowind, char** val, char** Valfmt)
readHB_newmat_double	sparse_matrix_converter/iohb.c	/^int readHB_newmat_double(const char* filename, int* M, int* N, int* nonzeros, $/;"	f	signature:(const char* filename, int* M, int* N, int* nonzeros, int** colptr, int** rowind, double** val)
readHB_newmat_double	sparse_matrix_converter/iohb.h	/^int readHB_newmat_double(const char* filename, int* M, int* N, int* nonzeros, $/;"	p	signature:(const char* filename, int* M, int* N, int* nonzeros, int** colptr, int** rowind, double** val)
read_harwell_boeing_mat_double	sparse_matrix_converter/csc_matrix.c	/^read_harwell_boeing_mat_double (const char* filename, struct csc_matrix_t* A)$/;"	f	signature:(const char* filename, struct csc_matrix_t* A)
read_harwell_boeing_mat_double	sparse_matrix_converter/csc_matrix.h	/^read_harwell_boeing_mat_double (const char* filename, struct csc_matrix_t* A);$/;"	p	signature:(const char* filename, struct csc_matrix_t* A)
read_matrix_market_real_general_dense	sparse_matrix_converter/read_mm.c	/^read_matrix_market_real_general_dense (const char* filename, $/;"	f	signature:(const char* filename, int *m, int *n, double** A)
read_matrix_market_real_general_dense	sparse_matrix_converter/read_mm.h	/^read_matrix_market_real_general_dense (const char* filename, $/;"	p	signature:(const char* filename, int *m, int *n, double** A)
read_matrix_market_real_sparse	sparse_matrix_converter/read_mm.c	/^read_matrix_market_real_sparse (const char* filename, struct coo_matrix_t* A)$/;"	f	signature:(const char* filename, struct coo_matrix_t* A)
read_matrix_market_real_sparse	sparse_matrix_converter/read_mm.h	/^read_matrix_market_real_sparse (const char* filename, struct coo_matrix_t* A);$/;"	p	signature:(const char* filename, struct coo_matrix_t* A)
read_matrix_market_sparse	sparse_matrix_converter/read_mm.c	/^read_matrix_market_sparse (const char* filename, struct coo_matrix_t* A)$/;"	f	signature:(const char* filename, struct coo_matrix_t* A)
read_matrix_market_sparse	sparse_matrix_converter/read_mm.h	/^read_matrix_market_sparse (const char* filename, struct coo_matrix_t* A);$/;"	p	signature:(const char* filename, struct coo_matrix_t* A)
real	bebop_util/__complex.h	/^  double real;$/;"	m	struct:__anon4	access:public
realloc_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^realloc_sparse_vector (struct sparse_vector_t* v, const int newmaxlength)$/;"	f	signature:(struct sparse_vector_t* v, const int newmaxlength)
realloc_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^realloc_sparse_vector (struct sparse_vector_t* v, const int newmaxlength);$/;"	p	file:	signature:(struct sparse_vector_t* v, const int newmaxlength)
realloc_spvec	sparse_matrix_converter/spvec.c	/^realloc_spvec (struct spvec_t* v, const int newmaxlength)$/;"	f	signature:(struct spvec_t* v, const int newmaxlength)
realloc_spvec	sparse_matrix_converter/spvec.c	/^realloc_spvec (struct spvec_t* v, const int newmaxlength);$/;"	p	file:	signature:(struct spvec_t* v, const int newmaxlength)
register_arginfo	bebop_util/get_options.c	/^register_arginfo (struct arginfo *arginfo_list, $/;"	f	signature:(struct arginfo *arginfo_list, const char c, const arg_type_t type, const void *val, const char *desc)
register_arginfo	bebop_util/get_options.h	/^register_arginfo (struct arginfo *arginfo_list, $/;"	p	signature:(struct arginfo *arginfo_list, const char c, const arg_type_t type, const void *val, const char *desc)
register_usage_function	bebop_util/get_options.c	/^register_usage_function (void (usage_function) (FILE*, const struct arginfo*, const struct arginfo*))$/;"	f	signature:(void (usage_function) (FILE*, const struct arginfo*, const struct arginfo*))
register_usage_function	bebop_util/get_options.h	/^register_usage_function (void (usage_function) (FILE*, const struct arginfo*, const struct arginfo*));$/;"	p	signature:(void (usage_function) (FILE*, const struct arginfo*, const struct arginfo*))
regular_file_p	bebop_util/smvm_util.c	/^regular_file_p (const char* const path)$/;"	f	signature:(const char* const path)
regular_file_p	bebop_util/smvm_util.h	/^regular_file_p (const char* const path);$/;"	p	signature:(const char* const path)
remaining	bebop_util/random_number.h	/^  int* remaining;$/;"	m	struct:random_integer_from_range_without_replacement_generator_t	access:public
remove_duplicates	matrix_generator/create_rand.c	/^remove_duplicates (int* array, int length)$/;"	f	file:	signature:(int* array, int length)
repr	sparse_matrix_converter/sparse_matrix.h	/^  void* repr;$/;"	m	struct:sparse_matrix_t	access:public
reserve_coo_matrix	sparse_matrix_converter/coo_matrix.c	/^reserve_coo_matrix (const int m, const int n, const int nnz, $/;"	f	signature:(const int m, const int n, const int nnz, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
reserve_coo_matrix	sparse_matrix_converter/coo_matrix.h	/^reserve_coo_matrix (const int m, const int n, const int nnz, $/;"	p	signature:(const int m, const int n, const int nnz, enum index_base_t index_base, enum symmetry_type_t symmetry_type, enum symmetric_storage_location_t symmetric_storage_location, enum value_type_t value_type)
resize_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^resize_sparse_vector (struct sparse_vector_t* v, const int newlength)$/;"	f	signature:(struct sparse_vector_t* v, const int newlength)
resize_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^resize_sparse_vector (struct sparse_vector_t* v, const int newlength);$/;"	p	signature:(struct sparse_vector_t* v, const int newlength)
resize_spvec	sparse_matrix_converter/spvec.c	/^resize_spvec (struct spvec_t* v, const int newlength)$/;"	f	signature:(struct spvec_t* v, const int newlength)
resize_spvec	sparse_matrix_converter/spvec.h	/^resize_spvec (struct spvec_t* v, const int newlength);$/;"	p	signature:(struct spvec_t* v, const int newlength)
retrieve	spmvbench/avltree.c	/^retrieve (avl_position P)$/;"	f	signature:(avl_position P)
retrieve	spmvbench/avltree.h	/^retrieve (avl_position p);$/;"	p	signature:(avl_position p)
retrieve_intpair	bebop_util/avltree_intpair.c	/^retrieve_intpair (avl_position_intpair P)$/;"	f	signature:(avl_position_intpair P)
retrieve_intpair	bebop_util/avltree_intpair.h	/^retrieve_intpair (avl_position_intpair p);$/;"	p	signature:(avl_position_intpair p)
return_random_integer_from_range_without_replacement	bebop_util/random_number.c	/^return_random_integer_from_range_without_replacement (int* theint, struct random_integer_from_range_without_replacement_generator_t* gen)$/;"	f	signature:(int* theint, struct random_integer_from_range_without_replacement_generator_t* gen)
return_random_integer_from_range_without_replacement	bebop_util/random_number.h	/^return_random_integer_from_range_without_replacement (int* theint, struct random_integer_from_range_without_replacement_generator_t*);$/;"	p	signature:(int* theint, struct random_integer_from_range_without_replacement_generator_t*)
right	bebop_util/avltree_intpair.h	/^  struct avl_node_intpair* right; $/;"	m	struct:avl_node_intpair	typeref:struct:avl_node_intpair::avl_node_intpair	access:public
right	matrix_generator/dict.c	/^#define right /;"	d	file:
right	spmvbench/avltree.h	/^  struct avl_node* right; $/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node	access:public
rmaxlen	hpcc_spmv_benchmark/benchmark_params.h	/^    int rmaxlen;$/;"	m	struct:__anon2	access:public
rotate_left	matrix_generator/dict.c	/^static void rotate_left(dnode_t *upper)$/;"	f	file:	signature:(dnode_t *upper)
rotate_right	matrix_generator/dict.c	/^static void rotate_right(dnode_t *upper)$/;"	f	file:	signature:(dnode_t *upper)
round_to_int	hpcc_spmv_benchmark/benchmark_subset.c	/^double round_to_int(double x) {$/;"	f	signature:(double x)
row_blockdims	hpcc_spmv_benchmark/benchmark_params.h	/^    int *row_blockdims;$/;"	m	struct:__anon2	access:public
row_len_str	sparse_matrix_converter/jad_matrix.c	/^typedef struct row_len_str $/;"	s	file:
row_len_str::len	sparse_matrix_converter/jad_matrix.c	/^  int len;$/;"	m	struct:row_len_str	file:	access:public
row_len_str::orig_pos	sparse_matrix_converter/jad_matrix.c	/^  int orig_pos;$/;"	m	struct:row_len_str	file:	access:public
rowidx	sparse_matrix_converter/csc_matrix.h	/^  int* rowidx;$/;"	m	struct:csc_matrix_t	access:public
rowptr	sparse_matrix_converter/bcsr_matrix.h	/^  int* rowptr;$/;"	m	struct:bcsr_matrix_t	access:public
rowptr	sparse_matrix_converter/csr_matrix.h	/^  int* rowptr;$/;"	m	struct:csr_matrix_t	access:public
run_benchmark	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^int run_benchmark(hpcc_spmv_params *bench_params, int write_to_files, int text_output) {$/;"	f	signature:(hpcc_spmv_params *bench_params, int write_to_files, int text_output)
run_benchmark	hpcc_spmv_benchmark/hpcc_spmv_benchmark.h	/^int run_benchmark(hpcc_spmv_params* bench_params, int write_to_files, int text_output);$/;"	p	signature:(hpcc_spmv_params* bench_params, int write_to_files, int text_output)
runall	hpcc_spmv_benchmark/benchmark_params.h	/^    int runall;$/;"	m	struct:__anon2	access:public
s	bebop_util/get_options.c	/^    char *s;$/;"	m	union:arginfo::__anon3	file:	access:public
same_structure_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^same_structure_csc_matrix (const struct csc_matrix_t* A, $/;"	f	signature:(const struct csc_matrix_t* A, const struct csc_matrix_t* B)
same_structure_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^same_structure_csc_matrix (const struct csc_matrix_t* A, $/;"	p	signature:(const struct csc_matrix_t* A, const struct csc_matrix_t* B)
save_bcoo_matrix_in_matrix_market_format	sparse_matrix_converter/bcoo_matrix.c	/^save_bcoo_matrix_in_matrix_market_format (const char* const filename, $/;"	f	signature:(const char* const filename, struct bcoo_matrix_t* A)
save_bcoo_matrix_in_matrix_market_format	sparse_matrix_converter/bcoo_matrix.h	/^save_bcoo_matrix_in_matrix_market_format (const char* const filename, $/;"	p	signature:(const char* const filename, struct bcoo_matrix_t* A)
save_bcsr_matrix_in_matrix_market_format	sparse_matrix_converter/bcsr_matrix.c	/^save_bcsr_matrix_in_matrix_market_format (const char* const filename, $/;"	f	signature:(const char* const filename, struct bcsr_matrix_t* A)
save_bcsr_matrix_in_matrix_market_format	sparse_matrix_converter/bcsr_matrix.h	/^save_bcsr_matrix_in_matrix_market_format (const char* const filename, $/;"	p	signature:(const char* const filename, struct bcsr_matrix_t* A)
save_coo_matrix_in_harwell_boeing_format	sparse_matrix_converter/coo_matrix.c	/^save_coo_matrix_in_harwell_boeing_format (const char* const filename, $/;"	f	signature:(const char* const filename, const struct coo_matrix_t* A)
save_coo_matrix_in_harwell_boeing_format	sparse_matrix_converter/coo_matrix.h	/^save_coo_matrix_in_harwell_boeing_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct coo_matrix_t* A)
save_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.c	/^save_coo_matrix_in_matlab_format (const char* const filename, struct coo_matrix_t* A)$/;"	f	signature:(const char* const filename, struct coo_matrix_t* A)
save_coo_matrix_in_matlab_format	sparse_matrix_converter/coo_matrix.h	/^save_coo_matrix_in_matlab_format (const char* const filename,$/;"	p	signature:(const char* const filename, struct coo_matrix_t* A)
save_coo_matrix_in_matrix_market_format	sparse_matrix_converter/coo_matrix.c	/^save_coo_matrix_in_matrix_market_format (const char* const filename, const struct coo_matrix_t* A)$/;"	f	signature:(const char* const filename, const struct coo_matrix_t* A)
save_coo_matrix_in_matrix_market_format	sparse_matrix_converter/coo_matrix.h	/^save_coo_matrix_in_matrix_market_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct coo_matrix_t* A)
save_csc_matrix_in_harwell_boeing_format	sparse_matrix_converter/csc_matrix.c	/^save_csc_matrix_in_harwell_boeing_format (const char* const filename, $/;"	f	signature:(const char* const filename, const struct csc_matrix_t* A)
save_csc_matrix_in_harwell_boeing_format	sparse_matrix_converter/csc_matrix.h	/^save_csc_matrix_in_harwell_boeing_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct csc_matrix_t* A)
save_csc_matrix_in_matlab_format	sparse_matrix_converter/csc_matrix.c	/^save_csc_matrix_in_matlab_format (const char* const filename, struct csc_matrix_t* A)$/;"	f	signature:(const char* const filename, struct csc_matrix_t* A)
save_csc_matrix_in_matlab_format	sparse_matrix_converter/csc_matrix.h	/^save_csc_matrix_in_matlab_format (const char* const filename, $/;"	p	signature:(const char* const filename, struct csc_matrix_t* A)
save_csc_matrix_in_matrix_market_format	sparse_matrix_converter/csc_matrix.c	/^save_csc_matrix_in_matrix_market_format (const char* const filename, $/;"	f	signature:(const char* const filename, const struct csc_matrix_t* A)
save_csc_matrix_in_matrix_market_format	sparse_matrix_converter/csc_matrix.h	/^save_csc_matrix_in_matrix_market_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct csc_matrix_t* A)
save_csr_matrix_in_harwell_boeing_format	sparse_matrix_converter/csr_matrix.c	/^save_csr_matrix_in_harwell_boeing_format (const char* const filename, $/;"	f	signature:(const char* const filename, const struct csr_matrix_t* A)
save_csr_matrix_in_harwell_boeing_format	sparse_matrix_converter/csr_matrix.h	/^save_csr_matrix_in_harwell_boeing_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct csr_matrix_t* A)
save_csr_matrix_in_matlab_format	sparse_matrix_converter/csr_matrix.c	/^save_csr_matrix_in_matlab_format (const char* const filename, struct csr_matrix_t* A)$/;"	f	signature:(const char* const filename, struct csr_matrix_t* A)
save_csr_matrix_in_matlab_format	sparse_matrix_converter/csr_matrix.h	/^save_csr_matrix_in_matlab_format (const char* const filename, $/;"	p	signature:(const char* const filename, struct csr_matrix_t* A)
save_csr_matrix_in_matrix_market_format	sparse_matrix_converter/csr_matrix.c	/^save_csr_matrix_in_matrix_market_format (const char* const filename, $/;"	f	signature:(const char* const filename, const struct csr_matrix_t* A)
save_csr_matrix_in_matrix_market_format	sparse_matrix_converter/csr_matrix.h	/^save_csr_matrix_in_matrix_market_format (const char* const filename, $/;"	p	signature:(const char* const filename, const struct csr_matrix_t* A)
save_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.c	/^save_sparse_matrix (const char* const filename, $/;"	f	signature:(const char* const filename, struct sparse_matrix_t* A, enum sparse_matrix_file_format_t file_format)
save_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.h	/^save_sparse_matrix (const char* const filename, $/;"	p	signature:(const char* const filename, struct sparse_matrix_t* A, enum sparse_matrix_file_format_t file_format)
scatter_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^scatter_sparse_vector (double* dest, const struct sparse_vector_t* src, const int n)$/;"	f	signature:(double* dest, const struct sparse_vector_t* src, const int n)
scatter_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^scatter_sparse_vector (double* dest, const struct sparse_vector_t* src, $/;"	p	signature:(double* dest, const struct sparse_vector_t* src, const int n)
scatter_spvec	sparse_matrix_converter/spvec.c	/^scatter_spvec (void* dest, const struct spvec_t* src, const int n)$/;"	f	signature:(void* dest, const struct spvec_t* src, const int n)
scatter_spvec	sparse_matrix_converter/spvec.h	/^scatter_spvec (void* dest, const struct spvec_t* src, $/;"	p	signature:(void* dest, const struct spvec_t* src, const int n)
second	bebop_util/avltree_intpair.h	/^  int second; $/;"	m	struct:int_pair	access:public
second	spmvbench/avltree.h	/^  int second; $/;"	m	struct:int_pair	access:public
set_double_argval	bebop_util/get_options.c	/^set_double_argval (struct arginfo* arg, const double val)$/;"	f	signature:(struct arginfo* arg, const double val)
set_double_argval	bebop_util/get_options.h	/^set_double_argval (struct arginfo* arg, const double val);$/;"	p	signature:(struct arginfo* arg, const double val)
set_int_argval	bebop_util/get_options.c	/^set_int_argval (struct arginfo* arg, const int val)$/;"	f	signature:(struct arginfo* arg, const int val)
set_int_argval	bebop_util/get_options.h	/^set_int_argval (struct arginfo* arg, const int val);$/;"	p	signature:(struct arginfo* arg, const int val)
set_sparse_vector_index	sparse_matrix_converter/sparse_vector.c	/^set_sparse_vector_index (struct sparse_vector_t* v, const int i, $/;"	f	signature:(struct sparse_vector_t* v, const int i, const int index_value)
set_sparse_vector_index	sparse_matrix_converter/sparse_vector.h	/^set_sparse_vector_index (struct sparse_vector_t* v, const int i, $/;"	p	signature:(struct sparse_vector_t* v, const int i, const int index_value)
set_sparse_vector_value	sparse_matrix_converter/sparse_vector.c	/^set_sparse_vector_value (struct sparse_vector_t* v, const int i, $/;"	f	signature:(struct sparse_vector_t* v, const int i, const double value)
set_sparse_vector_value	sparse_matrix_converter/sparse_vector.h	/^set_sparse_vector_value (struct sparse_vector_t* v, const int i, $/;"	p	signature:(struct sparse_vector_t* v, const int i, const double value)
set_spvec_index	sparse_matrix_converter/spvec.c	/^set_spvec_index (struct spvec_t* v, const int i, $/;"	f	signature:(struct spvec_t* v, const int i, const int index_value)
set_spvec_index	sparse_matrix_converter/spvec.h	/^set_spvec_index (struct spvec_t* v, const int i, $/;"	p	signature:(struct spvec_t* v, const int i, const int index_value)
set_string_argval	bebop_util/get_options.c	/^set_string_argval (struct arginfo* arg, char* val)$/;"	f	signature:(struct arginfo* arg, char* val)
set_string_argval	bebop_util/get_options.h	/^set_string_argval (struct arginfo* arg, char* val);$/;"	p	signature:(struct arginfo* arg, char* val)
single_rotate_with_left	bebop_util/avltree_intpair.c	/^single_rotate_with_left (avl_position_intpair K2)$/;"	f	file:	signature:(avl_position_intpair K2)
single_rotate_with_left	spmvbench/avltree.c	/^single_rotate_with_left (avl_position K2)$/;"	f	file:	signature:(avl_position K2)
single_rotate_with_right	bebop_util/avltree_intpair.c	/^single_rotate_with_right (avl_position_intpair K1)$/;"	f	file:	signature:(avl_position_intpair K1)
single_rotate_with_right	spmvbench/avltree.c	/^single_rotate_with_right (avl_position K1)$/;"	f	file:	signature:(avl_position K1)
size_t	bebop_util/merge_sort.h	/^   typedef int size_t;$/;"	t
size_t	bebop_util/smvm_malloc.h	/^  typedef int size_t;$/;"	t
size_t	bebop_util/sort_joint_arrays.h	/^   typedef int size_t;$/;"	t
smallest_ntrials	hpcc_spmv_benchmark/hpcc_spmv_benchmark.c	/^int smallest_ntrials(hpcc_spmv_params *bench_params, struct SMVM_parameters *spmv_params, struct SMVM_timing_results *timing_results, double timer_granularity) {$/;"	f	signature:(hpcc_spmv_params *bench_params, struct SMVM_parameters *spmv_params, struct SMVM_timing_results *timing_results, double timer_granularity)
smvm_alloc_benchmark_results	spmvbench/smvm_benchmark_results.c	/^smvm_alloc_benchmark_results ()$/;"	f
smvm_alloc_benchmark_results	spmvbench/smvm_benchmark_results.h	/^smvm_alloc_benchmark_results ();$/;"	p	signature:()
smvm_allocate_sparse_data_structures	spmvbench/smvm_benchmark.c	/^smvm_allocate_sparse_data_structures (int** p_row_start, int** p_col_idx, $/;"	f	signature:(int** p_row_start, int** p_col_idx, double** p_values, int NNZ, int num_block_rows)
smvm_allocate_sparse_data_structures	spmvbench/smvm_benchmark.h	/^smvm_allocate_sparse_data_structures (int** p_row_start, int** p_col_idx, $/;"	p	signature:(int** p_row_start, int** p_col_idx, double** p_values, int NNZ, int num_block_rows)
smvm_benchmark	spmvbench/smvm_benchmark.c	/^smvm_benchmark (struct SMVM_parameters *p_params)$/;"	f	signature:(struct SMVM_parameters *p_params)
smvm_benchmark	spmvbench/smvm_benchmark.h	/^smvm_benchmark (struct SMVM_parameters *p_params);$/;"	p	signature:(struct SMVM_parameters *p_params)
smvm_benchmark_results_array_length	spmvbench/smvm_benchmark_results.c	/^smvm_benchmark_results_array_length (struct SMVM_benchmark_results_array *p)$/;"	f	signature:(struct SMVM_benchmark_results_array *p)
smvm_benchmark_results_array_length	spmvbench/smvm_benchmark_results.h	/^smvm_benchmark_results_array_length (struct SMVM_benchmark_results_array *p);$/;"	p	signature:(struct SMVM_benchmark_results_array *p)
smvm_benchmark_with_results	spmvbench/smvm_benchmark.c	/^smvm_benchmark_with_results (struct SMVM_parameters *p_params, $/;"	f	signature:(struct SMVM_parameters *p_params, struct SMVM_timing_results* p_results)
smvm_benchmark_with_results	spmvbench/smvm_benchmark.h	/^smvm_benchmark_with_results (struct SMVM_parameters *p_params, $/;"	p	signature:(struct SMVM_parameters *p_params, struct SMVM_timing_results* p_results)
smvm_calloc	bebop_util/smvm_malloc.h	/^#define smvm_calloc(/;"	d
smvm_checked_positive_product	bebop_util/smvm_util.c	/^smvm_checked_positive_product (int* result, const int x, const int y)$/;"	f	signature:(int* result, const int x, const int y)
smvm_checked_positive_product	bebop_util/smvm_util.h	/^smvm_checked_positive_product (int* result, const int x, const int y);$/;"	p	signature:(int* result, const int x, const int y)
smvm_compare_double	bebop_util/smvm_util.c	/^smvm_compare_double (const void *d1, const void *d2)$/;"	f	signature:(const void *d1, const void *d2)
smvm_compare_double	bebop_util/smvm_util.h	/^smvm_compare_double (const void *d1, const void *d2);$/;"	p	signature:(const void *d1, const void *d2)
smvm_copy_benchmark_results	spmvbench/smvm_benchmark_results.c	/^smvm_copy_benchmark_results (const struct SMVM_benchmark_results* in)$/;"	f	signature:(const struct SMVM_benchmark_results* in)
smvm_copy_benchmark_results	spmvbench/smvm_benchmark_results.h	/^smvm_copy_benchmark_results (const struct SMVM_benchmark_results* in);$/;"	p	signature:(const struct SMVM_benchmark_results* in)
smvm_debug_level	bebop_util/smvm_util.c	/^smvm_debug_level ()$/;"	f
smvm_debug_level	bebop_util/smvm_util.h	/^smvm_debug_level ();$/;"	p	signature:()
smvm_exit	bebop_util/smvm_util.c	/^smvm_exit (const int errcode)$/;"	f	signature:(const int errcode)
smvm_exit	bebop_util/smvm_util.h	/^smvm_exit (const int errcode);$/;"	p	signature:(const int errcode)
smvm_free	bebop_util/smvm_malloc.h	/^#define smvm_free(/;"	d
smvm_free_benchmark_results	spmvbench/smvm_benchmark_results.c	/^smvm_free_benchmark_results (struct SMVM_benchmark_results* results)$/;"	f	signature:(struct SMVM_benchmark_results* results)
smvm_free_benchmark_results	spmvbench/smvm_benchmark_results.h	/^smvm_free_benchmark_results (struct SMVM_benchmark_results* results);$/;"	p	signature:(struct SMVM_benchmark_results* results)
smvm_general_bsr_matvec	spmvbench/smvm_verify_result.c	/^smvm_general_bsr_matvec(int num_block_rows, int r, int c, int row_start[], $/;"	f	signature:(int num_block_rows, int r, int c, int row_start[], int col_idx[], double values[], double src[], double dest[])
smvm_get_cmdline_args	spmvbench/main.c	/^smvm_get_cmdline_args (struct SMVM_invoker_cmdline_params* p_params, $/;"	f	file:	signature:(struct SMVM_invoker_cmdline_params* p_params, int argc, char* argv[])
smvm_get_median_min_max	bebop_util/smvm_util.c	/^smvm_get_median_min_max (double a[], int n, double *p_median, double *p_min, double *p_max)$/;"	f	signature:(double a[], int n, double *p_median, double *p_min, double *p_max)
smvm_get_median_min_max	bebop_util/smvm_util.h	/^smvm_get_median_min_max (double a[], int n, double *p_median, double *p_min, double *p_max);$/;"	p	signature:(double a[], int n, double *p_median, double *p_min, double *p_max)
smvm_get_output_file	spmvbench/smvm_get_output_file.c	/^smvm_get_output_file (const char outfilename[], const char col_headers[], $/;"	f	signature:(const char outfilename[], const char col_headers[], const int b_dbg)
smvm_get_output_file	spmvbench/smvm_get_output_file.h	/^smvm_get_output_file (const char outfilename[], const char col_headers[], const int b_dbg);$/;"	p	signature:(const char outfilename[], const char col_headers[], const int b_dbg)
smvm_init_invoker_cmdline_params	spmvbench/main.c	/^smvm_init_invoker_cmdline_params (struct SMVM_invoker_cmdline_params* p_params)$/;"	f	file:	signature:(struct SMVM_invoker_cmdline_params* p_params)
smvm_init_randomizer	bebop_util/random_number.c	/^smvm_init_randomizer (unsigned int seed)$/;"	f	signature:(unsigned int seed)
smvm_init_randomizer	bebop_util/random_number.h	/^smvm_init_randomizer (unsigned int seed);$/;"	p	signature:(unsigned int seed)
smvm_init_vector_rand	bebop_util/smvm_util.c	/^smvm_init_vector_rand (int n, double* x)$/;"	f	signature:(int n, double* x)
smvm_init_vector_rand	bebop_util/smvm_util.h	/^smvm_init_vector_rand (int n, double* x);$/;"	p	signature:(int n, double* x)
smvm_init_vector_val	bebop_util/smvm_util.c	/^smvm_init_vector_val (int n, double* x, double val)$/;"	f	signature:(int n, double* x, double val)
smvm_init_vector_val	bebop_util/smvm_util.h	/^smvm_init_vector_val (int n, double* x, double val);$/;"	p	signature:(int n, double* x, double val)
smvm_malloc	bebop_util/smvm_malloc.h	/^#define smvm_malloc(/;"	d
smvm_max_norm_error	spmvbench/smvm_verify_result.c	/^smvm_max_norm_error (double y[], double y_check[], int n)$/;"	f	signature:(double y[], double y_check[], int n)
smvm_median	bebop_util/smvm_util.c	/^smvm_median (double* values, int n)$/;"	f	signature:(double* values, int n)
smvm_median	bebop_util/smvm_util.h	/^smvm_median (double* values, int n);$/;"	p	signature:(double* values, int n)
smvm_num_bits	bebop_util/smvm_util.c	/^smvm_num_bits (const int x)$/;"	f	signature:(const int x)
smvm_num_bits	bebop_util/smvm_util.h	/^smvm_num_bits (const int x);$/;"	p	signature:(const int x)
smvm_output_benchmark_results	spmvbench/smvm_benchmark_results.c	/^smvm_output_benchmark_results (struct SMVM_benchmark_results* p_results, $/;"	f	signature:(struct SMVM_benchmark_results* p_results, FILE* out)
smvm_output_benchmark_results	spmvbench/smvm_benchmark_results.h	/^smvm_output_benchmark_results (struct SMVM_benchmark_results* p_results, $/;"	p	signature:(struct SMVM_benchmark_results* p_results, FILE* out)
smvm_random_double	bebop_util/random_number.c	/^smvm_random_double (double low, double high)$/;"	f	signature:(double low, double high)
smvm_random_double	bebop_util/random_number.h	/^smvm_random_double (double low, double high);$/;"	p	signature:(double low, double high)
smvm_random_integer	bebop_util/random_number.c	/^smvm_random_integer (int low, int high)$/;"	f	signature:(int low, int high)
smvm_random_integer	bebop_util/random_number.h	/^smvm_random_integer (int low, int high);$/;"	p	signature:(int low, int high)
smvm_random_integer_in_range_zero_to_n_minus_one	bebop_util/random_number.c	/^smvm_random_integer_in_range_zero_to_n_minus_one (int N)$/;"	f	file:	signature:(int N)
smvm_range_check_parameters	spmvbench/smvm_benchmark.c	/^smvm_range_check_parameters (struct SMVM_parameters *p_params)$/;"	f	file:	signature:(struct SMVM_parameters *p_params)
smvm_read_command_line_arguments	spmvbench/benchmark_tester.c	/^smvm_read_command_line_arguments (struct SMVM_parameters *p_params, $/;"	f	file:	signature:(struct SMVM_parameters *p_params, int argc, char *argv[])
smvm_realloc	bebop_util/smvm_malloc.h	/^#define smvm_realloc(/;"	d
smvm_save_timing_results	spmvbench/smvm_timing_results.c	/^smvm_save_timing_results (struct SMVM_timing_results* p_results, $/;"	f	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, const int nnzb, const int num_trials, const double t_median, const double t_min, const double t_max, const double mflops, const int num_loads, const int num_stores)
smvm_save_timing_results	spmvbench/smvm_timing_results.h	/^smvm_save_timing_results (struct SMVM_timing_results* p_results, $/;"	p	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, const int nnzb, const int num_trials, const double t_median, const double t_min, const double t_max, const double mflops, const int num_loads, const int num_stores)
smvm_set_debug_level	bebop_util/smvm_util.c	/^smvm_set_debug_level (const int level)$/;"	f	signature:(const int level)
smvm_set_debug_level	bebop_util/smvm_util.h	/^smvm_set_debug_level (const int level);$/;"	p	signature:(const int level)
smvm_set_debug_level_from_environment	bebop_util/smvm_util.c	/^smvm_set_debug_level_from_environment ()$/;"	f
smvm_set_debug_level_from_environment	bebop_util/smvm_util.h	/^smvm_set_debug_level_from_environment ();$/;"	p	signature:()
smvm_timing_run	spmvbench/smvm_timing_run.c	/^smvm_timing_run (int m, int n, int r, int c, $/;"	f	signature:(int m, int n, int r, int c, int row_start[], int col_idx[], double values[], int nnzb, double src[], double dest[], int num_trials, FILE* outfile, int b_warn, int b_dbg)
smvm_timing_run	spmvbench/smvm_timing_run.h	/^smvm_timing_run (int m, int n, int r, int c, int row_start[], int col_idx[], $/;"	p	signature:(int m, int n, int r, int c, int row_start[], int col_idx[], double values[], int nnzb, double src[], double dest[], int num_trials, FILE* outfile, int b_warn, int b_dbg)
smvm_timing_run_with_results	spmvbench/smvm_timing_run.c	/^smvm_timing_run_with_results (struct SMVM_timing_results* p_results,$/;"	f	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, const int row_start[], const int col_idx[], const double values[], const int nnzb, const double src[], double dest[], const int num_trials, const int b_warn, const int b_dbg)
smvm_timing_run_with_results	spmvbench/smvm_timing_run.h	/^smvm_timing_run_with_results (struct SMVM_timing_results* p_results,$/;"	p	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, const int row_start[], const int col_idx[], const double values[], const int nnzb, const double src[], double dest[], const int num_trials, const int b_warn, const int b_dbg)
smvm_timing_run_with_results2	spmvbench/smvm_timing_run.c	/^smvm_timing_run_with_results2 (struct SMVM_timing_results* p_results,$/;"	f	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, int row_start[], int col_idx[], double values[], const int nnzb, double src[], double dest[], const int num_trials, const int b_warn, const int b_dbg, const int b_verify, const double tol)
smvm_timing_run_with_results2	spmvbench/smvm_timing_run.h	/^smvm_timing_run_with_results2 (struct SMVM_timing_results* p_results,$/;"	p	signature:(struct SMVM_timing_results* p_results, const int m, const int n, const int r, const int c, int row_start[], int col_idx[], double values[], const int nnzb, double src[], double dest[], const int num_trials, const int b_warn, const int b_dbg, const int b_verify, const double tol)
smvm_verify_result	spmvbench/smvm_verify_result.c	/^smvm_verify_result (int m, int n, int r, int c, int row_start[], $/;"	f	signature:(int m, int n, int r, int c, int row_start[], int col_idx[], double values[], double x[], double y[], double tol, int b_warn, int b_dbg)
smvm_verify_result	spmvbench/smvm_verify_result.h	/^smvm_verify_result (int m, int n, int r, int c, int row_start[], $/;"	p	signature:(int m, int n, int r, int c, int row_start[], int col_idx[], double values[], double x[], double y[], double tol, int b_warn, int b_dbg)
sort_bcoo_matrix_by_rows_then_columns	sparse_matrix_converter/bcoo_matrix.c	/^sort_bcoo_matrix_by_rows_then_columns (struct bcoo_matrix_t* A)$/;"	f	file:	signature:(struct bcoo_matrix_t* A)
sort_coo_matrix_by_rows_then_columns	sparse_matrix_converter/coo_matrix.c	/^sort_coo_matrix_by_rows_then_columns (struct coo_matrix_t* A)$/;"	f	file:	signature:(struct coo_matrix_t* A)
sort_coord_elem_array_for_csc_conversion	sparse_matrix_converter/read_mm.c	/^sort_coord_elem_array_for_csc_conversion (void* coord_array, $/;"	f	signature:(void* coord_array, const int length, enum value_type_t value_type)
sort_coord_elem_array_for_csc_conversion	sparse_matrix_converter/read_mm.h	/^sort_coord_elem_array_for_csc_conversion (void* coord_array, $/;"	p	signature:(void* coord_array, const int length, enum value_type_t value_type)
sort_coord_elem_array_for_csr_conversion	sparse_matrix_converter/read_mm.c	/^sort_coord_elem_array_for_csr_conversion (void* coord_array, $/;"	f	signature:(void* coord_array, const int length, enum value_type_t value_type)
sort_joint_arrays	bebop_util/sort_joint_arrays.c	/^sort_joint_arrays (void* a1, void* a2, size_t nmemb, size_t size, $/;"	f	signature:(void* a1, void* a2, size_t nmemb, size_t size, int (*compar) (const void*, const void*, const void*, const void*))
sort_joint_arrays	bebop_util/sort_joint_arrays.h	/^sort_joint_arrays (void* a1, void* a2, size_t nmemb, size_t size, $/;"	p	signature:(void* a1, void* a2, size_t nmemb, size_t size, int (*compar) (const void*, const void*, const void*, const void*))
sort_sparse_vector_by_index	sparse_matrix_converter/sparse_vector.c	/^sort_sparse_vector_by_index (struct sparse_vector_t *v)$/;"	f	signature:(struct sparse_vector_t *v)
sort_sparse_vector_by_index	sparse_matrix_converter/sparse_vector.h	/^sort_sparse_vector_by_index (struct sparse_vector_t *v);$/;"	p	signature:(struct sparse_vector_t *v)
sort_spvec_by_index	sparse_matrix_converter/spvec.c	/^sort_spvec_by_index (struct spvec_t *v)$/;"	f	signature:(struct spvec_t *v)
sort_spvec_by_index	sparse_matrix_converter/spvec.h	/^sort_spvec_by_index (struct spvec_t *v);$/;"	p	signature:(struct spvec_t *v)
sp_convert	sparse_matrix_converter/interface.c	/^sp_convert (struct sparse_matrix_t* A, const char* type)$/;"	f	signature:(struct sparse_matrix_t* A, const char* type)
sp_convert	sparse_matrix_converter/interface.h	/^sp_convert (struct sparse_matrix_t* A, const char* type);$/;"	p	signature:(struct sparse_matrix_t* A, const char* type)
sp_destroy	sparse_matrix_converter/interface.c	/^sp_destroy (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
sp_format	sparse_matrix_converter/interface.c	/^sp_format (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
sp_format	sparse_matrix_converter/interface.h	/^sp_format (struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* A)
sp_load	sparse_matrix_converter/interface.c	/^sp_load (const char* path, const char* fmt)$/;"	f	signature:(const char* path, const char* fmt)
sp_load	sparse_matrix_converter/interface.h	/^sp_load (const char* path, const char* fmt);$/;"	p	signature:(const char* path, const char* fmt)
sp_mult	sparse_matrix_converter/interface.c	/^sp_mult (struct sparse_matrix_t* B, struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* B, struct sparse_matrix_t* A)
sp_mult	sparse_matrix_converter/interface.h	/^sp_mult (struct sparse_matrix_t* B, struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* B, struct sparse_matrix_t* A)
sp_save	sparse_matrix_converter/interface.c	/^sp_save (struct sparse_matrix_t* A, const char* path, $/;"	f	signature:(struct sparse_matrix_t* A, const char* path, const char* fmt)
sp_save	sparse_matrix_converter/interface.h	/^sp_save (struct sparse_matrix_t* A, const char* path, $/;"	p	signature:(struct sparse_matrix_t* A, const char* path, const char* fmt)
sparse_matrix_convert	sparse_matrix_converter/sparse_matrix_ops.c	/^sparse_matrix_convert (struct sparse_matrix_t* A, $/;"	f	signature:(struct sparse_matrix_t* A, enum sparse_matrix_storage_format_t output_format)
sparse_matrix_convert	sparse_matrix_converter/sparse_matrix_ops.h	/^sparse_matrix_convert (struct sparse_matrix_t* A, $/;"	p	signature:(struct sparse_matrix_t* A, enum sparse_matrix_storage_format_t output_format)
sparse_matrix_expand_symmetric_storage	sparse_matrix_converter/sparse_matrix_ops.c	/^sparse_matrix_expand_symmetric_storage (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
sparse_matrix_expand_symmetric_storage	sparse_matrix_converter/sparse_matrix_ops.h	/^sparse_matrix_expand_symmetric_storage (struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* A)
sparse_matrix_file_format_string_to_enum	sparse_matrix_converter/sparse_matrix_ops.c	/^sparse_matrix_file_format_string_to_enum (const char* const s)$/;"	f	signature:(const char* const s)
sparse_matrix_file_format_string_to_enum	sparse_matrix_converter/sparse_matrix_ops.h	/^sparse_matrix_file_format_string_to_enum (const char* const s);$/;"	p	signature:(const char* const s)
sparse_matrix_file_format_t	sparse_matrix_converter/sparse_matrix.h	/^sparse_matrix_file_format_t$/;"	g
sparse_matrix_format_string	sparse_matrix_converter/sparse_matrix.c	/^sparse_matrix_format_string (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
sparse_matrix_format_string	sparse_matrix_converter/sparse_matrix.h	/^sparse_matrix_format_string (struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* A)
sparse_matrix_matmatmult	sparse_matrix_converter/sparse_matrix.c	/^sparse_matrix_matmatmult (struct sparse_matrix_t* B, struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* B, struct sparse_matrix_t* A)
sparse_matrix_matmatmult	sparse_matrix_converter/sparse_matrix.h	/^sparse_matrix_matmatmult (struct sparse_matrix_t* B, struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* B, struct sparse_matrix_t* A)
sparse_matrix_storage_format_string_to_enum	sparse_matrix_converter/sparse_matrix_ops.c	/^sparse_matrix_storage_format_string_to_enum (const char* const s)$/;"	f	signature:(const char* const s)
sparse_matrix_storage_format_string_to_enum	sparse_matrix_converter/sparse_matrix_ops.h	/^sparse_matrix_storage_format_string_to_enum (const char* const s);$/;"	p	signature:(const char* const s)
sparse_matrix_storage_format_t	sparse_matrix_converter/sparse_matrix.h	/^sparse_matrix_storage_format_t$/;"	g
sparse_matrix_supported_storage_format_p	sparse_matrix_converter/sparse_matrix.c	/^sparse_matrix_supported_storage_format_p (enum sparse_matrix_storage_format_t format)$/;"	f	file:	signature:(enum sparse_matrix_storage_format_t format)
sparse_matrix_t	sparse_matrix_converter/sparse_matrix.h	/^sparse_matrix_t$/;"	s
sparse_matrix_t::format	sparse_matrix_converter/sparse_matrix.h	/^  enum sparse_matrix_storage_format_t format;$/;"	m	struct:sparse_matrix_t	typeref:enum:sparse_matrix_t::sparse_matrix_storage_format_t	access:public
sparse_matrix_t::repr	sparse_matrix_converter/sparse_matrix.h	/^  void* repr;$/;"	m	struct:sparse_matrix_t	access:public
sparse_vector_sorted_by_index_p	sparse_matrix_converter/sparse_vector.c	/^sparse_vector_sorted_by_index_p (struct sparse_vector_t *v)$/;"	f	file:	signature:(struct sparse_vector_t *v)
sparse_vector_t	sparse_matrix_converter/sparse_vector.h	/^sparse_vector_t$/;"	s
sparse_vector_t::idx	sparse_matrix_converter/sparse_vector.h	/^  int*    idx;$/;"	m	struct:sparse_vector_t	access:public
sparse_vector_t::len	sparse_matrix_converter/sparse_vector.h	/^  int     len;$/;"	m	struct:sparse_vector_t	access:public
sparse_vector_t::maxlen	sparse_matrix_converter/sparse_vector.h	/^  int     maxlen;$/;"	m	struct:sparse_vector_t	access:public
sparse_vector_t::val	sparse_matrix_converter/sparse_vector.h	/^  double* val;$/;"	m	struct:sparse_vector_t	access:public
split_pathname	bebop_util/smvm_util.c	/^split_pathname (char** parentdir, char** namestem, char** extn, const char* const path)$/;"	f	signature:(char** parentdir, char** namestem, char** extn, const char* const path)
split_pathname	bebop_util/smvm_util.h	/^split_pathname (char** parentdir, char** namestem, char** extn, const char* const path);$/;"	p	signature:(char** parentdir, char** namestem, char** extn, const char* const path)
spvec_sorted_by_index_p	sparse_matrix_converter/spvec.c	/^spvec_sorted_by_index_p (struct spvec_t *v)$/;"	f	file:	signature:(struct spvec_t *v)
spvec_t	sparse_matrix_converter/spvec.h	/^spvec_t$/;"	s
spvec_t::idx	sparse_matrix_converter/spvec.h	/^  int* idx;$/;"	m	struct:spvec_t	access:public
spvec_t::len	sparse_matrix_converter/spvec.h	/^  int     len;$/;"	m	struct:spvec_t	access:public
spvec_t::maxlen	sparse_matrix_converter/spvec.h	/^  int     maxlen;$/;"	m	struct:spvec_t	access:public
spvec_t::val	sparse_matrix_converter/spvec.h	/^  void* val;$/;"	m	struct:spvec_t	access:public
spvec_t::value_type	sparse_matrix_converter/spvec.h	/^  enum value_type_t value_type;$/;"	m	struct:spvec_t	typeref:enum:spvec_t::value_type_t	access:public
spy_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^spy_csc_matrix (FILE* out, const struct csc_matrix_t* A)$/;"	f	signature:(FILE* out, const struct csc_matrix_t* A)
spy_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^spy_csc_matrix (FILE* out, const struct csc_matrix_t* A);$/;"	p	signature:(FILE* out, const struct csc_matrix_t* A)
stencil_27pt_coo_matrix	matrix_generator/stencil.c	/^stencil_27pt_coo_matrix (const int n, const int start_row, const int end_row)$/;"	f	signature:(const int n, const int start_row, const int end_row)
stencil_27pt_coo_matrix	matrix_generator/stencil.h	/^stencil_27pt_coo_matrix (const int n, const int start_row, const int end_row);$/;"	p	signature:(const int n, const int start_row, const int end_row)
stencil_27pt_dist_bcsr_matrix_structure	matrix_generator/stencil.c	/^stencil_27pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	f	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_27pt_dist_bcsr_matrix_structure	matrix_generator/stencil.h	/^stencil_27pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	p	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_27pt_random_bcsr_matrix	matrix_generator/stencil.c	/^stencil_27pt_random_bcsr_matrix (const int N, const int r, const int c)$/;"	f	signature:(const int N, const int r, const int c)
stencil_27pt_random_bcsr_matrix	matrix_generator/stencil.h	/^stencil_27pt_random_bcsr_matrix (const int N, const int r, const int c);$/;"	p	signature:(const int N, const int r, const int c)
stencil_27pt_regblocked_random	matrix_generator/stencil.c	/^stencil_27pt_regblocked_random (const int N, const int r, const int c, $/;"	f	file:	signature:(const int N, const int r, const int c, int *pnnzb, int **pptr, int **pidx, double **pval)
stencil_3pt_coo_matrix	matrix_generator/stencil.c	/^stencil_3pt_coo_matrix (const int n, const int start_row, const int end_row)$/;"	f	signature:(const int n, const int start_row, const int end_row)
stencil_3pt_coo_matrix	matrix_generator/stencil.h	/^stencil_3pt_coo_matrix (const int n, const int start_row, const int end_row);$/;"	p	signature:(const int n, const int start_row, const int end_row)
stencil_3pt_dist_bcsr_matrix_structure	matrix_generator/stencil.c	/^stencil_3pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	f	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_3pt_dist_bcsr_matrix_structure	matrix_generator/stencil.h	/^stencil_3pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	p	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_3pt_random_bcsr_matrix	matrix_generator/stencil.c	/^stencil_3pt_random_bcsr_matrix (const int n, const int r, const int c)$/;"	f	signature:(const int n, const int r, const int c)
stencil_3pt_random_bcsr_matrix	matrix_generator/stencil.h	/^stencil_3pt_random_bcsr_matrix (const int n, const int r, const int c);$/;"	p	signature:(const int n, const int r, const int c)
stencil_3pt_regblocked_random	matrix_generator/stencil.c	/^stencil_3pt_regblocked_random (const int n, const int r, const int c, $/;"	f	file:	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, double **pval)
stencil_9pt_coo_matrix	matrix_generator/stencil.c	/^stencil_9pt_coo_matrix (const int n, const int start_row, const int end_row)$/;"	f	signature:(const int n, const int start_row, const int end_row)
stencil_9pt_coo_matrix	matrix_generator/stencil.h	/^stencil_9pt_coo_matrix (const int n, const int start_row, const int end_row);$/;"	p	signature:(const int n, const int start_row, const int end_row)
stencil_9pt_dist_bcsr_matrix_structure	matrix_generator/stencil.c	/^stencil_9pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	f	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_9pt_dist_bcsr_matrix_structure	matrix_generator/stencil.h	/^stencil_9pt_dist_bcsr_matrix_structure (const int n, const int r, const int c, $/;"	p	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, const int start_block_row, const int end_block_row)
stencil_9pt_random	matrix_generator/stencil.c	/^stencil_9pt_random (const int n, $/;"	f	file:	signature:(const int n, int *pnnz, int **pptr, int **pidx, double **pval)
stencil_9pt_random_bcsr_matrix	matrix_generator/stencil.c	/^stencil_9pt_random_bcsr_matrix (const int n, const int r, const int c)$/;"	f	signature:(const int n, const int r, const int c)
stencil_9pt_random_bcsr_matrix	matrix_generator/stencil.h	/^stencil_9pt_random_bcsr_matrix (const int n, const int r, const int c);$/;"	p	signature:(const int n, const int r, const int c)
stencil_9pt_random_csr_matrix	matrix_generator/stencil.c	/^stencil_9pt_random_csr_matrix (const int n)$/;"	f	signature:(const int n)
stencil_9pt_random_csr_matrix	matrix_generator/stencil.h	/^stencil_9pt_random_csr_matrix (const int n);$/;"	p	signature:(const int n)
stencil_9pt_regblocked_random	matrix_generator/stencil.c	/^stencil_9pt_regblocked_random (const int n, const int r, const int c, $/;"	f	signature:(const int n, const int r, const int c, int *pnnzb, int **pptr, int **pidx, double **pval)
stmt	sparse_matrix_converter/prompt.y	/^stmt:   LOAD STRING STRING ';' { if (A) destroy_sparse_matrix (A);$/;"	l
stmtlist	sparse_matrix_converter/prompt.y	/^stmtlist:  \/* empty *\/$/;"	l
stores	spmvbench/smvm_timing_run.c	/^stores (const int r, const int c, const int nnzb)$/;"	f	signature:(const int r, const int c, const int nnzb)
stores	spmvbench/smvm_timing_run.h	/^stores (const int r, const int c, const int nnzb);$/;"	p	signature:(const int r, const int c, const int nnzb)
strdup	bebop_util/smvm_util.c	/^extern char* strdup (const char* s);$/;"	p	file:	signature:(const char* s)
substr	sparse_matrix_converter/iohb.c	/^char* substr(const char* S, const int pos, const int len)$/;"	f	signature:(const char* S, const int pos, const int len)
substr	sparse_matrix_converter/iohb.c	/^char* substr(const char* S, const int pos, const int len);$/;"	p	file:	signature:(const char* S, const int pos, const int len)
swap	sparse_matrix_converter/jad_matrix.c	/^swap (RowStr *rs, int iOne, int iTwo)$/;"	f	file:	signature:(RowStr *rs, int iOne, int iTwo)
swap_sparse_vector	sparse_matrix_converter/sparse_vector.c	/^swap_sparse_vector (struct sparse_vector_t *a, struct sparse_vector_t *b)$/;"	f	signature:(struct sparse_vector_t *a, struct sparse_vector_t *b)
swap_sparse_vector	sparse_matrix_converter/sparse_vector.h	/^swap_sparse_vector (struct sparse_vector_t *a, struct sparse_vector_t *b);$/;"	p	signature:(struct sparse_vector_t *a, struct sparse_vector_t *b)
swap_spvec	sparse_matrix_converter/spvec.c	/^swap_spvec (struct spvec_t *a, struct spvec_t *b)$/;"	f	signature:(struct spvec_t *a, struct spvec_t *b)
swap_spvec	sparse_matrix_converter/spvec.h	/^swap_spvec (struct spvec_t *a, struct spvec_t *b);$/;"	p	signature:(struct spvec_t *a, struct spvec_t *b)
symmetric_storage_location	sparse_matrix_converter/bcoo_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location	sparse_matrix_converter/bcsr_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location	sparse_matrix_converter/coo_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location	sparse_matrix_converter/csc_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location	sparse_matrix_converter/csr_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location	sparse_matrix_converter/jad_matrix.h	/^  enum symmetric_storage_location_t symmetric_storage_location;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::symmetric_storage_location_t	access:public
symmetric_storage_location_t	bebop_util/enumerations.h	/^symmetric_storage_location_t$/;"	g
symmetry_type	sparse_matrix_converter/bcoo_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::symmetry_type_t	access:public
symmetry_type	sparse_matrix_converter/bcsr_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::symmetry_type_t	access:public
symmetry_type	sparse_matrix_converter/coo_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::symmetry_type_t	access:public
symmetry_type	sparse_matrix_converter/csc_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::symmetry_type_t	access:public
symmetry_type	sparse_matrix_converter/csr_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::symmetry_type_t	access:public
symmetry_type	sparse_matrix_converter/jad_matrix.h	/^  enum symmetry_type_t symmetry_type;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::symmetry_type_t	access:public
symmetry_type_t	bebop_util/enumerations.h	/^symmetry_type_t $/;"	g
t_max	spmvbench/smvm_timing_results.h	/^  double t_max;$/;"	m	struct:SMVM_timing_results	access:public
t_median	spmvbench/smvm_timing_results.h	/^  double t_median;$/;"	m	struct:SMVM_timing_results	access:public
t_min	spmvbench/smvm_timing_results.h	/^  double t_min;$/;"	m	struct:SMVM_timing_results	access:public
test_random_double	bebop_util/tests/test_random_number.c	/^test_random_double (double low, double high)$/;"	f	signature:(double low, double high)
test_random_number	bebop_util/tests/test_random_number.c	/^test_random_number (int low, int high)$/;"	f	signature:(int low, int high)
test_sort_joint_arrays	bebop_util/tests/test_sort_joint_arrays.c	/^test_sort_joint_arrays (void* A1, void* A2, const void* const sorted_A1, $/;"	f	signature:(void* A1, void* A2, const void* const sorted_A1, const void* const sorted_A2, size_t nmemb, size_t size, int (*compar) (const void*, const void*, const void*, const void*))
test_split_pathname	bebop_util/tests/test_split_pathname.c	/^test_split_pathname (const char* const path, $/;"	f	signature:(const char* const path, const char* const expected_parentdir, const char* const expected_namestem, const char* const expected_extn)
test_visit	spmvbench/avltree.c	/^test_visit (avl_tree T, void *data)$/;"	f	signature:(avl_tree T, void *data)
test_visit	spmvbench/avltree.h	/^test_visit (avl_tree T, void* data);$/;"	p	signature:(avl_tree T, void* data)
test_visit_avl_tree_intpair	bebop_util/avltree_intpair.c	/^test_visit_avl_tree_intpair (avl_tree_intpair T, void* data)$/;"	f	signature:(avl_tree_intpair T, void* data)
test_visit_avl_tree_intpair	bebop_util/avltree_intpair.h	/^test_visit_avl_tree_intpair (avl_tree_intpair T, void* data);$/;"	p	signature:(avl_tree_intpair T, void* data)
the_usage_function	bebop_util/get_options.c	/^void (*the_usage_function) (FILE*, const struct arginfo*, const struct arginfo*) = NULL;$/;"	v
threshold_dims	hpcc_spmv_benchmark/benchmark_params.h	/^    int **threshold_dims;$/;"	m	struct:__anon2	access:public
timer_resolution	spmvbench/timing.c	/^timer_resolution()$/;"	f
timer_resolution	spmvbench/timing.h	/^timer_resolution();$/;"	p	signature:()
tmax	hpcc_spmv_benchmark/benchmark_params.h	/^    int tmax;$/;"	m	struct:__anon2	access:public
tokenize	matrix_generator/dict.c	/^static int tokenize(char *string, ...)$/;"	f	file:	signature:(char *string, ...)
transpose_dense_col_oriented_matrix	sparse_matrix_converter/mfh_matlib.c	/^transpose_dense_col_oriented_matrix (const double* A, $/;"	f	signature:(const double* A, const int m, const int n)
transpose_dense_col_oriented_matrix	sparse_matrix_converter/mfh_matlib.h	/^transpose_dense_col_oriented_matrix (const double* A, $/;"	p	signature:(const double* A, const int m, const int n)
traverse_in_order	spmvbench/avltree.c	/^traverse_in_order (avl_tree T, visit_function visit, void *data)$/;"	f	signature:(avl_tree T, visit_function visit, void *data)
traverse_in_order	spmvbench/avltree.h	/^traverse_in_order (avl_tree T, visit_function visit, void* data);$/;"	p	signature:(avl_tree T, visit_function visit, void* data)
traverse_in_order_avl_tree_intpair	bebop_util/avltree_intpair.c	/^traverse_in_order_avl_tree_intpair (avl_tree_intpair T, $/;"	f	signature:(avl_tree_intpair T, visit_function visit, void* data)
traverse_in_order_avl_tree_intpair	bebop_util/avltree_intpair.h	/^traverse_in_order_avl_tree_intpair (avl_tree_intpair T, visit_function visit, void* data);$/;"	p	signature:(avl_tree_intpair T, visit_function visit, void* data)
type	bebop_util/get_options.c	/^  arg_type_t type;$/;"	m	struct:arginfo	file:	access:public
unblocked_mflop_max	hpcc_spmv_benchmark/benchmark_params.h	/^    double unblocked_mflop_max;$/;"	m	struct:__anon2	access:public
unblocked_mflop_med	hpcc_spmv_benchmark/benchmark_params.h	/^    double unblocked_mflop_med;$/;"	m	struct:__anon2	access:public
unit_vector	sparse_matrix_converter/mfh_matlib.c	/^unit_vector (double* v, const int n, const int which)$/;"	f	signature:(double* v, const int n, const int which)
unit_vector	sparse_matrix_converter/mfh_matlib.h	/^unit_vector (double* v, const int n, const int which);$/;"	p	signature:(double* v, const int n, const int which)
unpack_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.c	/^unpack_bcsr_matrix (struct bcsr_matrix_t* A, int* bm, int* bn, int* r, int* c,$/;"	f	signature:(struct bcsr_matrix_t* A, int* bm, int* bn, int* r, int* c, int* nnzb, void** values, int** colind, int** rowptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type, int* col_oriented_p)
unpack_bcsr_matrix	sparse_matrix_converter/bcsr_matrix.h	/^unpack_bcsr_matrix (struct bcsr_matrix_t* A, int* bm, int* bn, int* r, int* c,$/;"	p	signature:(struct bcsr_matrix_t* A, int* bm, int* bn, int* r, int* c, int* nnzb, void** values, int** colind, int** rowptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type, int* col_oriented_p)
unpack_csc_matrix	sparse_matrix_converter/csc_matrix.c	/^unpack_csc_matrix (const struct csc_matrix_t* A,$/;"	f	signature:(const struct csc_matrix_t* A, int* m, int* n, int* nnz, void** values, int** rowidx, int** colptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type)
unpack_csc_matrix	sparse_matrix_converter/csc_matrix.h	/^unpack_csc_matrix (const struct csc_matrix_t* A,$/;"	p	signature:(const struct csc_matrix_t* A, int* m, int* n, int* nnz, void** values, int** rowidx, int** colptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type)
unpack_csr_matrix	sparse_matrix_converter/csr_matrix.c	/^unpack_csr_matrix (const struct csr_matrix_t* A,$/;"	f	signature:(const struct csr_matrix_t* A, int* m, int* n, int* nnz, void** values, int** colidx, int** rowptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type)
unpack_csr_matrix	sparse_matrix_converter/csr_matrix.h	/^unpack_csr_matrix (const struct csr_matrix_t* A,$/;"	p	signature:(const struct csr_matrix_t* A, int* m, int* n, int* nnz, void** values, int** colidx, int** rowptr, enum symmetry_type_t* symmetry_type, enum symmetric_storage_location_t* symmetric_storage_location, enum value_type_t* value_type)
upcase	sparse_matrix_converter/iohb.c	/^void upcase(char* S)$/;"	f	signature:(char* S)
upcase	sparse_matrix_converter/iohb.c	/^void upcase(char* S);$/;"	p	file:	signature:(char* S)
usage	bebop_util/main.c	/^usage (FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)$/;"	f	file:	signature:(FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)
usage	matrix_generator/main.c	/^usage (FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)$/;"	f	file:	signature:(FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)
usage	sparse_matrix_converter/main.c	/^usage (FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)$/;"	f	file:	signature:(FILE* out, const struct arginfo* arglist, const struct arginfo* ext_args)
usage	spmvbench/benchmark_tester.c	/^usage (const char* prog_name)$/;"	f	file:	signature:(const char* prog_name)
usage	spmvbench/main.c	/^usage ()$/;"	f	file:
v1	bebop_util/merge_sort.c	/^void* v1 = NULL;$/;"	v
v2	bebop_util/merge_sort.c	/^void* v2 = NULL;$/;"	v
val	bebop_util/get_options.c	/^  void* val;$/;"	m	struct:arginfo	file:	access:public
val	sparse_matrix_converter/bcoo_matrix.h	/^  void* val;$/;"	m	struct:bcoo_matrix_t	access:public
val	sparse_matrix_converter/coo_matrix.h	/^  void* val;$/;"	m	struct:coo_matrix_t	access:public
val	sparse_matrix_converter/coord_elem.h	/^  double val;$/;"	m	struct:coord_elem_t	access:public
val	sparse_matrix_converter/sparse_vector.h	/^  double* val;$/;"	m	struct:sparse_vector_t	access:public
val	sparse_matrix_converter/spvec.h	/^  void* val;$/;"	m	struct:spvec_t	access:public
valid_bcoo_matrix_p	sparse_matrix_converter/bcoo_matrix.c	/^valid_bcoo_matrix_p (struct bcoo_matrix_t* A)$/;"	f	signature:(struct bcoo_matrix_t* A)
valid_bcoo_matrix_p	sparse_matrix_converter/bcoo_matrix.h	/^valid_bcoo_matrix_p (struct bcoo_matrix_t* A);$/;"	p	signature:(struct bcoo_matrix_t* A)
valid_bcsr_matrix_p	sparse_matrix_converter/bcsr_matrix.c	/^valid_bcsr_matrix_p (const struct bcsr_matrix_t* A)$/;"	f	signature:(const struct bcsr_matrix_t* A)
valid_bcsr_matrix_p	sparse_matrix_converter/bcsr_matrix.h	/^valid_bcsr_matrix_p (const struct bcsr_matrix_t* A);$/;"	p	signature:(const struct bcsr_matrix_t* A)
valid_coo_matrix_p	sparse_matrix_converter/coo_matrix.c	/^valid_coo_matrix_p (struct coo_matrix_t *A)$/;"	f	signature:(struct coo_matrix_t *A)
valid_coo_matrix_p	sparse_matrix_converter/coo_matrix.h	/^valid_coo_matrix_p (struct coo_matrix_t *A);$/;"	p	signature:(struct coo_matrix_t *A)
valid_csc_matrix_p	sparse_matrix_converter/csc_matrix.c	/^valid_csc_matrix_p (const struct csc_matrix_t* A)$/;"	f	signature:(const struct csc_matrix_t* A)
valid_csc_matrix_p	sparse_matrix_converter/csc_matrix.h	/^valid_csc_matrix_p (const struct csc_matrix_t* A);$/;"	p	signature:(const struct csc_matrix_t* A)
valid_csr_matrix_p	sparse_matrix_converter/csr_matrix.c	/^valid_csr_matrix_p (const struct csr_matrix_t* A)$/;"	f	signature:(const struct csr_matrix_t* A)
valid_csr_matrix_p	sparse_matrix_converter/csr_matrix.h	/^valid_csr_matrix_p (const struct csr_matrix_t* A);$/;"	p	signature:(const struct csr_matrix_t* A)
valid_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.c	/^valid_sparse_matrix (struct sparse_matrix_t* A)$/;"	f	signature:(struct sparse_matrix_t* A)
valid_sparse_matrix	sparse_matrix_converter/sparse_matrix_ops.h	/^valid_sparse_matrix (struct sparse_matrix_t* A);$/;"	p	signature:(struct sparse_matrix_t* A)
value	sparse_matrix_converter/csc_matrix.c	/^  double value;$/;"	m	struct:index_real_value_pair_t	file:	access:public
value	sparse_matrix_converter/csc_matrix.c	/^  double_Complex value;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
value	sparse_matrix_converter/csr_matrix.c	/^  double value;$/;"	m	struct:index_real_value_pair_t	file:	access:public
value	sparse_matrix_converter/csr_matrix.c	/^  double_Complex value;$/;"	m	struct:index_complex_value_pair_t	file:	access:public
value_type	sparse_matrix_converter/bcoo_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:bcoo_matrix_t	typeref:enum:bcoo_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/bcsr_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:bcsr_matrix_t	typeref:enum:bcsr_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/coo_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:coo_matrix_t	typeref:enum:coo_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/csc_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:csc_matrix_t	typeref:enum:csc_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/csr_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:csr_matrix_t	typeref:enum:csr_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/jad_matrix.h	/^  enum value_type_t value_type;$/;"	m	struct:jad_matrix_t	typeref:enum:jad_matrix_t::value_type_t	access:public
value_type	sparse_matrix_converter/spvec.h	/^  enum value_type_t value_type;$/;"	m	struct:spvec_t	typeref:enum:spvec_t::value_type_t	access:public
value_type_t	bebop_util/enumerations.h	/^value_type_t$/;"	g
values	sparse_matrix_converter/bcsr_matrix.h	/^  void* values;$/;"	m	struct:bcsr_matrix_t	access:public
values	sparse_matrix_converter/csc_matrix.h	/^  void* values;$/;"	m	struct:csc_matrix_t	access:public
values	sparse_matrix_converter/csr_matrix.h	/^  void* values;$/;"	m	struct:csr_matrix_t	access:public
verify_bintree	matrix_generator/dict.c	/^static int verify_bintree(dict_t *dict)$/;"	f	file:	signature:(dict_t *dict)
verify_dict_has_node	matrix_generator/dict.c	/^static int verify_dict_has_node(dnode_t *nil, dnode_t *root, dnode_t *node)$/;"	f	file:	signature:(dnode_t *nil, dnode_t *root, dnode_t *node)
verify_node_count	matrix_generator/dict.c	/^static dictcount_t verify_node_count(dnode_t *nil, dnode_t *root)$/;"	f	file:	signature:(dnode_t *nil, dnode_t *root)
verify_redblack	matrix_generator/dict.c	/^static unsigned int verify_redblack(dnode_t *nil, dnode_t *root)$/;"	f	file:	signature:(dnode_t *nil, dnode_t *root)
visit_function	bebop_util/avltree_intpair.h	/^typedef  void(*visit_function)  (avl_tree_intpair, void*);$/;"	t
visit_function	spmvbench/avltree.h	/^typedef  void(*visit_function)  (avl_tree, void*);$/;"	t
worst_block_size	spmvbench/smvm_benchmark_results.h	/^  int worst_block_size;$/;"	m	struct:SMVM_benchmark_results	access:public
worst_c	spmvbench/smvm_benchmark_results.h	/^  int worst_c;$/;"	m	struct:SMVM_benchmark_results	access:public
worst_fill	spmvbench/smvm_benchmark_results.h	/^  double worst_fill;$/;"	m	struct:SMVM_benchmark_results	access:public
worst_mflops_rate	spmvbench/smvm_benchmark_results.h	/^  double worst_mflops_rate;$/;"	m	struct:SMVM_benchmark_results	access:public
worst_r	spmvbench/smvm_benchmark_results.h	/^  int worst_r;$/;"	m	struct:SMVM_benchmark_results	access:public
writeHB_mat_char	sparse_matrix_converter/iohb.c	/^int writeHB_mat_char(const char* filename, int M, int N, $/;"	f	signature:(const char* filename, int M, int N, int nz, const int colptr[], const int rowind[], const char val[], int Nrhs, const char rhs[], const char guess[], const char exact[], const char* Title, const char* Key, const char* Type, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, const char* Rhstype)
writeHB_mat_char	sparse_matrix_converter/iohb.h	/^int writeHB_mat_char(const char* filename, int M, int N, $/;"	p	signature:(const char* filename, int M, int N, int nz, const int colptr[], const int rowind[], const char val[], int Nrhs, const char rhs[], const char guess[], const char exact[], const char* Title, const char* Key, const char* Type, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, const char* Rhstype)
writeHB_mat_double	sparse_matrix_converter/iohb.c	/^int writeHB_mat_double(const char* filename, int M, int N, $/;"	f	signature:(const char* filename, int M, int N, int nz, const int colptr[], const int rowind[], const double val[], int Nrhs, const double rhs[], const double guess[], const double exact[], const char* Title, const char* Key, const char* Type, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, const char* Rhstype)
writeHB_mat_double	sparse_matrix_converter/iohb.h	/^int writeHB_mat_double(const char* filename, int M, int N, $/;"	p	signature:(const char* filename, int M, int N, int nz, const int colptr[], const int rowind[], const double val[], int Nrhs, const double rhs[], const double guess[], const double exact[], const char* Title, const char* Key, const char* Type, char* Ptrfmt, char* Indfmt, char* Valfmt, char* Rhsfmt, const char* Rhstype)
write_harwell_boeing_mat_double	sparse_matrix_converter/csc_matrix.c	/^write_harwell_boeing_mat_double (const char* filename, $/;"	f	signature:(const char* filename, const char* title, const char* key, const struct csc_matrix_t* A)
write_harwell_boeing_mat_double	sparse_matrix_converter/csc_matrix.c	/^write_harwell_boeing_mat_double (const char* filename, $/;"	p	file:	signature:(const char* filename, const char* title, const char* key, const struct csc_matrix_t* A)
zeros	sparse_matrix_converter/mfh_matlib.c	/^zeros (double* A, const int m, const int n)$/;"	f	signature:(double* A, const int m, const int n)
zeros	sparse_matrix_converter/mfh_matlib.h	/^zeros (double* A, const int m, const int n);$/;"	p	signature:(double* A, const int m, const int n)
